
mainbord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000986c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009a44  08009a44  00019a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a9c  08009a9c  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009a9c  08009a9c  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a9c  08009a9c  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a9c  08009a9c  00019a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009aa0  08009aa0  00019aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000153c  20000184  08009c28  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016c0  08009c28  000216c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ada4  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000349b  00000000  00000000  0003af58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a0  00000000  00000000  0003e3f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001228  00000000  00000000  0003f798  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020593  00000000  00000000  000409c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011bba  00000000  00000000  00060f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c428e  00000000  00000000  00072b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136d9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051c8  00000000  00000000  00136e18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009a2c 	.word	0x08009a2c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	08009a2c 	.word	0x08009a2c

08000218 <getPID>:



} PID;

int32_t getPID(PID* pid,int16_t newPosition){
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	460b      	mov	r3, r1
 8000222:	807b      	strh	r3, [r7, #2]
	  pid->kp=6000;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f241 7270 	movw	r2, #6000	; 0x1770
 800022a:	619a      	str	r2, [r3, #24]
	  pid->ki=46;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	222e      	movs	r2, #46	; 0x2e
 8000230:	61da      	str	r2, [r3, #28]
	  pid->kd=0;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2200      	movs	r2, #0
 8000236:	621a      	str	r2, [r3, #32]
	  pid->positionPrev = pid->position;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	80da      	strh	r2, [r3, #6]
	  pid->position = newPosition;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	887a      	ldrh	r2, [r7, #2]
 8000246:	801a      	strh	r2, [r3, #0]
	  pid->positionChange=pid->position-pid->positionPrev;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800024e:	b29a      	uxth	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000256:	b29b      	uxth	r3, r3
 8000258:	1ad3      	subs	r3, r2, r3
 800025a:	b29b      	uxth	r3, r3
 800025c:	b21a      	sxth	r2, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	805a      	strh	r2, [r3, #2]
	  pid->Error =(pid->setpoint)-(pid->positionChange);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000268:	461a      	mov	r2, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000270:	1ad2      	subs	r2, r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	611a      	str	r2, [r3, #16]

	  pid->P=(pid->kp*pid->Error);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	6912      	ldr	r2, [r2, #16]
 800027e:	fb02 f203 	mul.w	r2, r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	629a      	str	r2, [r3, #40]	; 0x28

	  pid->Cum_error=pid->Cum_error+pid->Error;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	ed93 7a03 	vldr	s14, [r3, #12]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	691b      	ldr	r3, [r3, #16]
 8000290:	ee07 3a90 	vmov	s15, r3
 8000294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	edc3 7a03 	vstr	s15, [r3, #12]
	  if(pid->setpoint==0)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d103      	bne.n	80002b4 <getPID+0x9c>
	  {
		  pid->Cum_error=0;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f04f 0200 	mov.w	r2, #0
 80002b2:	60da      	str	r2, [r3, #12]
	  }
	  if(pid->Cum_error>3500)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80002ba:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000350 <getPID+0x138>
 80002be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002c6:	dd02      	ble.n	80002ce <getPID+0xb6>
	 	  {
	 		  pid->Cum_error=3500;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a22      	ldr	r2, [pc, #136]	; (8000354 <getPID+0x13c>)
 80002cc:	60da      	str	r2, [r3, #12]
	 	  }
	  if(pid->Cum_error<-3500)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80002d4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000358 <getPID+0x140>
 80002d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002e0:	d502      	bpl.n	80002e8 <getPID+0xd0>
	 	  {
	 		  pid->Cum_error=-3500;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a1d      	ldr	r2, [pc, #116]	; (800035c <getPID+0x144>)
 80002e6:	60da      	str	r2, [r3, #12]
	 	  }
	  pid->I=pid->ki*pid->Cum_error;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	69db      	ldr	r3, [r3, #28]
 80002ec:	ee07 3a90 	vmov	s15, r3
 80002f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80002fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000302:	ee17 2a90 	vmov	r2, s15
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	62da      	str	r2, [r3, #44]	; 0x2c

	  pid->Errorchange=pid->Error-pid->ErrorPrev;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	691a      	ldr	r2, [r3, #16]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	1ad2      	subs	r2, r2, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	615a      	str	r2, [r3, #20]
	  pid->ErrorPrev=pid->Error;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	691a      	ldr	r2, [r3, #16]
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	609a      	str	r2, [r3, #8]
	  pid->D=(pid->kd*pid->Errorchange);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	6952      	ldr	r2, [r2, #20]
 8000328:	fb02 f303 	mul.w	r3, r2, r3
 800032c:	461a      	mov	r2, r3
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	631a      	str	r2, [r3, #48]	; 0x30

	  pid->PID=pid->P+pid->I;//+pid->D;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800033a:	441a      	add	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	635a      	str	r2, [r3, #52]	; 0x34




	  return pid->PID;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	6b5b      	ldr	r3, [r3, #52]	; 0x34


}
 8000344:	4618      	mov	r0, r3
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	455ac000 	.word	0x455ac000
 8000354:	455ac000 	.word	0x455ac000
 8000358:	c55ac000 	.word	0xc55ac000
 800035c:	c55ac000 	.word	0xc55ac000

08000360 <CDC_On_Receive>:

} Feedback;



void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6)
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	6039      	str	r1, [r7, #0]

	if (*length == sizeof(Command)) { // (7)
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b0c      	cmp	r3, #12
 8000370:	d10d      	bne.n	800038e <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command)); // (8)
 8000372:	220c      	movs	r2, #12
 8000374:	6879      	ldr	r1, [r7, #4]
 8000376:	4808      	ldr	r0, [pc, #32]	; (8000398 <CDC_On_Receive+0x38>)
 8000378:	f009 fb44 	bl	8009a04 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9)
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <CDC_On_Receive+0x38>)
 800037e:	895b      	ldrh	r3, [r3, #10]
 8000380:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000384:	4293      	cmp	r3, r2
 8000386:	d102      	bne.n	800038e <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <CDC_On_Receive+0x3c>)
 800038a:	2201      	movs	r2, #1
 800038c:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	200001a0 	.word	0x200001a0
 800039c:	200001ac 	.word	0x200001ac

080003a0 <Motor_control_calculations>:

PID Motor1 = { .position=0,.positionChange=0,.setpoint=0,.positionPrev=0,.Cum_error=0,.D=0,.Error=0,.ErrorPrev=0l,.Errorchange=0,.I=0,.kp=0,.ki=0,.kd=0,.PID=0,};
PID Motor2 = { .position=0};
PID Motor3 =  { .position=0};
void Motor_control_calculations(){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
	int32_t PID1;int32_t PID2;int32_t PID3;


	PID1  = getPID(&Motor1,(int16_t)TIM1->CNT);
 80003a6:	4b40      	ldr	r3, [pc, #256]	; (80004a8 <Motor_control_calculations+0x108>)
 80003a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003aa:	b21b      	sxth	r3, r3
 80003ac:	4619      	mov	r1, r3
 80003ae:	483f      	ldr	r0, [pc, #252]	; (80004ac <Motor_control_calculations+0x10c>)
 80003b0:	f7ff ff32 	bl	8000218 <getPID>
 80003b4:	60f8      	str	r0, [r7, #12]
	PID2  = getPID(&Motor2,(int16_t)TIM3->CNT);
 80003b6:	4b3e      	ldr	r3, [pc, #248]	; (80004b0 <Motor_control_calculations+0x110>)
 80003b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ba:	b21b      	sxth	r3, r3
 80003bc:	4619      	mov	r1, r3
 80003be:	483d      	ldr	r0, [pc, #244]	; (80004b4 <Motor_control_calculations+0x114>)
 80003c0:	f7ff ff2a 	bl	8000218 <getPID>
 80003c4:	60b8      	str	r0, [r7, #8]
	PID3  = getPID(&Motor3,(int16_t)TIM4->CNT);
 80003c6:	4b3c      	ldr	r3, [pc, #240]	; (80004b8 <Motor_control_calculations+0x118>)
 80003c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ca:	b21b      	sxth	r3, r3
 80003cc:	4619      	mov	r1, r3
 80003ce:	483b      	ldr	r0, [pc, #236]	; (80004bc <Motor_control_calculations+0x11c>)
 80003d0:	f7ff ff22 	bl	8000218 <getPID>
 80003d4:	6078      	str	r0, [r7, #4]
//	TIM2->CCR3 = 65535;
//	TIM2->CCR4 = 0;
//	TIM17->CCR1 = 65535;
//	TIM16->CCR1 = 0;

	if (PID1 > 65535)
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80003dc:	db03      	blt.n	80003e6 <Motor_control_calculations+0x46>
	{
	    PID1 = 65535;
 80003de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	e005      	b.n	80003f2 <Motor_control_calculations+0x52>
	}
	else if (PID1 < -65535)
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80003ec:	dc01      	bgt.n	80003f2 <Motor_control_calculations+0x52>
	{
	    PID1 = -65535;
 80003ee:	4b34      	ldr	r3, [pc, #208]	; (80004c0 <Motor_control_calculations+0x120>)
 80003f0:	60fb      	str	r3, [r7, #12]
	}
	if (PID2 > 65535)
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80003f8:	db03      	blt.n	8000402 <Motor_control_calculations+0x62>
	{
		PID2 = 65535;
 80003fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003fe:	60bb      	str	r3, [r7, #8]
 8000400:	e005      	b.n	800040e <Motor_control_calculations+0x6e>
	}
	else if (PID2 < -65535)
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000408:	dc01      	bgt.n	800040e <Motor_control_calculations+0x6e>
	{
		PID2 = -65535;
 800040a:	4b2d      	ldr	r3, [pc, #180]	; (80004c0 <Motor_control_calculations+0x120>)
 800040c:	60bb      	str	r3, [r7, #8]
	}
	if (PID3 > 65535)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000414:	db03      	blt.n	800041e <Motor_control_calculations+0x7e>
	{
		PID3 = 65535;
 8000416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	e005      	b.n	800042a <Motor_control_calculations+0x8a>
	}
	else if (PID3 < -65535)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000424:	dc01      	bgt.n	800042a <Motor_control_calculations+0x8a>
	{
		PID3 = -65535;
 8000426:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <Motor_control_calculations+0x120>)
 8000428:	607b      	str	r3, [r7, #4]
	}
	if(PID1>0){
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	2b00      	cmp	r3, #0
 800042e:	dd08      	ble.n	8000442 <Motor_control_calculations+0xa2>
			TIM2->CCR2 = PID1;
 8000430:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	6393      	str	r3, [r2, #56]	; 0x38
			TIM2->CCR1 = 0;
 8000438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800043c:	2200      	movs	r2, #0
 800043e:	635a      	str	r2, [r3, #52]	; 0x34
 8000440:	e008      	b.n	8000454 <Motor_control_calculations+0xb4>
		}
	else{
			TIM2->CCR1 = -PID1;
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	425a      	negs	r2, r3
 8000446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800044a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 800044c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000450:	2200      	movs	r2, #0
 8000452:	639a      	str	r2, [r3, #56]	; 0x38
		}
	if(PID2>0){
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	2b00      	cmp	r3, #0
 8000458:	dd08      	ble.n	800046c <Motor_control_calculations+0xcc>
			TIM2->CCR4 = PID2;
 800045a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	6413      	str	r3, [r2, #64]	; 0x40
			TIM2->CCR3 = 0;
 8000462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000466:	2200      	movs	r2, #0
 8000468:	63da      	str	r2, [r3, #60]	; 0x3c
 800046a:	e008      	b.n	800047e <Motor_control_calculations+0xde>
			}
	else{
			TIM2->CCR3 = -PID2;
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	425a      	negs	r2, r3
 8000470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000474:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM2->CCR4 = 0;
 8000476:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800047a:	2200      	movs	r2, #0
 800047c:	641a      	str	r2, [r3, #64]	; 0x40
		}
	if(PID3>0){
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2b00      	cmp	r3, #0
 8000482:	dd06      	ble.n	8000492 <Motor_control_calculations+0xf2>
			TIM17->CCR1 = PID3;
 8000484:	4a0f      	ldr	r2, [pc, #60]	; (80004c4 <Motor_control_calculations+0x124>)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	6353      	str	r3, [r2, #52]	; 0x34
			TIM16->CCR1 = 0;
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <Motor_control_calculations+0x128>)
 800048c:	2200      	movs	r2, #0
 800048e:	635a      	str	r2, [r3, #52]	; 0x34
				}
	else{
			TIM16->CCR1 = -PID3;
			TIM17->CCR1 = 0;
		}
}
 8000490:	e006      	b.n	80004a0 <Motor_control_calculations+0x100>
			TIM16->CCR1 = -PID3;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	425a      	negs	r2, r3
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <Motor_control_calculations+0x128>)
 8000498:	635a      	str	r2, [r3, #52]	; 0x34
			TIM17->CCR1 = 0;
 800049a:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <Motor_control_calculations+0x124>)
 800049c:	2200      	movs	r2, #0
 800049e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80004a0:	bf00      	nop
 80004a2:	3710      	adds	r7, #16
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40012c00 	.word	0x40012c00
 80004ac:	200001b0 	.word	0x200001b0
 80004b0:	40000400 	.word	0x40000400
 80004b4:	200001e8 	.word	0x200001e8
 80004b8:	40000800 	.word	0x40000800
 80004bc:	20000220 	.word	0x20000220
 80004c0:	ffff0001 	.word	0xffff0001
 80004c4:	40014800 	.word	0x40014800
 80004c8:	40014400 	.word	0x40014400

080004cc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	  Motor_control_calculations(); // Motor control calculations can be called from here
 80004d4:	f7ff ff64 	bl	80003a0 <Motor_control_calculations>
 }
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 ff72 	bl	80013ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f8a3 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 fc99 	bl	8000e24 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004f2:	f000 f977 	bl	80007e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004f6:	f000 f9f5 	bl	80008e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004fa:	f000 fa49 	bl	8000990 <MX_TIM4_Init>
  MX_TIM7_Init();
 80004fe:	f000 fad3 	bl	8000aa8 <MX_TIM7_Init>
  MX_TIM8_Init();
 8000502:	f000 fb07 	bl	8000b14 <MX_TIM8_Init>
  MX_TIM1_Init();
 8000506:	f000 f8fd 	bl	8000704 <MX_TIM1_Init>
  MX_TIM16_Init();
 800050a:	f000 fb97 	bl	8000c3c <MX_TIM16_Init>
  MX_TIM17_Init();
 800050e:	f000 fc0f 	bl	8000d30 <MX_TIM17_Init>
  MX_USB_Device_Init();
 8000512:	f008 fd5b 	bl	8008fcc <MX_USB_Device_Init>
  MX_TIM6_Init();
 8000516:	f000 fa91 	bl	8000a3c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  Feedback feedback = { // (1)
 800051a:	2300      	movs	r3, #0
 800051c:	80bb      	strh	r3, [r7, #4]
 800051e:	2300      	movs	r3, #0
 8000520:	80fb      	strh	r3, [r7, #6]
 8000522:	2300      	movs	r3, #0
 8000524:	813b      	strh	r3, [r7, #8]
 8000526:	2300      	movs	r3, #0
 8000528:	817b      	strh	r3, [r7, #10]
 800052a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800052e:	81bb      	strh	r3, [r7, #12]
       .speed3 = 0,
	   .error=0,
       .delimiter = 0xAAAA
   };

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000530:	2104      	movs	r1, #4
 8000532:	4831      	ldr	r0, [pc, #196]	; (80005f8 <main+0x118>)
 8000534:	f004 f848 	bl	80045c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000538:	2104      	movs	r1, #4
 800053a:	4830      	ldr	r0, [pc, #192]	; (80005fc <main+0x11c>)
 800053c:	f004 f844 	bl	80045c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000540:	2104      	movs	r1, #4
 8000542:	482f      	ldr	r0, [pc, #188]	; (8000600 <main+0x120>)
 8000544:	f004 f840 	bl	80045c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8000548:	482e      	ldr	r0, [pc, #184]	; (8000604 <main+0x124>)
 800054a:	f003 fdd5 	bl	80040f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800054e:	2100      	movs	r1, #0
 8000550:	482d      	ldr	r0, [pc, #180]	; (8000608 <main+0x128>)
 8000552:	f003 fe93 	bl	800427c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000556:	2104      	movs	r1, #4
 8000558:	482b      	ldr	r0, [pc, #172]	; (8000608 <main+0x128>)
 800055a:	f003 fe8f 	bl	800427c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800055e:	2108      	movs	r1, #8
 8000560:	4829      	ldr	r0, [pc, #164]	; (8000608 <main+0x128>)
 8000562:	f003 fe8b 	bl	800427c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);//| TIM_CHANNEL_2 | TIM_CHANNEL_3 | TIM_CHANNEL_4);
 8000566:	210c      	movs	r1, #12
 8000568:	4827      	ldr	r0, [pc, #156]	; (8000608 <main+0x128>)
 800056a:	f003 fe87 	bl	800427c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800056e:	2100      	movs	r1, #0
 8000570:	4826      	ldr	r0, [pc, #152]	; (800060c <main+0x12c>)
 8000572:	f003 fe83 	bl	800427c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000576:	2100      	movs	r1, #0
 8000578:	4825      	ldr	r0, [pc, #148]	; (8000610 <main+0x130>)
 800057a:	f003 fe7f 	bl	800427c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800057e:	2100      	movs	r1, #0
 8000580:	4824      	ldr	r0, [pc, #144]	; (8000614 <main+0x134>)
 8000582:	f003 fe7b 	bl	800427c <HAL_TIM_PWM_Start>
  TIM8->CCR1=3000;
 8000586:	4b24      	ldr	r3, [pc, #144]	; (8000618 <main+0x138>)
 8000588:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800058c:	635a      	str	r2, [r3, #52]	; 0x34
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (isCommandReceived) { // (2)
 800058e:	4b23      	ldr	r3, [pc, #140]	; (800061c <main+0x13c>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0fa      	beq.n	800058e <main+0xae>
	        isCommandReceived = 0;
 8000598:	4b20      	ldr	r3, [pc, #128]	; (800061c <main+0x13c>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
	        HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_1);
 800059e:	2102      	movs	r1, #2
 80005a0:	481f      	ldr	r0, [pc, #124]	; (8000620 <main+0x140>)
 80005a2:	f001 fa2f 	bl	8001a04 <HAL_GPIO_TogglePin>
	        //HAL_Delay(1000);// (3)
            Motor1.setpoint = command.speed1;
 80005a6:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <main+0x144>)
 80005a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005ac:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <main+0x148>)
 80005ae:	809a      	strh	r2, [r3, #4]
            Motor2.setpoint = command.speed2;
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <main+0x144>)
 80005b2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80005b6:	4b1d      	ldr	r3, [pc, #116]	; (800062c <main+0x14c>)
 80005b8:	809a      	strh	r2, [r3, #4]
            Motor3.setpoint = command.speed3;
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <main+0x144>)
 80005bc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <main+0x150>)
 80005c2:	809a      	strh	r2, [r3, #4]

            TIM8->CCR1=command.throwerSpeed;
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <main+0x144>)
 80005c6:	88da      	ldrh	r2, [r3, #6]
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <main+0x138>)
 80005ca:	635a      	str	r2, [r3, #52]	; 0x34
//            Motor1.kp=command.kp;
//            Motor2.kp=command.kp;
//            Motor3.kp=command.kp*4;

            //feedback.speed1 = TIM8->CCR1;
	        feedback.speed1 = Motor1.positionChange;
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <main+0x148>)
 80005ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005d2:	80bb      	strh	r3, [r7, #4]
	        feedback.error=Motor3.Error;// (4)
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <main+0x150>)
 80005d6:	691b      	ldr	r3, [r3, #16]
 80005d8:	b29b      	uxth	r3, r3
 80005da:	80fb      	strh	r3, [r7, #6]
	        feedback.speed2 =Motor2.positionChange;//Motor2.positionChange;
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <main+0x14c>)
 80005de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005e2:	813b      	strh	r3, [r7, #8]
	        feedback.speed3 =Motor3.positionChange;//Motor3.positionChange;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <main+0x150>)
 80005e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005ea:	817b      	strh	r3, [r7, #10]


	        CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5)
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	210a      	movs	r1, #10
 80005f0:	4618      	mov	r0, r3
 80005f2:	f008 fdad 	bl	8009150 <CDC_Transmit_FS>
	  if (isCommandReceived) { // (2)
 80005f6:	e7ca      	b.n	800058e <main+0xae>
 80005f8:	200005f8 	.word	0x200005f8
 80005fc:	20000560 	.word	0x20000560
 8000600:	200004c8 	.word	0x200004c8
 8000604:	200005ac 	.word	0x200005ac
 8000608:	20000644 	.word	0x20000644
 800060c:	20000690 	.word	0x20000690
 8000610:	20000514 	.word	0x20000514
 8000614:	2000047c 	.word	0x2000047c
 8000618:	40013400 	.word	0x40013400
 800061c:	200001ac 	.word	0x200001ac
 8000620:	48001400 	.word	0x48001400
 8000624:	200001a0 	.word	0x200001a0
 8000628:	200001b0 	.word	0x200001b0
 800062c:	200001e8 	.word	0x200001e8
 8000630:	20000220 	.word	0x20000220

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b0a4      	sub	sp, #144	; 0x90
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800063e:	2238      	movs	r2, #56	; 0x38
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f009 f9e9 	bl	8009a1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000658:	463b      	mov	r3, r7
 800065a:	2244      	movs	r2, #68	; 0x44
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f009 f9db 	bl	8009a1a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000664:	2000      	movs	r0, #0
 8000666:	f002 fd4f 	bl	8003108 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800066a:	2322      	movs	r3, #34	; 0x22
 800066c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000672:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2340      	movs	r3, #64	; 0x40
 8000676:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000684:	2301      	movs	r3, #1
 8000686:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000688:	2314      	movs	r3, #20
 800068a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000694:	2304      	movs	r3, #4
 8000696:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fde3 	bl	8003270 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006b0:	f000 fc02 	bl	8000eb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2303      	movs	r3, #3
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006cc:	2104      	movs	r1, #4
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 f8e6 	bl	80038a0 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006da:	f000 fbed 	bl	8000eb8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006e4:	2300      	movs	r3, #0
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 fabc 	bl	8003c68 <HAL_RCCEx_PeriphCLKConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006f6:	f000 fbdf 	bl	8000eb8 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3790      	adds	r7, #144	; 0x90
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b09a      	sub	sp, #104	; 0x68
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800070a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800070e:	2224      	movs	r2, #36	; 0x24
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f009 f981 	bl	8009a1a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000718:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2234      	movs	r2, #52	; 0x34
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f009 f975 	bl	8009a1a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000730:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <MX_TIM1_Init+0xd8>)
 8000732:	4a2b      	ldr	r2, [pc, #172]	; (80007e0 <MX_TIM1_Init+0xdc>)
 8000734:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000736:	4b29      	ldr	r3, [pc, #164]	; (80007dc <MX_TIM1_Init+0xd8>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073c:	4b27      	ldr	r3, [pc, #156]	; (80007dc <MX_TIM1_Init+0xd8>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000742:	4b26      	ldr	r3, [pc, #152]	; (80007dc <MX_TIM1_Init+0xd8>)
 8000744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000748:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074a:	4b24      	ldr	r3, [pc, #144]	; (80007dc <MX_TIM1_Init+0xd8>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000750:	4b22      	ldr	r3, [pc, #136]	; (80007dc <MX_TIM1_Init+0xd8>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000756:	4b21      	ldr	r3, [pc, #132]	; (80007dc <MX_TIM1_Init+0xd8>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800075c:	2303      	movs	r3, #3
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000760:	2300      	movs	r3, #0
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000764:	2301      	movs	r3, #1
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000770:	2300      	movs	r3, #0
 8000772:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000774:	2301      	movs	r3, #1
 8000776:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000780:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000784:	4619      	mov	r1, r3
 8000786:	4815      	ldr	r0, [pc, #84]	; (80007dc <MX_TIM1_Init+0xd8>)
 8000788:	f003 fe78 	bl	800447c <HAL_TIM_Encoder_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000792:	f000 fb91 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000796:	2300      	movs	r3, #0
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800079a:	2300      	movs	r3, #0
 800079c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007a6:	4619      	mov	r1, r3
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <MX_TIM1_Init+0xd8>)
 80007aa:	f004 fdfd 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80007b4:	f000 fb80 	bl	8000eb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007bc:	2300      	movs	r3, #0
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_TIM1_Init+0xd8>)
 80007c6:	f004 fe71 	bl	80054ac <HAL_TIMEx_ConfigBreakDeadTime>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80007d0:	f000 fb72 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	3768      	adds	r7, #104	; 0x68
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200005f8 	.word	0x200005f8
 80007e0:	40012c00 	.word	0x40012c00

080007e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f6:	463b      	mov	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
 8000804:	615a      	str	r2, [r3, #20]
 8000806:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000808:	4b35      	ldr	r3, [pc, #212]	; (80008e0 <MX_TIM2_Init+0xfc>)
 800080a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000810:	4b33      	ldr	r3, [pc, #204]	; (80008e0 <MX_TIM2_Init+0xfc>)
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000816:	4b32      	ldr	r3, [pc, #200]	; (80008e0 <MX_TIM2_Init+0xfc>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800081c:	4b30      	ldr	r3, [pc, #192]	; (80008e0 <MX_TIM2_Init+0xfc>)
 800081e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000822:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000824:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <MX_TIM2_Init+0xfc>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082a:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <MX_TIM2_Init+0xfc>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000830:	482b      	ldr	r0, [pc, #172]	; (80008e0 <MX_TIM2_Init+0xfc>)
 8000832:	f003 fccb 	bl	80041cc <HAL_TIM_PWM_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800083c:	f000 fb3c 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	4824      	ldr	r0, [pc, #144]	; (80008e0 <MX_TIM2_Init+0xfc>)
 8000850:	f004 fdaa 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800085a:	f000 fb2d 	bl	8000eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085e:	2360      	movs	r3, #96	; 0x60
 8000860:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	4619      	mov	r1, r3
 8000874:	481a      	ldr	r0, [pc, #104]	; (80008e0 <MX_TIM2_Init+0xfc>)
 8000876:	f004 f8b3 	bl	80049e0 <HAL_TIM_PWM_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000880:	f000 fb1a 	bl	8000eb8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	2204      	movs	r2, #4
 800088c:	4619      	mov	r1, r3
 800088e:	4814      	ldr	r0, [pc, #80]	; (80008e0 <MX_TIM2_Init+0xfc>)
 8000890:	f004 f8a6 	bl	80049e0 <HAL_TIM_PWM_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800089a:	f000 fb0d 	bl	8000eb8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	2208      	movs	r2, #8
 80008a6:	4619      	mov	r1, r3
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <MX_TIM2_Init+0xfc>)
 80008aa:	f004 f899 	bl	80049e0 <HAL_TIM_PWM_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80008b4:	f000 fb00 	bl	8000eb8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008bc:	463b      	mov	r3, r7
 80008be:	220c      	movs	r2, #12
 80008c0:	4619      	mov	r1, r3
 80008c2:	4807      	ldr	r0, [pc, #28]	; (80008e0 <MX_TIM2_Init+0xfc>)
 80008c4:	f004 f88c 	bl	80049e0 <HAL_TIM_PWM_ConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80008ce:	f000 faf3 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008d2:	4803      	ldr	r0, [pc, #12]	; (80008e0 <MX_TIM2_Init+0xfc>)
 80008d4:	f000 fc56 	bl	8001184 <HAL_TIM_MspPostInit>

}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000644 	.word	0x20000644

080008e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2224      	movs	r2, #36	; 0x24
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f009 f891 	bl	8009a1a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f8:	463b      	mov	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <MX_TIM3_Init+0xa4>)
 8000904:	4a21      	ldr	r2, [pc, #132]	; (800098c <MX_TIM3_Init+0xa8>)
 8000906:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000908:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_TIM3_Init+0xa4>)
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_TIM3_Init+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_TIM3_Init+0xa4>)
 8000916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800091a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_TIM3_Init+0xa4>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_TIM3_Init+0xa4>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000928:	2303      	movs	r3, #3
 800092a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000930:	2301      	movs	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000940:	2301      	movs	r3, #1
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4619      	mov	r1, r3
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_TIM3_Init+0xa4>)
 8000954:	f003 fd92 	bl	800447c <HAL_TIM_Encoder_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800095e:	f000 faab 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800096a:	463b      	mov	r3, r7
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <MX_TIM3_Init+0xa4>)
 8000970:	f004 fd1a 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800097a:	f000 fa9d 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3730      	adds	r7, #48	; 0x30
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000560 	.word	0x20000560
 800098c:	40000400 	.word	0x40000400

08000990 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	2224      	movs	r2, #36	; 0x24
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f009 f83b 	bl	8009a1a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a4:	463b      	mov	r3, r7
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_TIM4_Init+0xa4>)
 80009b0:	4a21      	ldr	r2, [pc, #132]	; (8000a38 <MX_TIM4_Init+0xa8>)
 80009b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_TIM4_Init+0xa4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_TIM4_Init+0xa4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009c0:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_TIM4_Init+0xa4>)
 80009c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_TIM4_Init+0xa4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_TIM4_Init+0xa4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009d4:	2303      	movs	r3, #3
 80009d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009dc:	2301      	movs	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009ec:	2301      	movs	r3, #1
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	4619      	mov	r1, r3
 80009fe:	480d      	ldr	r0, [pc, #52]	; (8000a34 <MX_TIM4_Init+0xa4>)
 8000a00:	f003 fd3c 	bl	800447c <HAL_TIM_Encoder_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000a0a:	f000 fa55 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a16:	463b      	mov	r3, r7
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	; (8000a34 <MX_TIM4_Init+0xa4>)
 8000a1c:	f004 fcc4 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000a26:	f000 fa47 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	3730      	adds	r7, #48	; 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200004c8 	.word	0x200004c8
 8000a38:	40000800 	.word	0x40000800

08000a3c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a4e:	4a15      	ldr	r2, [pc, #84]	; (8000aa4 <MX_TIM6_Init+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a54:	2218      	movs	r2, #24
 8000a56:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a60:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000a64:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a6e:	f003 faeb 	bl	8004048 <HAL_TIM_Base_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a78:	f000 fa1e 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a8a:	f004 fc8d 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000a94:	f000 fa10 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200005ac 	.word	0x200005ac
 8000aa4:	40001000 	.word	0x40001000

08000aa8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_TIM7_Init+0x64>)
 8000aba:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <MX_TIM7_Init+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_TIM7_Init+0x64>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_TIM7_Init+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_TIM7_Init+0x64>)
 8000acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_TIM7_Init+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ad8:	480c      	ldr	r0, [pc, #48]	; (8000b0c <MX_TIM7_Init+0x64>)
 8000ada:	f003 fab5 	bl	8004048 <HAL_TIM_Base_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000ae4:	f000 f9e8 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_TIM7_Init+0x64>)
 8000af6:	f004 fc57 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000b00:	f000 f9da 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200006dc 	.word	0x200006dc
 8000b10:	40001400 	.word	0x40001400

08000b14 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b098      	sub	sp, #96	; 0x60
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
 8000b36:	615a      	str	r2, [r3, #20]
 8000b38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2234      	movs	r2, #52	; 0x34
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f008 ff6a 	bl	8009a1a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b46:	4b3b      	ldr	r3, [pc, #236]	; (8000c34 <MX_TIM8_Init+0x120>)
 8000b48:	4a3b      	ldr	r2, [pc, #236]	; (8000c38 <MX_TIM8_Init+0x124>)
 8000b4a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 49;
 8000b4c:	4b39      	ldr	r3, [pc, #228]	; (8000c34 <MX_TIM8_Init+0x120>)
 8000b4e:	2231      	movs	r2, #49	; 0x31
 8000b50:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b38      	ldr	r3, [pc, #224]	; (8000c34 <MX_TIM8_Init+0x120>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 63999;
 8000b58:	4b36      	ldr	r3, [pc, #216]	; (8000c34 <MX_TIM8_Init+0x120>)
 8000b5a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000b5e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b60:	4b34      	ldr	r3, [pc, #208]	; (8000c34 <MX_TIM8_Init+0x120>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b66:	4b33      	ldr	r3, [pc, #204]	; (8000c34 <MX_TIM8_Init+0x120>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6c:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <MX_TIM8_Init+0x120>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b72:	4830      	ldr	r0, [pc, #192]	; (8000c34 <MX_TIM8_Init+0x120>)
 8000b74:	f003 fb2a 	bl	80041cc <HAL_TIM_PWM_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000b7e:	f000 f99b 	bl	8000eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b92:	4619      	mov	r1, r3
 8000b94:	4827      	ldr	r0, [pc, #156]	; (8000c34 <MX_TIM8_Init+0x120>)
 8000b96:	f004 fc07 	bl	80053a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000ba0:	f000 f98a 	bl	8000eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba4:	2360      	movs	r3, #96	; 0x60
 8000ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bac:	2300      	movs	r3, #0
 8000bae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	481a      	ldr	r0, [pc, #104]	; (8000c34 <MX_TIM8_Init+0x120>)
 8000bca:	f003 ff09 	bl	80049e0 <HAL_TIM_PWM_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000bd4:	f000 f970 	bl	8000eb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	4619      	mov	r1, r3
 8000c14:	4807      	ldr	r0, [pc, #28]	; (8000c34 <MX_TIM8_Init+0x120>)
 8000c16:	f004 fc49 	bl	80054ac <HAL_TIMEx_ConfigBreakDeadTime>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000c20:	f000 f94a 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <MX_TIM8_Init+0x120>)
 8000c26:	f000 faad 	bl	8001184 <HAL_TIM_MspPostInit>

}
 8000c2a:	bf00      	nop
 8000c2c:	3760      	adds	r7, #96	; 0x60
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000047c 	.word	0x2000047c
 8000c38:	40013400 	.word	0x40013400

08000c3c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	; 0x50
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]
 8000c52:	615a      	str	r2, [r3, #20]
 8000c54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c56:	463b      	mov	r3, r7
 8000c58:	2234      	movs	r2, #52	; 0x34
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f008 fedc 	bl	8009a1a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c62:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <MX_TIM16_Init+0xec>)
 8000c64:	4a31      	ldr	r2, [pc, #196]	; (8000d2c <MX_TIM16_Init+0xf0>)
 8000c66:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000c68:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <MX_TIM16_Init+0xec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6e:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <MX_TIM16_Init+0xec>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000c74:	4b2c      	ldr	r3, [pc, #176]	; (8000d28 <MX_TIM16_Init+0xec>)
 8000c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c7a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <MX_TIM16_Init+0xec>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c82:	4b29      	ldr	r3, [pc, #164]	; (8000d28 <MX_TIM16_Init+0xec>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <MX_TIM16_Init+0xec>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c8e:	4826      	ldr	r0, [pc, #152]	; (8000d28 <MX_TIM16_Init+0xec>)
 8000c90:	f003 f9da 	bl	8004048 <HAL_TIM_Base_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000c9a:	f000 f90d 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000c9e:	4822      	ldr	r0, [pc, #136]	; (8000d28 <MX_TIM16_Init+0xec>)
 8000ca0:	f003 fa94 	bl	80041cc <HAL_TIM_PWM_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000caa:	f000 f905 	bl	8000eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cae:	2360      	movs	r3, #96	; 0x60
 8000cb0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cce:	2200      	movs	r2, #0
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4815      	ldr	r0, [pc, #84]	; (8000d28 <MX_TIM16_Init+0xec>)
 8000cd4:	f003 fe84 	bl	80049e0 <HAL_TIM_PWM_ConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000cde:	f000 f8eb 	bl	8000eb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000d04:	463b      	mov	r3, r7
 8000d06:	4619      	mov	r1, r3
 8000d08:	4807      	ldr	r0, [pc, #28]	; (8000d28 <MX_TIM16_Init+0xec>)
 8000d0a:	f004 fbcf 	bl	80054ac <HAL_TIMEx_ConfigBreakDeadTime>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000d14:	f000 f8d0 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <MX_TIM16_Init+0xec>)
 8000d1a:	f000 fa33 	bl	8001184 <HAL_TIM_MspPostInit>

}
 8000d1e:	bf00      	nop
 8000d20:	3750      	adds	r7, #80	; 0x50
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000690 	.word	0x20000690
 8000d2c:	40014400 	.word	0x40014400

08000d30 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b094      	sub	sp, #80	; 0x50
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
 8000d46:	615a      	str	r2, [r3, #20]
 8000d48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2234      	movs	r2, #52	; 0x34
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f008 fe62 	bl	8009a1a <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d56:	4b31      	ldr	r3, [pc, #196]	; (8000e1c <MX_TIM17_Init+0xec>)
 8000d58:	4a31      	ldr	r2, [pc, #196]	; (8000e20 <MX_TIM17_Init+0xf0>)
 8000d5a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000d5c:	4b2f      	ldr	r3, [pc, #188]	; (8000e1c <MX_TIM17_Init+0xec>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <MX_TIM17_Init+0xec>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000d68:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <MX_TIM17_Init+0xec>)
 8000d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d6e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <MX_TIM17_Init+0xec>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d76:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <MX_TIM17_Init+0xec>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7c:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <MX_TIM17_Init+0xec>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d82:	4826      	ldr	r0, [pc, #152]	; (8000e1c <MX_TIM17_Init+0xec>)
 8000d84:	f003 f960 	bl	8004048 <HAL_TIM_Base_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000d8e:	f000 f893 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000d92:	4822      	ldr	r0, [pc, #136]	; (8000e1c <MX_TIM17_Init+0xec>)
 8000d94:	f003 fa1a 	bl	80041cc <HAL_TIM_PWM_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000d9e:	f000 f88b 	bl	8000eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da2:	2360      	movs	r3, #96	; 0x60
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000daa:	2300      	movs	r3, #0
 8000dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dae:	2300      	movs	r3, #0
 8000db0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000db6:	2300      	movs	r3, #0
 8000db8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4815      	ldr	r0, [pc, #84]	; (8000e1c <MX_TIM17_Init+0xec>)
 8000dc8:	f003 fe0a 	bl	80049e0 <HAL_TIM_PWM_ConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000dd2:	f000 f871 	bl	8000eb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000df8:	463b      	mov	r3, r7
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4807      	ldr	r0, [pc, #28]	; (8000e1c <MX_TIM17_Init+0xec>)
 8000dfe:	f004 fb55 	bl	80054ac <HAL_TIMEx_ConfigBreakDeadTime>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000e08:	f000 f856 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <MX_TIM17_Init+0xec>)
 8000e0e:	f000 f9b9 	bl	8001184 <HAL_TIM_MspPostInit>

}
 8000e12:	bf00      	nop
 8000e14:	3750      	adds	r7, #80	; 0x50
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000514 	.word	0x20000514
 8000e20:	40014800 	.word	0x40014800

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e40:	f043 0320 	orr.w	r3, r3, #32
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0320 	and.w	r3, r3, #32
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4a16      	ldr	r2, [pc, #88]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_GPIO_Init+0x8c>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2102      	movs	r1, #2
 8000e86:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <MX_GPIO_Init+0x90>)
 8000e88:	f000 fda4 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <MX_GPIO_Init+0x90>)
 8000ea4:	f000 fc14 	bl	80016d0 <HAL_GPIO_Init>

}
 8000ea8:	bf00      	nop
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	48001400 	.word	0x48001400

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_MspInit+0x44>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <HAL_MspInit+0x44>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <HAL_MspInit+0x44>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_MspInit+0x44>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <HAL_MspInit+0x44>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_MspInit+0x44>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000efe:	f002 f9a7 	bl	8003250 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08e      	sub	sp, #56	; 0x38
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a46      	ldr	r2, [pc, #280]	; (8001048 <HAL_TIM_Encoder_MspInit+0x138>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d12a      	bne.n	8000f88 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f32:	4b46      	ldr	r3, [pc, #280]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	4a45      	ldr	r2, [pc, #276]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3e:	4b43      	ldr	r3, [pc, #268]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f46:	623b      	str	r3, [r7, #32]
 8000f48:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b40      	ldr	r3, [pc, #256]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a3f      	ldr	r2, [pc, #252]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b3d      	ldr	r3, [pc, #244]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f74:	2306      	movs	r3, #6
 8000f76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f82:	f000 fba5 	bl	80016d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f86:	e05a      	b.n	800103e <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a30      	ldr	r2, [pc, #192]	; (8001050 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d128      	bne.n	8000fe4 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f92:	4b2e      	ldr	r3, [pc, #184]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f96:	4a2d      	ldr	r2, [pc, #180]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b28      	ldr	r3, [pc, #160]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4a27      	ldr	r2, [pc, #156]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fc2:	2330      	movs	r3, #48	; 0x30
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fda:	4619      	mov	r1, r3
 8000fdc:	481d      	ldr	r0, [pc, #116]	; (8001054 <HAL_TIM_Encoder_MspInit+0x144>)
 8000fde:	f000 fb77 	bl	80016d0 <HAL_GPIO_Init>
}
 8000fe2:	e02c      	b.n	800103e <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <HAL_TIM_Encoder_MspInit+0x148>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d127      	bne.n	800103e <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	4a16      	ldr	r2, [pc, #88]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800101e:	23c0      	movs	r3, #192	; 0xc0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800102e:	2302      	movs	r3, #2
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	4619      	mov	r1, r3
 8001038:	4806      	ldr	r0, [pc, #24]	; (8001054 <HAL_TIM_Encoder_MspInit+0x144>)
 800103a:	f000 fb49 	bl	80016d0 <HAL_GPIO_Init>
}
 800103e:	bf00      	nop
 8001040:	3738      	adds	r7, #56	; 0x38
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40012c00 	.word	0x40012c00
 800104c:	40021000 	.word	0x40021000
 8001050:	40000400 	.word	0x40000400
 8001054:	48000400 	.word	0x48000400
 8001058:	40000800 	.word	0x40000800

0800105c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800106c:	d10c      	bne.n	8001088 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6593      	str	r3, [r2, #88]	; 0x58
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_TIM_PWM_MspInit+0x5c>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001086:	e010      	b.n	80010aa <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM8)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <HAL_TIM_PWM_MspInit+0x60>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d10b      	bne.n	80010aa <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001098:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800109c:	6613      	str	r3, [r2, #96]	; 0x60
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_TIM_PWM_MspInit+0x5c>)
 80010a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
}
 80010aa:	bf00      	nop
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40013400 	.word	0x40013400

080010c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a28      	ldr	r2, [pc, #160]	; (8001170 <HAL_TIM_Base_MspInit+0xb0>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d114      	bne.n	80010fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010d2:	4b28      	ldr	r3, [pc, #160]	; (8001174 <HAL_TIM_Base_MspInit+0xb4>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	4a27      	ldr	r2, [pc, #156]	; (8001174 <HAL_TIM_Base_MspInit+0xb4>)
 80010d8:	f043 0310 	orr.w	r3, r3, #16
 80010dc:	6593      	str	r3, [r2, #88]	; 0x58
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <HAL_TIM_Base_MspInit+0xb4>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	f003 0310 	and.w	r3, r3, #16
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	2036      	movs	r0, #54	; 0x36
 80010f0:	f000 fab9 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010f4:	2036      	movs	r0, #54	; 0x36
 80010f6:	f000 fad0 	bl	800169a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80010fa:	e034      	b.n	8001166 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a1d      	ldr	r2, [pc, #116]	; (8001178 <HAL_TIM_Base_MspInit+0xb8>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d10c      	bne.n	8001120 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <HAL_TIM_Base_MspInit+0xb4>)
 8001108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110a:	4a1a      	ldr	r2, [pc, #104]	; (8001174 <HAL_TIM_Base_MspInit+0xb4>)
 800110c:	f043 0320 	orr.w	r3, r3, #32
 8001110:	6593      	str	r3, [r2, #88]	; 0x58
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_TIM_Base_MspInit+0xb4>)
 8001114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001116:	f003 0320 	and.w	r3, r3, #32
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
}
 800111e:	e022      	b.n	8001166 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM16)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a15      	ldr	r2, [pc, #84]	; (800117c <HAL_TIM_Base_MspInit+0xbc>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d10c      	bne.n	8001144 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_TIM_Base_MspInit+0xb4>)
 800112c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112e:	4a11      	ldr	r2, [pc, #68]	; (8001174 <HAL_TIM_Base_MspInit+0xb4>)
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	6613      	str	r3, [r2, #96]	; 0x60
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_TIM_Base_MspInit+0xb4>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
}
 8001142:	e010      	b.n	8001166 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM17)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <HAL_TIM_Base_MspInit+0xc0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d10b      	bne.n	8001166 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_TIM_Base_MspInit+0xb4>)
 8001150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_TIM_Base_MspInit+0xb4>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001158:	6613      	str	r3, [r2, #96]	; 0x60
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_TIM_Base_MspInit+0xb4>)
 800115c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40001000 	.word	0x40001000
 8001174:	40021000 	.word	0x40021000
 8001178:	40001400 	.word	0x40001400
 800117c:	40014400 	.word	0x40014400
 8001180:	40014800 	.word	0x40014800

08001184 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	; 0x30
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a4:	d11d      	bne.n	80011e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	4b45      	ldr	r3, [pc, #276]	; (80012bc <HAL_TIM_MspPostInit+0x138>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	4a44      	ldr	r2, [pc, #272]	; (80012bc <HAL_TIM_MspPostInit+0x138>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b2:	4b42      	ldr	r3, [pc, #264]	; (80012bc <HAL_TIM_MspPostInit+0x138>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011be:	230f      	movs	r3, #15
 80011c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011ce:	2301      	movs	r3, #1
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4619      	mov	r1, r3
 80011d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011dc:	f000 fa78 	bl	80016d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80011e0:	e068      	b.n	80012b4 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM8)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a36      	ldr	r2, [pc, #216]	; (80012c0 <HAL_TIM_MspPostInit+0x13c>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d11e      	bne.n	800122a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b33      	ldr	r3, [pc, #204]	; (80012bc <HAL_TIM_MspPostInit+0x138>)
 80011ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f0:	4a32      	ldr	r2, [pc, #200]	; (80012bc <HAL_TIM_MspPostInit+0x138>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <HAL_TIM_MspPostInit+0x138>)
 80011fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001216:	2302      	movs	r3, #2
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001224:	f000 fa54 	bl	80016d0 <HAL_GPIO_Init>
}
 8001228:	e044      	b.n	80012b4 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM16)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a25      	ldr	r2, [pc, #148]	; (80012c4 <HAL_TIM_MspPostInit+0x140>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d11d      	bne.n	8001270 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_TIM_MspPostInit+0x138>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001238:	4a20      	ldr	r2, [pc, #128]	; (80012bc <HAL_TIM_MspPostInit+0x138>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_TIM_MspPostInit+0x138>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800124c:	2340      	movs	r3, #64	; 0x40
 800124e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800125c:	2301      	movs	r3, #1
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126a:	f000 fa31 	bl	80016d0 <HAL_GPIO_Init>
}
 800126e:	e021      	b.n	80012b4 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM17)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <HAL_TIM_MspPostInit+0x144>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d11c      	bne.n	80012b4 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_TIM_MspPostInit+0x138>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <HAL_TIM_MspPostInit+0x138>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_TIM_MspPostInit+0x138>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80012a2:	2301      	movs	r3, #1
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b0:	f000 fa0e 	bl	80016d0 <HAL_GPIO_Init>
}
 80012b4:	bf00      	nop
 80012b6:	3730      	adds	r7, #48	; 0x30
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40013400 	.word	0x40013400
 80012c4:	40014400 	.word	0x40014400
 80012c8:	40014800 	.word	0x40014800

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <HardFault_Handler+0x4>

080012e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <MemManage_Handler+0x4>

080012e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001320:	f000 f8a8 	bl	8001474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <USB_LP_IRQHandler+0x10>)
 800132e:	f000 fc8a 	bl	8001c46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200013cc 	.word	0x200013cc

0800133c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <TIM6_DAC_IRQHandler+0x10>)
 8001342:	f003 f9ce 	bl	80046e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200005ac 	.word	0x200005ac

08001350 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <SystemInit+0x28>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135a:	4a07      	ldr	r2, [pc, #28]	; (8001378 <SystemInit+0x28>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SystemInit+0x28>)
 8001366:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800136a:	609a      	str	r2, [r3, #8]
#endif
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800137e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001380:	480d      	ldr	r0, [pc, #52]	; (80013b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001382:	490e      	ldr	r1, [pc, #56]	; (80013bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001384:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <LoopForever+0xe>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001398:	4c0b      	ldr	r4, [pc, #44]	; (80013c8 <LoopForever+0x16>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a6:	f7ff ffd3 	bl	8001350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013aa:	f008 fb07 	bl	80099bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ae:	f7ff f897 	bl	80004e0 <main>

080013b2 <LoopForever>:

LoopForever:
    b LoopForever
 80013b2:	e7fe      	b.n	80013b2 <LoopForever>
  ldr   r0, =_estack
 80013b4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013bc:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80013c0:	08009aa4 	.word	0x08009aa4
  ldr r2, =_sbss
 80013c4:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80013c8:	200016c0 	.word	0x200016c0

080013cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC1_2_IRQHandler>

080013ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 f939 	bl	8001650 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013de:	2000      	movs	r0, #0
 80013e0:	f000 f80e 	bl	8001400 <HAL_InitTick>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	71fb      	strb	r3, [r7, #7]
 80013ee:	e001      	b.n	80013f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013f0:	f7ff fd6a 	bl	8000ec8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013f4:	79fb      	ldrb	r3, [r7, #7]

}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_InitTick+0x68>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d022      	beq.n	800145a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_InitTick+0x6c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <HAL_InitTick+0x68>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001420:	fbb1 f3f3 	udiv	r3, r1, r3
 8001424:	fbb2 f3f3 	udiv	r3, r2, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f000 f944 	bl	80016b6 <HAL_SYSTICK_Config>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10f      	bne.n	8001454 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b0f      	cmp	r3, #15
 8001438:	d809      	bhi.n	800144e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143a:	2200      	movs	r2, #0
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	f04f 30ff 	mov.w	r0, #4294967295
 8001442:	f000 f910 	bl	8001666 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <HAL_InitTick+0x70>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e007      	b.n	800145e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e004      	b.n	800145e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	e001      	b.n	800145e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000008 	.word	0x20000008
 800146c:	20000000 	.word	0x20000000
 8001470:	20000004 	.word	0x20000004

08001474 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_IncTick+0x1c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_IncTick+0x20>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4413      	add	r3, r2
 8001482:	4a03      	ldr	r2, [pc, #12]	; (8001490 <HAL_IncTick+0x1c>)
 8001484:	6013      	str	r3, [r2, #0]
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	20000728 	.word	0x20000728
 8001494:	20000008 	.word	0x20000008

08001498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <HAL_GetTick+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000728 	.word	0x20000728

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4907      	ldr	r1, [pc, #28]	; (800154c <__NVIC_EnableIRQ+0x38>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800161c:	d301      	bcc.n	8001622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161e:	2301      	movs	r3, #1
 8001620:	e00f      	b.n	8001642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <SysTick_Config+0x40>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162a:	210f      	movs	r1, #15
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f7ff ff8e 	bl	8001550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <SysTick_Config+0x40>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163a:	4b04      	ldr	r3, [pc, #16]	; (800164c <SysTick_Config+0x40>)
 800163c:	2207      	movs	r2, #7
 800163e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	e000e010 	.word	0xe000e010

08001650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff29 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001674:	f7ff ff40 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 8001678:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7ff ff90 	bl	80015a4 <NVIC_EncodePriority>
 8001684:	4602      	mov	r2, r0
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff5f 	bl	8001550 <__NVIC_SetPriority>
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff33 	bl	8001514 <__NVIC_EnableIRQ>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffa4 	bl	800160c <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016de:	e15a      	b.n	8001996 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2101      	movs	r1, #1
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 814c 	beq.w	8001990 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d00b      	beq.n	8001718 <HAL_GPIO_Init+0x48>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d007      	beq.n	8001718 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800170c:	2b11      	cmp	r3, #17
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b12      	cmp	r3, #18
 8001716:	d130      	bne.n	800177a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2203      	movs	r2, #3
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800174e:	2201      	movs	r2, #1
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	091b      	lsrs	r3, r3, #4
 8001764:	f003 0201 	and.w	r2, r3, #1
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	2203      	movs	r2, #3
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0xea>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d123      	bne.n	8001802 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	08da      	lsrs	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3208      	adds	r2, #8
 80017c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	08da      	lsrs	r2, r3, #3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3208      	adds	r2, #8
 80017fc:	6939      	ldr	r1, [r7, #16]
 80017fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0203 	and.w	r2, r3, #3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 80a6 	beq.w	8001990 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001844:	4b5b      	ldr	r3, [pc, #364]	; (80019b4 <HAL_GPIO_Init+0x2e4>)
 8001846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001848:	4a5a      	ldr	r2, [pc, #360]	; (80019b4 <HAL_GPIO_Init+0x2e4>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6613      	str	r3, [r2, #96]	; 0x60
 8001850:	4b58      	ldr	r3, [pc, #352]	; (80019b4 <HAL_GPIO_Init+0x2e4>)
 8001852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800185c:	4a56      	ldr	r2, [pc, #344]	; (80019b8 <HAL_GPIO_Init+0x2e8>)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001868:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001886:	d01f      	beq.n	80018c8 <HAL_GPIO_Init+0x1f8>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a4c      	ldr	r2, [pc, #304]	; (80019bc <HAL_GPIO_Init+0x2ec>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d019      	beq.n	80018c4 <HAL_GPIO_Init+0x1f4>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a4b      	ldr	r2, [pc, #300]	; (80019c0 <HAL_GPIO_Init+0x2f0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d013      	beq.n	80018c0 <HAL_GPIO_Init+0x1f0>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a4a      	ldr	r2, [pc, #296]	; (80019c4 <HAL_GPIO_Init+0x2f4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00d      	beq.n	80018bc <HAL_GPIO_Init+0x1ec>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a49      	ldr	r2, [pc, #292]	; (80019c8 <HAL_GPIO_Init+0x2f8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d007      	beq.n	80018b8 <HAL_GPIO_Init+0x1e8>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a48      	ldr	r2, [pc, #288]	; (80019cc <HAL_GPIO_Init+0x2fc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d101      	bne.n	80018b4 <HAL_GPIO_Init+0x1e4>
 80018b0:	2305      	movs	r3, #5
 80018b2:	e00a      	b.n	80018ca <HAL_GPIO_Init+0x1fa>
 80018b4:	2306      	movs	r3, #6
 80018b6:	e008      	b.n	80018ca <HAL_GPIO_Init+0x1fa>
 80018b8:	2304      	movs	r3, #4
 80018ba:	e006      	b.n	80018ca <HAL_GPIO_Init+0x1fa>
 80018bc:	2303      	movs	r3, #3
 80018be:	e004      	b.n	80018ca <HAL_GPIO_Init+0x1fa>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e002      	b.n	80018ca <HAL_GPIO_Init+0x1fa>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <HAL_GPIO_Init+0x1fa>
 80018c8:	2300      	movs	r3, #0
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	f002 0203 	and.w	r2, r2, #3
 80018d0:	0092      	lsls	r2, r2, #2
 80018d2:	4093      	lsls	r3, r2
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018da:	4937      	ldr	r1, [pc, #220]	; (80019b8 <HAL_GPIO_Init+0x2e8>)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	3302      	adds	r3, #2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018e8:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <HAL_GPIO_Init+0x300>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800190c:	4a30      	ldr	r2, [pc, #192]	; (80019d0 <HAL_GPIO_Init+0x300>)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <HAL_GPIO_Init+0x300>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001936:	4a26      	ldr	r2, [pc, #152]	; (80019d0 <HAL_GPIO_Init+0x300>)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <HAL_GPIO_Init+0x300>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001960:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <HAL_GPIO_Init+0x300>)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <HAL_GPIO_Init+0x300>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800198a:	4a11      	ldr	r2, [pc, #68]	; (80019d0 <HAL_GPIO_Init+0x300>)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f47f ae9d 	bne.w	80016e0 <HAL_GPIO_Init+0x10>
  }
}
 80019a6:	bf00      	nop
 80019a8:	371c      	adds	r7, #28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40010000 	.word	0x40010000
 80019bc:	48000400 	.word	0x48000400
 80019c0:	48000800 	.word	0x48000800
 80019c4:	48000c00 	.word	0x48000c00
 80019c8:	48001000 	.word	0x48001000
 80019cc:	48001400 	.word	0x48001400
 80019d0:	40010400 	.word	0x40010400

080019d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
 80019e0:	4613      	mov	r3, r2
 80019e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019e4:	787b      	ldrb	r3, [r7, #1]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019f0:	e002      	b.n	80019f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a16:	887a      	ldrh	r2, [r7, #2]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	041a      	lsls	r2, r3, #16
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	43d9      	mvns	r1, r3
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	400b      	ands	r3, r1
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	619a      	str	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a3a:	b08b      	sub	sp, #44	; 0x2c
 8001a3c:	af06      	add	r7, sp, #24
 8001a3e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e0d7      	b.n	8001bfa <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d106      	bne.n	8001a64 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f007 fcbc 	bl	80093dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2203      	movs	r2, #3
 8001a68:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f003 fe18 	bl	80056a6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
 8001a7a:	e04c      	b.n	8001b16 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	440b      	add	r3, r1
 8001aa2:	7bfa      	ldrb	r2, [r7, #15]
 8001aa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	b298      	uxth	r0, r3
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	440b      	add	r3, r1
 8001ab8:	3336      	adds	r3, #54	; 0x36
 8001aba:	4602      	mov	r2, r0
 8001abc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	440b      	add	r3, r1
 8001ace:	3303      	adds	r3, #3
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3338      	adds	r3, #56	; 0x38
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ae8:	7bfa      	ldrb	r2, [r7, #15]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	440b      	add	r3, r1
 8001af6:	333c      	adds	r3, #60	; 0x3c
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	3340      	adds	r3, #64	; 0x40
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	3301      	adds	r3, #1
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d3ad      	bcc.n	8001a7c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	e044      	b.n	8001bb0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b26:	7bfa      	ldrb	r2, [r7, #15]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	440b      	add	r3, r1
 8001b34:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b3c:	7bfa      	ldrb	r2, [r7, #15]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	440b      	add	r3, r1
 8001b4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b68:	7bfa      	ldrb	r2, [r7, #15]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	440b      	add	r3, r1
 8001b76:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b7e:	7bfa      	ldrb	r2, [r7, #15]
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	3301      	adds	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d3b5      	bcc.n	8001b26 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	687e      	ldr	r6, [r7, #4]
 8001bc2:	466d      	mov	r5, sp
 8001bc4:	f106 0410 	add.w	r4, r6, #16
 8001bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bcc:	6823      	ldr	r3, [r4, #0]
 8001bce:	602b      	str	r3, [r5, #0]
 8001bd0:	1d33      	adds	r3, r6, #4
 8001bd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bd4:	6838      	ldr	r0, [r7, #0]
 8001bd6:	f003 fd81 	bl	80056dc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d102      	bne.n	8001bf8 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f001 fa5e 	bl	80030b4 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_PCD_Start+0x16>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e012      	b.n	8001c3e <HAL_PCD_Start+0x3c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 fd27 	bl	8005678 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f005 fd13 	bl	800765a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f005 fd18 	bl	8007688 <USB_ReadInterrupts>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c62:	d102      	bne.n	8001c6a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 fb5b 	bl	8002320 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f005 fd0a 	bl	8007688 <USB_ReadInterrupts>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c7e:	d112      	bne.n	8001ca6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c92:	b292      	uxth	r2, r2
 8001c94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f007 fc1a 	bl	80094d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f91e 	bl	8001ee2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f005 fcec 	bl	8007688 <USB_ReadInterrupts>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cba:	d10b      	bne.n	8001cd4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cce:	b292      	uxth	r2, r2
 8001cd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f005 fcd5 	bl	8007688 <USB_ReadInterrupts>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ce8:	d10b      	bne.n	8001d02 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cfc:	b292      	uxth	r2, r2
 8001cfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f005 fcbe 	bl	8007688 <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d16:	d133      	bne.n	8001d80 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0204 	bic.w	r2, r2, #4
 8001d2a:	b292      	uxth	r2, r2
 8001d2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0208 	bic.w	r2, r2, #8
 8001d42:	b292      	uxth	r2, r2
 8001d44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d107      	bne.n	8001d62 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f007 fdad 	bl	80098bc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f007 fbee 	bl	8009544 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d7a:	b292      	uxth	r2, r2
 8001d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f005 fc7f 	bl	8007688 <USB_ReadInterrupts>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d94:	d126      	bne.n	8001de4 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0208 	orr.w	r2, r2, #8
 8001da8:	b292      	uxth	r2, r2
 8001daa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dc0:	b292      	uxth	r2, r2
 8001dc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 0204 	orr.w	r2, r2, #4
 8001dd8:	b292      	uxth	r2, r2
 8001dda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f007 fb96 	bl	8009510 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f005 fc4d 	bl	8007688 <USB_ReadInterrupts>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df4:	2b80      	cmp	r3, #128	; 0x80
 8001df6:	d13f      	bne.n	8001e78 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e0a:	b292      	uxth	r2, r2
 8001e0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d12b      	bne.n	8001e72 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0204 	orr.w	r2, r2, #4
 8001e2c:	b292      	uxth	r2, r2
 8001e2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0208 	orr.w	r2, r2, #8
 8001e44:	b292      	uxth	r2, r2
 8001e46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001e68:	2101      	movs	r1, #1
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f007 fd26 	bl	80098bc <HAL_PCDEx_LPM_Callback>
 8001e70:	e002      	b.n	8001e78 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f007 fb4c 	bl	8009510 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f005 fc03 	bl	8007688 <USB_ReadInterrupts>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e8c:	d10e      	bne.n	8001eac <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ea0:	b292      	uxth	r2, r2
 8001ea2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f007 fb05 	bl	80094b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f005 fbe9 	bl	8007688 <USB_ReadInterrupts>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec0:	d10b      	bne.n	8001eda <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed4:	b292      	uxth	r2, r2
 8001ed6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	460b      	mov	r3, r1
 8001eec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_PCD_SetAddress+0x1a>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e013      	b.n	8001f24 <HAL_PCD_SetAddress+0x42>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f005 fb8c 	bl	8007632 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	4608      	mov	r0, r1
 8001f36:	4611      	mov	r1, r2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	70fb      	strb	r3, [r7, #3]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	803b      	strh	r3, [r7, #0]
 8001f42:	4613      	mov	r3, r2
 8001f44:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	da0e      	bge.n	8001f70 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	705a      	strb	r2, [r3, #1]
 8001f6e:	e00e      	b.n	8001f8e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	f003 0207 	and.w	r2, r3, #7
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f9a:	883a      	ldrh	r2, [r7, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	78ba      	ldrb	r2, [r7, #2]
 8001fa4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	785b      	ldrb	r3, [r3, #1]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d004      	beq.n	8001fb8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fb8:	78bb      	ldrb	r3, [r7, #2]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d102      	bne.n	8001fc4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_PCD_EP_Open+0xa6>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e00e      	b.n	8001ff0 <HAL_PCD_EP_Open+0xc4>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68f9      	ldr	r1, [r7, #12]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 fb9d 	bl	8005720 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001fee:	7afb      	ldrb	r3, [r7, #11]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002008:	2b00      	cmp	r3, #0
 800200a:	da0e      	bge.n	800202a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2201      	movs	r2, #1
 8002026:	705a      	strb	r2, [r3, #1]
 8002028:	e00e      	b.n	8002048 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	f003 0207 	and.w	r2, r3, #7
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	b2da      	uxtb	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_PCD_EP_Close+0x6a>
 800205e:	2302      	movs	r3, #2
 8002060:	e00e      	b.n	8002080 <HAL_PCD_EP_Close+0x88>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68f9      	ldr	r1, [r7, #12]
 8002070:	4618      	mov	r0, r3
 8002072:	f003 fec3 	bl	8005dfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	460b      	mov	r3, r1
 8002096:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002098:	7afb      	ldrb	r3, [r7, #11]
 800209a:	f003 0207 	and.w	r2, r3, #7
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4413      	add	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2200      	movs	r2, #0
 80020c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2200      	movs	r2, #0
 80020c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020c8:	7afb      	ldrb	r3, [r7, #11]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020d4:	7afb      	ldrb	r3, [r7, #11]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d106      	bne.n	80020ec <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6979      	ldr	r1, [r7, #20]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f004 f876 	bl	80061d6 <USB_EPStartXfer>
 80020ea:	e005      	b.n	80020f8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6979      	ldr	r1, [r7, #20]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f004 f86f 	bl	80061d6 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	f003 0207 	and.w	r2, r3, #7
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002124:	681b      	ldr	r3, [r3, #0]
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	460b      	mov	r3, r1
 8002140:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002142:	7afb      	ldrb	r3, [r7, #11]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4413      	add	r3, r2
 8002156:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2200      	movs	r2, #0
 8002176:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2201      	movs	r2, #1
 800217c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800217e:	7afb      	ldrb	r3, [r7, #11]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	b2da      	uxtb	r2, r3
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800218a:	7afb      	ldrb	r3, [r7, #11]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	2b00      	cmp	r3, #0
 8002192:	d106      	bne.n	80021a2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6979      	ldr	r1, [r7, #20]
 800219a:	4618      	mov	r0, r3
 800219c:	f004 f81b 	bl	80061d6 <USB_EPStartXfer>
 80021a0:	e005      	b.n	80021ae <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6979      	ldr	r1, [r7, #20]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f004 f814 	bl	80061d6 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	f003 0207 	and.w	r2, r3, #7
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d901      	bls.n	80021d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e04c      	b.n	8002270 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	da0e      	bge.n	80021fc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	705a      	strb	r2, [r3, #1]
 80021fa:	e00c      	b.n	8002216 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2201      	movs	r2, #1
 800221a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	b2da      	uxtb	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_PCD_EP_SetStall+0x7e>
 8002232:	2302      	movs	r3, #2
 8002234:	e01c      	b.n	8002270 <HAL_PCD_EP_SetStall+0xb8>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68f9      	ldr	r1, [r7, #12]
 8002244:	4618      	mov	r0, r3
 8002246:	f005 f8f5 	bl	8007434 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800224a:	78fb      	ldrb	r3, [r7, #3]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	2b00      	cmp	r3, #0
 8002252:	d108      	bne.n	8002266 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800225e:	4619      	mov	r1, r3
 8002260:	4610      	mov	r0, r2
 8002262:	f005 fa21 	bl	80076a8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	f003 020f 	and.w	r2, r3, #15
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	d901      	bls.n	8002296 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e040      	b.n	8002318 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002296:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800229a:	2b00      	cmp	r3, #0
 800229c:	da0e      	bge.n	80022bc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	705a      	strb	r2, [r3, #1]
 80022ba:	e00e      	b.n	80022da <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	f003 0207 	and.w	r2, r3, #7
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_PCD_EP_ClrStall+0x82>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e00e      	b.n	8002318 <HAL_PCD_EP_ClrStall+0xa0>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68f9      	ldr	r1, [r7, #12]
 8002308:	4618      	mov	r0, r3
 800230a:	f005 f8e4 	bl	80074d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08e      	sub	sp, #56	; 0x38
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002328:	e2d1      	b.n	80028ce <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002332:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002334:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002336:	b2db      	uxtb	r3, r3
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002340:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002344:	2b00      	cmp	r3, #0
 8002346:	f040 8152 	bne.w	80025ee <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800234a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	d150      	bne.n	80023f6 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002364:	81fb      	strh	r3, [r7, #14]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	89fb      	ldrh	r3, [r7, #14]
 800236c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002374:	b29b      	uxth	r3, r3
 8002376:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3328      	adds	r3, #40	; 0x28
 800237c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002386:	b29b      	uxth	r3, r3
 8002388:	461a      	mov	r2, r3
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	4413      	add	r3, r2
 8002398:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	441a      	add	r2, r3
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80023b4:	2100      	movs	r1, #0
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f007 f863 	bl	8009482 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8282 	beq.w	80028ce <PCD_EP_ISR_Handler+0x5ae>
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f040 827d 	bne.w	80028ce <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b292      	uxth	r2, r2
 80023e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023f4:	e26b      	b.n	80028ce <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002406:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800240c:	2b00      	cmp	r3, #0
 800240e:	d032      	beq.n	8002476 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002418:	b29b      	uxth	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4413      	add	r3, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	4413      	add	r3, r2
 800242a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800244a:	b29b      	uxth	r3, r3
 800244c:	f005 f979 	bl	8007742 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	b29a      	uxth	r2, r3
 8002458:	f640 738f 	movw	r3, #3983	; 0xf8f
 800245c:	4013      	ands	r3, r2
 800245e:	823b      	strh	r3, [r7, #16]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	8a3a      	ldrh	r2, [r7, #16]
 8002466:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800246a:	b292      	uxth	r2, r2
 800246c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f006 ffda 	bl	8009428 <HAL_PCD_SetupStageCallback>
 8002474:	e22b      	b.n	80028ce <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002476:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800247a:	2b00      	cmp	r3, #0
 800247c:	f280 8227 	bge.w	80028ce <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b29a      	uxth	r2, r3
 8002488:	f640 738f 	movw	r3, #3983	; 0xf8f
 800248c:	4013      	ands	r3, r2
 800248e:	83bb      	strh	r3, [r7, #28]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	8bba      	ldrh	r2, [r7, #28]
 8002496:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800249a:	b292      	uxth	r2, r2
 800249c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4413      	add	r3, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d019      	beq.n	8002502 <PCD_EP_ISR_Handler+0x1e2>
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d015      	beq.n	8002502 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	6959      	ldr	r1, [r3, #20]
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	f005 f92b 	bl	8007742 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	441a      	add	r2, r3
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024fa:	2100      	movs	r1, #0
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f006 ffa5 	bl	800944c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	61bb      	str	r3, [r7, #24]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002510:	b29b      	uxth	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	4413      	add	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d112      	bne.n	8002550 <PCD_EP_ISR_Handler+0x230>
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002534:	b29a      	uxth	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	801a      	strh	r2, [r3, #0]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002548:	b29a      	uxth	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	801a      	strh	r2, [r3, #0]
 800254e:	e02f      	b.n	80025b0 <PCD_EP_ISR_Handler+0x290>
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	2b3e      	cmp	r3, #62	; 0x3e
 8002556:	d813      	bhi.n	8002580 <PCD_EP_ISR_Handler+0x260>
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	085b      	lsrs	r3, r3, #1
 800255e:	633b      	str	r3, [r7, #48]	; 0x30
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <PCD_EP_ISR_Handler+0x252>
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	3301      	adds	r3, #1
 8002570:	633b      	str	r3, [r7, #48]	; 0x30
 8002572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002574:	b29b      	uxth	r3, r3
 8002576:	029b      	lsls	r3, r3, #10
 8002578:	b29a      	uxth	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	e017      	b.n	80025b0 <PCD_EP_ISR_Handler+0x290>
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	095b      	lsrs	r3, r3, #5
 8002586:	633b      	str	r3, [r7, #48]	; 0x30
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <PCD_EP_ISR_Handler+0x27a>
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002596:	3b01      	subs	r3, #1
 8002598:	633b      	str	r3, [r7, #48]	; 0x30
 800259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259c:	b29b      	uxth	r3, r3
 800259e:	029b      	lsls	r3, r3, #10
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c0:	827b      	strh	r3, [r7, #18]
 80025c2:	8a7b      	ldrh	r3, [r7, #18]
 80025c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025c8:	827b      	strh	r3, [r7, #18]
 80025ca:	8a7b      	ldrh	r3, [r7, #18]
 80025cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025d0:	827b      	strh	r3, [r7, #18]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	8a7b      	ldrh	r3, [r7, #18]
 80025d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	8013      	strh	r3, [r2, #0]
 80025ec:	e16f      	b.n	80028ce <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002600:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002604:	2b00      	cmp	r3, #0
 8002606:	f280 80e4 	bge.w	80027d2 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	b29a      	uxth	r2, r3
 800261c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002620:	4013      	ands	r3, r2
 8002622:	853b      	strh	r3, [r7, #40]	; 0x28
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002634:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002638:	b292      	uxth	r2, r2
 800263a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800263c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	4413      	add	r3, r2
 8002650:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	7b1b      	ldrb	r3, [r3, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d120      	bne.n	800269c <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002662:	b29b      	uxth	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	4413      	add	r3, r2
 8002674:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800267e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002680:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 8083 	beq.w	800278e <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	6959      	ldr	r1, [r3, #20]
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	88da      	ldrh	r2, [r3, #6]
 8002694:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002696:	f005 f854 	bl	8007742 <USB_ReadPMA>
 800269a:	e078      	b.n	800278e <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	78db      	ldrb	r3, [r3, #3]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d108      	bne.n	80026b6 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80026a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026a6:	461a      	mov	r2, r3
 80026a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f91d 	bl	80028ea <HAL_PCD_EP_DB_Receive>
 80026b0:	4603      	mov	r3, r0
 80026b2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80026b4:	e06b      	b.n	800278e <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d0:	847b      	strh	r3, [r7, #34]	; 0x22
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	441a      	add	r2, r3
 80026e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01f      	beq.n	8002750 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002718:	b29b      	uxth	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4413      	add	r3, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	4413      	add	r3, r2
 800272a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002734:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002736:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002738:	2b00      	cmp	r3, #0
 800273a:	d028      	beq.n	800278e <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	6959      	ldr	r1, [r3, #20]
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	891a      	ldrh	r2, [r3, #8]
 8002748:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800274a:	f004 fffa 	bl	8007742 <USB_ReadPMA>
 800274e:	e01e      	b.n	800278e <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002758:	b29b      	uxth	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	4413      	add	r3, r2
 800276a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002774:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002776:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	6959      	ldr	r1, [r3, #20]
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	895a      	ldrh	r2, [r3, #10]
 8002788:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800278a:	f004 ffda 	bl	8007742 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	69da      	ldr	r2, [r3, #28]
 8002792:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002794:	441a      	add	r2, r3
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027a0:	441a      	add	r2, r3
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d004      	beq.n	80027b8 <PCD_EP_ISR_Handler+0x498>
 80027ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d206      	bcs.n	80027c6 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	4619      	mov	r1, r3
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f006 fe44 	bl	800944c <HAL_PCD_DataOutStageCallback>
 80027c4:	e005      	b.n	80027d2 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 fd02 	bl	80061d6 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80027d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d078      	beq.n	80028ce <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80027dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	4413      	add	r3, r2
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	461a      	mov	r2, r3
 80027f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	b29b      	uxth	r3, r3
 8002802:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280a:	843b      	strh	r3, [r7, #32]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	441a      	add	r2, r3
 800281a:	8c3b      	ldrh	r3, [r7, #32]
 800281c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002824:	b29b      	uxth	r3, r3
 8002826:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	78db      	ldrb	r3, [r3, #3]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d108      	bne.n	8002842 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002834:	2b02      	cmp	r3, #2
 8002836:	d144      	bne.n	80028c2 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002838:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d13f      	bne.n	80028c2 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	4413      	add	r3, r2
 800285c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002866:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	699a      	ldr	r2, [r3, #24]
 800286c:	8bfb      	ldrh	r3, [r7, #30]
 800286e:	429a      	cmp	r2, r3
 8002870:	d906      	bls.n	8002880 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	8bfb      	ldrh	r3, [r7, #30]
 8002878:	1ad2      	subs	r2, r2, r3
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	619a      	str	r2, [r3, #24]
 800287e:	e002      	b.n	8002886 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	2200      	movs	r2, #0
 8002884:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	4619      	mov	r1, r3
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f006 fdf4 	bl	8009482 <HAL_PCD_DataInStageCallback>
 800289a:	e018      	b.n	80028ce <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	8bfb      	ldrh	r3, [r7, #30]
 80028a2:	441a      	add	r2, r3
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	69da      	ldr	r2, [r3, #28]
 80028ac:	8bfb      	ldrh	r3, [r7, #30]
 80028ae:	441a      	add	r2, r3
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ba:	4618      	mov	r0, r3
 80028bc:	f003 fc8b 	bl	80061d6 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80028c0:	e005      	b.n	80028ce <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80028c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028c4:	461a      	mov	r2, r3
 80028c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f917 	bl	8002afc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	b21b      	sxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f6ff ad25 	blt.w	800232a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3738      	adds	r7, #56	; 0x38
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b088      	sub	sp, #32
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	4613      	mov	r3, r2
 80028f6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d07c      	beq.n	80029fc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290a:	b29b      	uxth	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4413      	add	r3, r2
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	4413      	add	r3, r2
 800291c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002926:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	699a      	ldr	r2, [r3, #24]
 800292c:	8b7b      	ldrh	r3, [r7, #26]
 800292e:	429a      	cmp	r2, r3
 8002930:	d306      	bcc.n	8002940 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	8b7b      	ldrh	r3, [r7, #26]
 8002938:	1ad2      	subs	r2, r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	619a      	str	r2, [r3, #24]
 800293e:	e002      	b.n	8002946 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2200      	movs	r2, #0
 8002944:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d123      	bne.n	8002996 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002968:	833b      	strh	r3, [r7, #24]
 800296a:	8b3b      	ldrh	r3, [r7, #24]
 800296c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002970:	833b      	strh	r3, [r7, #24]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	441a      	add	r2, r3
 8002980:	8b3b      	ldrh	r3, [r7, #24]
 8002982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800298a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800298e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002992:	b29b      	uxth	r3, r3
 8002994:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01f      	beq.n	80029e0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ba:	82fb      	strh	r3, [r7, #22]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	441a      	add	r2, r3
 80029ca:	8afb      	ldrh	r3, [r7, #22]
 80029cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029dc:	b29b      	uxth	r3, r3
 80029de:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80029e0:	8b7b      	ldrh	r3, [r7, #26]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8085 	beq.w	8002af2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	6959      	ldr	r1, [r3, #20]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	891a      	ldrh	r2, [r3, #8]
 80029f4:	8b7b      	ldrh	r3, [r7, #26]
 80029f6:	f004 fea4 	bl	8007742 <USB_ReadPMA>
 80029fa:	e07a      	b.n	8002af2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a20:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	8b7b      	ldrh	r3, [r7, #26]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d306      	bcc.n	8002a3a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	8b7b      	ldrh	r3, [r7, #26]
 8002a32:	1ad2      	subs	r2, r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	619a      	str	r2, [r3, #24]
 8002a38:	e002      	b.n	8002a40 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d123      	bne.n	8002a90 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a62:	83fb      	strh	r3, [r7, #30]
 8002a64:	8bfb      	ldrh	r3, [r7, #30]
 8002a66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a6a:	83fb      	strh	r3, [r7, #30]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	441a      	add	r2, r3
 8002a7a:	8bfb      	ldrh	r3, [r7, #30]
 8002a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d11f      	bne.n	8002ada <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab4:	83bb      	strh	r3, [r7, #28]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	441a      	add	r2, r3
 8002ac4:	8bbb      	ldrh	r3, [r7, #28]
 8002ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ad2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ada:	8b7b      	ldrh	r3, [r7, #26]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	6959      	ldr	r1, [r3, #20]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	895a      	ldrh	r2, [r3, #10]
 8002aec:	8b7b      	ldrh	r3, [r7, #26]
 8002aee:	f004 fe28 	bl	8007742 <USB_ReadPMA>
    }
  }

  return count;
 8002af2:	8b7b      	ldrh	r3, [r7, #26]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3720      	adds	r7, #32
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b092      	sub	sp, #72	; 0x48
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	4613      	mov	r3, r2
 8002b08:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 8130 	beq.w	8002d76 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4413      	add	r3, r2
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b3a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	699a      	ldr	r2, [r3, #24]
 8002b40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d906      	bls.n	8002b54 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b4c:	1ad2      	subs	r2, r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	619a      	str	r2, [r3, #24]
 8002b52:	e002      	b.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2200      	movs	r2, #0
 8002b58:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d12c      	bne.n	8002bbc <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	4619      	mov	r1, r3
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f006 fc8a 	bl	8009482 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 822d 	beq.w	8002fd4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b94:	827b      	strh	r3, [r7, #18]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	441a      	add	r2, r3
 8002ba4:	8a7b      	ldrh	r3, [r7, #18]
 8002ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	8013      	strh	r3, [r2, #0]
 8002bba:	e20b      	b.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d01f      	beq.n	8002c06 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	441a      	add	r2, r3
 8002bf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	f040 81e1 	bne.w	8002fd4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c18:	441a      	add	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c24:	441a      	add	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	6a1a      	ldr	r2, [r3, #32]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d309      	bcc.n	8002c4a <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	6a1a      	ldr	r2, [r3, #32]
 8002c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c42:	1ad2      	subs	r2, r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	621a      	str	r2, [r3, #32]
 8002c48:	e014      	b.n	8002c74 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002c52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c54:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c5e:	e009      	b.n	8002c74 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2200      	movs	r2, #0
 8002c72:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	785b      	ldrb	r3, [r3, #1]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d155      	bne.n	8002d28 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	4413      	add	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	00da      	lsls	r2, r3, #3
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d112      	bne.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	801a      	strh	r2, [r3, #0]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	801a      	strh	r2, [r3, #0]
 8002cce:	e047      	b.n	8002d60 <HAL_PCD_EP_DB_Transmit+0x264>
 8002cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd2:	2b3e      	cmp	r3, #62	; 0x3e
 8002cd4:	d811      	bhi.n	8002cfa <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd8:	085b      	lsrs	r3, r3, #1
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce8:	3301      	adds	r3, #1
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	029b      	lsls	r3, r3, #10
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	801a      	strh	r2, [r3, #0]
 8002cf8:	e032      	b.n	8002d60 <HAL_PCD_EP_DB_Transmit+0x264>
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d102      	bne.n	8002d10 <HAL_PCD_EP_DB_Transmit+0x214>
 8002d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	029b      	lsls	r3, r3, #10
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	801a      	strh	r2, [r3, #0]
 8002d26:	e01b      	b.n	8002d60 <HAL_PCD_EP_DB_Transmit+0x264>
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	785b      	ldrb	r3, [r3, #1]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d117      	bne.n	8002d60 <HAL_PCD_EP_DB_Transmit+0x264>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	623b      	str	r3, [r7, #32]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	4413      	add	r3, r2
 8002d46:	623b      	str	r3, [r7, #32]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	00da      	lsls	r2, r3, #3
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	4413      	add	r3, r2
 8002d52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	6959      	ldr	r1, [r3, #20]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	891a      	ldrh	r2, [r3, #8]
 8002d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	f004 fca6 	bl	80076c0 <USB_WritePMA>
 8002d74:	e12e      	b.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	461a      	mov	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d9a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	699a      	ldr	r2, [r3, #24]
 8002da0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d306      	bcc.n	8002db4 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dac:	1ad2      	subs	r2, r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	619a      	str	r2, [r3, #24]
 8002db2:	e002      	b.n	8002dba <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2200      	movs	r2, #0
 8002db8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d12c      	bne.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f006 fb5a 	bl	8009482 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f040 80fd 	bne.w	8002fd4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	441a      	add	r2, r3
 8002e04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	8013      	strh	r3, [r2, #0]
 8002e1a:	e0db      	b.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d11f      	bne.n	8002e66 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e40:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	441a      	add	r2, r3
 8002e50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	f040 80b1 	bne.w	8002fd4 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e78:	441a      	add	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e84:	441a      	add	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	6a1a      	ldr	r2, [r3, #32]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d309      	bcc.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	6a1a      	ldr	r2, [r3, #32]
 8002ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea2:	1ad2      	subs	r2, r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	621a      	str	r2, [r3, #32]
 8002ea8:	e014      	b.n	8002ed4 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002eb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002eb4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ebe:	e009      	b.n	8002ed4 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	785b      	ldrb	r3, [r3, #1]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d155      	bne.n	8002f8e <HAL_PCD_EP_DB_Transmit+0x492>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef6:	4413      	add	r3, r2
 8002ef8:	647b      	str	r3, [r7, #68]	; 0x44
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	00da      	lsls	r2, r3, #3
 8002f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f02:	4413      	add	r3, r2
 8002f04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f08:	643b      	str	r3, [r7, #64]	; 0x40
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d112      	bne.n	8002f36 <HAL_PCD_EP_DB_Transmit+0x43a>
 8002f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f1e:	801a      	strh	r2, [r3, #0]
 8002f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f32:	801a      	strh	r2, [r3, #0]
 8002f34:	e044      	b.n	8002fc0 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f38:	2b3e      	cmp	r3, #62	; 0x3e
 8002f3a:	d811      	bhi.n	8002f60 <HAL_PCD_EP_DB_Transmit+0x464>
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3e:	085b      	lsrs	r3, r3, #1
 8002f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d002      	beq.n	8002f52 <HAL_PCD_EP_DB_Transmit+0x456>
 8002f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f4e:	3301      	adds	r3, #1
 8002f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	029b      	lsls	r3, r3, #10
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f5c:	801a      	strh	r2, [r3, #0]
 8002f5e:	e02f      	b.n	8002fc0 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f72:	3b01      	subs	r3, #1
 8002f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	029b      	lsls	r3, r3, #10
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f8a:	801a      	strh	r2, [r3, #0]
 8002f8c:	e018      	b.n	8002fc0 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	785b      	ldrb	r3, [r3, #1]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d114      	bne.n	8002fc0 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa4:	4413      	add	r3, r2
 8002fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	00da      	lsls	r2, r3, #3
 8002fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6959      	ldr	r1, [r3, #20]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	895a      	ldrh	r2, [r3, #10]
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	f004 fb76 	bl	80076c0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fee:	823b      	strh	r3, [r7, #16]
 8002ff0:	8a3b      	ldrh	r3, [r7, #16]
 8002ff2:	f083 0310 	eor.w	r3, r3, #16
 8002ff6:	823b      	strh	r3, [r7, #16]
 8002ff8:	8a3b      	ldrh	r3, [r7, #16]
 8002ffa:	f083 0320 	eor.w	r3, r3, #32
 8002ffe:	823b      	strh	r3, [r7, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	441a      	add	r2, r3
 800300e:	8a3b      	ldrh	r3, [r7, #16]
 8003010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800301c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003020:	b29b      	uxth	r3, r3
 8003022:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3748      	adds	r7, #72	; 0x48
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800302e:	b480      	push	{r7}
 8003030:	b087      	sub	sp, #28
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	607b      	str	r3, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	817b      	strh	r3, [r7, #10]
 800303c:	4613      	mov	r3, r2
 800303e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003040:	897b      	ldrh	r3, [r7, #10]
 8003042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00b      	beq.n	8003064 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800304c:	897b      	ldrh	r3, [r7, #10]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4413      	add	r3, r2
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	e009      	b.n	8003078 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003064:	897a      	ldrh	r2, [r7, #10]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4413      	add	r3, r2
 8003076:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003078:	893b      	ldrh	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d107      	bne.n	800308e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2200      	movs	r2, #0
 8003082:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	b29a      	uxth	r2, r3
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	80da      	strh	r2, [r3, #6]
 800308c:	e00b      	b.n	80030a6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2201      	movs	r2, #1
 8003092:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	b29a      	uxth	r2, r3
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0c1b      	lsrs	r3, r3, #16
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	371c      	adds	r7, #28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	f043 0302 	orr.w	r3, r3, #2
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d141      	bne.n	800319a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003116:	4b4b      	ldr	r3, [pc, #300]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800311e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003122:	d131      	bne.n	8003188 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003124:	4b47      	ldr	r3, [pc, #284]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800312a:	4a46      	ldr	r2, [pc, #280]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003130:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003134:	4b43      	ldr	r3, [pc, #268]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800313c:	4a41      	ldr	r2, [pc, #260]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003142:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003144:	4b40      	ldr	r3, [pc, #256]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2232      	movs	r2, #50	; 0x32
 800314a:	fb02 f303 	mul.w	r3, r2, r3
 800314e:	4a3f      	ldr	r2, [pc, #252]	; (800324c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	0c9b      	lsrs	r3, r3, #18
 8003156:	3301      	adds	r3, #1
 8003158:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800315a:	e002      	b.n	8003162 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3b01      	subs	r3, #1
 8003160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003162:	4b38      	ldr	r3, [pc, #224]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316e:	d102      	bne.n	8003176 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f2      	bne.n	800315c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003176:	4b33      	ldr	r3, [pc, #204]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003182:	d158      	bne.n	8003236 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e057      	b.n	8003238 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003188:	4b2e      	ldr	r3, [pc, #184]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800318e:	4a2d      	ldr	r2, [pc, #180]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003194:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003198:	e04d      	b.n	8003236 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a0:	d141      	bne.n	8003226 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031a2:	4b28      	ldr	r3, [pc, #160]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ae:	d131      	bne.n	8003214 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031b0:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031b6:	4a23      	ldr	r2, [pc, #140]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031c0:	4b20      	ldr	r3, [pc, #128]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031c8:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031d0:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2232      	movs	r2, #50	; 0x32
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	4a1c      	ldr	r2, [pc, #112]	; (800324c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031dc:	fba2 2303 	umull	r2, r3, r2, r3
 80031e0:	0c9b      	lsrs	r3, r3, #18
 80031e2:	3301      	adds	r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031e6:	e002      	b.n	80031ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fa:	d102      	bne.n	8003202 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f2      	bne.n	80031e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320e:	d112      	bne.n	8003236 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e011      	b.n	8003238 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003220:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003224:	e007      	b.n	8003236 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800322e:	4a05      	ldr	r2, [pc, #20]	; (8003244 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003230:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003234:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	40007000 	.word	0x40007000
 8003248:	20000000 	.word	0x20000000
 800324c:	431bde83 	.word	0x431bde83

08003250 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800325a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800325e:	6093      	str	r3, [r2, #8]
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40007000 	.word	0x40007000

08003270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e308      	b.n	8003894 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d075      	beq.n	800337a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800328e:	4ba3      	ldr	r3, [pc, #652]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003298:	4ba0      	ldr	r3, [pc, #640]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b0c      	cmp	r3, #12
 80032a6:	d102      	bne.n	80032ae <HAL_RCC_OscConfig+0x3e>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d002      	beq.n	80032b4 <HAL_RCC_OscConfig+0x44>
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d10b      	bne.n	80032cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	4b99      	ldr	r3, [pc, #612]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d05b      	beq.n	8003378 <HAL_RCC_OscConfig+0x108>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d157      	bne.n	8003378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e2e3      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d4:	d106      	bne.n	80032e4 <HAL_RCC_OscConfig+0x74>
 80032d6:	4b91      	ldr	r3, [pc, #580]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a90      	ldr	r2, [pc, #576]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	e01d      	b.n	8003320 <HAL_RCC_OscConfig+0xb0>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ec:	d10c      	bne.n	8003308 <HAL_RCC_OscConfig+0x98>
 80032ee:	4b8b      	ldr	r3, [pc, #556]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a8a      	ldr	r2, [pc, #552]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	4b88      	ldr	r3, [pc, #544]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a87      	ldr	r2, [pc, #540]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e00b      	b.n	8003320 <HAL_RCC_OscConfig+0xb0>
 8003308:	4b84      	ldr	r3, [pc, #528]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a83      	ldr	r2, [pc, #524]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 800330e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	4b81      	ldr	r3, [pc, #516]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a80      	ldr	r2, [pc, #512]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 800331a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800331e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d013      	beq.n	8003350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe f8b6 	bl	8001498 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003330:	f7fe f8b2 	bl	8001498 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	; 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e2a8      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003342:	4b76      	ldr	r3, [pc, #472]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0xc0>
 800334e:	e014      	b.n	800337a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fe f8a2 	bl	8001498 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003358:	f7fe f89e 	bl	8001498 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e294      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800336a:	4b6c      	ldr	r3, [pc, #432]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0xe8>
 8003376:	e000      	b.n	800337a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d075      	beq.n	8003472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003386:	4b65      	ldr	r3, [pc, #404]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003390:	4b62      	ldr	r3, [pc, #392]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b0c      	cmp	r3, #12
 800339e:	d102      	bne.n	80033a6 <HAL_RCC_OscConfig+0x136>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d002      	beq.n	80033ac <HAL_RCC_OscConfig+0x13c>
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d11f      	bne.n	80033ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033ac:	4b5b      	ldr	r3, [pc, #364]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_RCC_OscConfig+0x154>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e267      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c4:	4b55      	ldr	r3, [pc, #340]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	4952      	ldr	r1, [pc, #328]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033d8:	4b51      	ldr	r3, [pc, #324]	; (8003520 <HAL_RCC_OscConfig+0x2b0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe f80f 	bl	8001400 <HAL_InitTick>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d043      	beq.n	8003470 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e253      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d023      	beq.n	800343c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f4:	4b49      	ldr	r3, [pc, #292]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a48      	ldr	r2, [pc, #288]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 80033fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fe f84a 	bl	8001498 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003408:	f7fe f846 	bl	8001498 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e23c      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800341a:	4b40      	ldr	r3, [pc, #256]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003426:	4b3d      	ldr	r3, [pc, #244]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	061b      	lsls	r3, r3, #24
 8003434:	4939      	ldr	r1, [pc, #228]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]
 800343a:	e01a      	b.n	8003472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343c:	4b37      	ldr	r3, [pc, #220]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a36      	ldr	r2, [pc, #216]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 8003442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fe f826 	bl	8001498 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003450:	f7fe f822 	bl	8001498 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e218      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003462:	4b2e      	ldr	r3, [pc, #184]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x1e0>
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003470:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d03c      	beq.n	80034f8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01c      	beq.n	80034c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003486:	4b25      	ldr	r3, [pc, #148]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 8003488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800348c:	4a23      	ldr	r2, [pc, #140]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003496:	f7fd ffff 	bl	8001498 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800349e:	f7fd fffb 	bl	8001498 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e1f1      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034b0:	4b1a      	ldr	r3, [pc, #104]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 80034b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0ef      	beq.n	800349e <HAL_RCC_OscConfig+0x22e>
 80034be:	e01b      	b.n	80034f8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c0:	4b16      	ldr	r3, [pc, #88]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 80034c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c6:	4a15      	ldr	r2, [pc, #84]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fd ffe2 	bl	8001498 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d8:	f7fd ffde 	bl	8001498 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e1d4      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034ea:	4b0c      	ldr	r3, [pc, #48]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1ef      	bne.n	80034d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80ab 	beq.w	800365c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003506:	2300      	movs	r3, #0
 8003508:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800350a:	4b04      	ldr	r3, [pc, #16]	; (800351c <HAL_RCC_OscConfig+0x2ac>)
 800350c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_RCC_OscConfig+0x2b4>
 8003516:	2301      	movs	r3, #1
 8003518:	e005      	b.n	8003526 <HAL_RCC_OscConfig+0x2b6>
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	20000004 	.word	0x20000004
 8003524:	2300      	movs	r3, #0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00d      	beq.n	8003546 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352a:	4baf      	ldr	r3, [pc, #700]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352e:	4aae      	ldr	r2, [pc, #696]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 8003530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003534:	6593      	str	r3, [r2, #88]	; 0x58
 8003536:	4bac      	ldr	r3, [pc, #688]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 8003538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003542:	2301      	movs	r3, #1
 8003544:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003546:	4ba9      	ldr	r3, [pc, #676]	; (80037ec <HAL_RCC_OscConfig+0x57c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d118      	bne.n	8003584 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003552:	4ba6      	ldr	r3, [pc, #664]	; (80037ec <HAL_RCC_OscConfig+0x57c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4aa5      	ldr	r2, [pc, #660]	; (80037ec <HAL_RCC_OscConfig+0x57c>)
 8003558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355e:	f7fd ff9b 	bl	8001498 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003566:	f7fd ff97 	bl	8001498 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e18d      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003578:	4b9c      	ldr	r3, [pc, #624]	; (80037ec <HAL_RCC_OscConfig+0x57c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f0      	beq.n	8003566 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d108      	bne.n	800359e <HAL_RCC_OscConfig+0x32e>
 800358c:	4b96      	ldr	r3, [pc, #600]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003592:	4a95      	ldr	r2, [pc, #596]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800359c:	e024      	b.n	80035e8 <HAL_RCC_OscConfig+0x378>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b05      	cmp	r3, #5
 80035a4:	d110      	bne.n	80035c8 <HAL_RCC_OscConfig+0x358>
 80035a6:	4b90      	ldr	r3, [pc, #576]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ac:	4a8e      	ldr	r2, [pc, #568]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80035ae:	f043 0304 	orr.w	r3, r3, #4
 80035b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035b6:	4b8c      	ldr	r3, [pc, #560]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035bc:	4a8a      	ldr	r2, [pc, #552]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035c6:	e00f      	b.n	80035e8 <HAL_RCC_OscConfig+0x378>
 80035c8:	4b87      	ldr	r3, [pc, #540]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ce:	4a86      	ldr	r2, [pc, #536]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035d8:	4b83      	ldr	r3, [pc, #524]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	4a82      	ldr	r2, [pc, #520]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80035e0:	f023 0304 	bic.w	r3, r3, #4
 80035e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d016      	beq.n	800361e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fd ff52 	bl	8001498 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f6:	e00a      	b.n	800360e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7fd ff4e 	bl	8001498 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f241 3288 	movw	r2, #5000	; 0x1388
 8003606:	4293      	cmp	r3, r2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e142      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800360e:	4b76      	ldr	r3, [pc, #472]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0ed      	beq.n	80035f8 <HAL_RCC_OscConfig+0x388>
 800361c:	e015      	b.n	800364a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361e:	f7fd ff3b 	bl	8001498 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003624:	e00a      	b.n	800363c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003626:	f7fd ff37 	bl	8001498 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	f241 3288 	movw	r2, #5000	; 0x1388
 8003634:	4293      	cmp	r3, r2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e12b      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800363c:	4b6a      	ldr	r3, [pc, #424]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1ed      	bne.n	8003626 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800364a:	7ffb      	ldrb	r3, [r7, #31]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d105      	bne.n	800365c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003650:	4b65      	ldr	r3, [pc, #404]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003654:	4a64      	ldr	r2, [pc, #400]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 8003656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800365a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b00      	cmp	r3, #0
 8003666:	d03c      	beq.n	80036e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d01c      	beq.n	80036aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003670:	4b5d      	ldr	r3, [pc, #372]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 8003672:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003676:	4a5c      	ldr	r2, [pc, #368]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003680:	f7fd ff0a 	bl	8001498 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003688:	f7fd ff06 	bl	8001498 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e0fc      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800369a:	4b53      	ldr	r3, [pc, #332]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 800369c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ef      	beq.n	8003688 <HAL_RCC_OscConfig+0x418>
 80036a8:	e01b      	b.n	80036e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036aa:	4b4f      	ldr	r3, [pc, #316]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80036ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036b0:	4a4d      	ldr	r2, [pc, #308]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fd feed 	bl	8001498 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036c2:	f7fd fee9 	bl	8001498 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e0df      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036d4:	4b44      	ldr	r3, [pc, #272]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80036d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1ef      	bne.n	80036c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80d3 	beq.w	8003892 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ec:	4b3e      	ldr	r3, [pc, #248]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b0c      	cmp	r3, #12
 80036f6:	f000 808d 	beq.w	8003814 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d15a      	bne.n	80037b8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a38      	ldr	r2, [pc, #224]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 8003708:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800370c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370e:	f7fd fec3 	bl	8001498 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003716:	f7fd febf 	bl	8001498 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e0b5      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003728:	4b2f      	ldr	r3, [pc, #188]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f0      	bne.n	8003716 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003734:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <HAL_RCC_OscConfig+0x580>)
 800373a:	4013      	ands	r3, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6a11      	ldr	r1, [r2, #32]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003744:	3a01      	subs	r2, #1
 8003746:	0112      	lsls	r2, r2, #4
 8003748:	4311      	orrs	r1, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800374e:	0212      	lsls	r2, r2, #8
 8003750:	4311      	orrs	r1, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003756:	0852      	lsrs	r2, r2, #1
 8003758:	3a01      	subs	r2, #1
 800375a:	0552      	lsls	r2, r2, #21
 800375c:	4311      	orrs	r1, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003762:	0852      	lsrs	r2, r2, #1
 8003764:	3a01      	subs	r2, #1
 8003766:	0652      	lsls	r2, r2, #25
 8003768:	4311      	orrs	r1, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800376e:	06d2      	lsls	r2, r2, #27
 8003770:	430a      	orrs	r2, r1
 8003772:	491d      	ldr	r1, [pc, #116]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 8003774:	4313      	orrs	r3, r2
 8003776:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003778:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1a      	ldr	r2, [pc, #104]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 800377e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003782:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003784:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4a17      	ldr	r2, [pc, #92]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 800378a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800378e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fd fe82 	bl	8001498 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003798:	f7fd fe7e 	bl	8001498 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e074      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037aa:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x528>
 80037b6:	e06c      	b.n	8003892 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a0a      	ldr	r2, [pc, #40]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80037be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037c4:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	4a07      	ldr	r2, [pc, #28]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80037ca:	f023 0303 	bic.w	r3, r3, #3
 80037ce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80037d0:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <HAL_RCC_OscConfig+0x578>)
 80037d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fd fe5a 	bl	8001498 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e6:	e00e      	b.n	8003806 <HAL_RCC_OscConfig+0x596>
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40007000 	.word	0x40007000
 80037f0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f4:	f7fd fe50 	bl	8001498 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e046      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003806:	4b25      	ldr	r3, [pc, #148]	; (800389c <HAL_RCC_OscConfig+0x62c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x584>
 8003812:	e03e      	b.n	8003892 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e039      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003820:	4b1e      	ldr	r3, [pc, #120]	; (800389c <HAL_RCC_OscConfig+0x62c>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f003 0203 	and.w	r2, r3, #3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	429a      	cmp	r2, r3
 8003832:	d12c      	bne.n	800388e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	3b01      	subs	r3, #1
 8003840:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d123      	bne.n	800388e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d11b      	bne.n	800388e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d113      	bne.n	800388e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	3b01      	subs	r3, #1
 8003874:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d109      	bne.n	800388e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	3b01      	subs	r3, #1
 8003888:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d001      	beq.n	8003892 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3720      	adds	r7, #32
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000

080038a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e11e      	b.n	8003af6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038b8:	4b91      	ldr	r3, [pc, #580]	; (8003b00 <HAL_RCC_ClockConfig+0x260>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d910      	bls.n	80038e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b8e      	ldr	r3, [pc, #568]	; (8003b00 <HAL_RCC_ClockConfig+0x260>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 020f 	bic.w	r2, r3, #15
 80038ce:	498c      	ldr	r1, [pc, #560]	; (8003b00 <HAL_RCC_ClockConfig+0x260>)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d6:	4b8a      	ldr	r3, [pc, #552]	; (8003b00 <HAL_RCC_ClockConfig+0x260>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d001      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e106      	b.n	8003af6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d073      	beq.n	80039dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d129      	bne.n	8003950 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038fc:	4b81      	ldr	r3, [pc, #516]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0f4      	b.n	8003af6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800390c:	f000 f966 	bl	8003bdc <RCC_GetSysClockFreqFromPLLSource>
 8003910:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4a7c      	ldr	r2, [pc, #496]	; (8003b08 <HAL_RCC_ClockConfig+0x268>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d93f      	bls.n	800399a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800391a:	4b7a      	ldr	r3, [pc, #488]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d009      	beq.n	800393a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800392e:	2b00      	cmp	r3, #0
 8003930:	d033      	beq.n	800399a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003936:	2b00      	cmp	r3, #0
 8003938:	d12f      	bne.n	800399a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800393a:	4b72      	ldr	r3, [pc, #456]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003942:	4a70      	ldr	r2, [pc, #448]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003948:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	e024      	b.n	800399a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d107      	bne.n	8003968 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003958:	4b6a      	ldr	r3, [pc, #424]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d109      	bne.n	8003978 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0c6      	b.n	8003af6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003968:	4b66      	ldr	r3, [pc, #408]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0be      	b.n	8003af6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003978:	f000 f8ce 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 800397c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4a61      	ldr	r2, [pc, #388]	; (8003b08 <HAL_RCC_ClockConfig+0x268>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d909      	bls.n	800399a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003986:	4b5f      	ldr	r3, [pc, #380]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800398e:	4a5d      	ldr	r2, [pc, #372]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003994:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800399a:	4b5a      	ldr	r3, [pc, #360]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f023 0203 	bic.w	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	4957      	ldr	r1, [pc, #348]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ac:	f7fd fd74 	bl	8001498 <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b4:	f7fd fd70 	bl	8001498 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e095      	b.n	8003af6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	4b4e      	ldr	r3, [pc, #312]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 020c 	and.w	r2, r3, #12
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	429a      	cmp	r2, r3
 80039da:	d1eb      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d023      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039f4:	4b43      	ldr	r3, [pc, #268]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a42      	ldr	r2, [pc, #264]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 80039fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d007      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a0c:	4b3d      	ldr	r3, [pc, #244]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a14:	4a3b      	ldr	r2, [pc, #236]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003a16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a1c:	4b39      	ldr	r3, [pc, #228]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4936      	ldr	r1, [pc, #216]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2b80      	cmp	r3, #128	; 0x80
 8003a34:	d105      	bne.n	8003a42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a36:	4b33      	ldr	r3, [pc, #204]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	4a32      	ldr	r2, [pc, #200]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a42:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <HAL_RCC_ClockConfig+0x260>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d21d      	bcs.n	8003a8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a50:	4b2b      	ldr	r3, [pc, #172]	; (8003b00 <HAL_RCC_ClockConfig+0x260>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 020f 	bic.w	r2, r3, #15
 8003a58:	4929      	ldr	r1, [pc, #164]	; (8003b00 <HAL_RCC_ClockConfig+0x260>)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a60:	f7fd fd1a 	bl	8001498 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	e00a      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a68:	f7fd fd16 	bl	8001498 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e03b      	b.n	8003af6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7e:	4b20      	ldr	r3, [pc, #128]	; (8003b00 <HAL_RCC_ClockConfig+0x260>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d1ed      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a98:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	4917      	ldr	r1, [pc, #92]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ab6:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	490f      	ldr	r1, [pc, #60]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aca:	f000 f825 	bl	8003b18 <HAL_RCC_GetSysClockFreq>
 8003ace:	4601      	mov	r1, r0
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <HAL_RCC_ClockConfig+0x264>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	4a0c      	ldr	r2, [pc, #48]	; (8003b0c <HAL_RCC_ClockConfig+0x26c>)
 8003adc:	5cd3      	ldrb	r3, [r2, r3]
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	fa21 f303 	lsr.w	r3, r1, r3
 8003ae6:	4a0a      	ldr	r2, [pc, #40]	; (8003b10 <HAL_RCC_ClockConfig+0x270>)
 8003ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_RCC_ClockConfig+0x274>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fd fc86 	bl	8001400 <HAL_InitTick>
 8003af4:	4603      	mov	r3, r0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40022000 	.word	0x40022000
 8003b04:	40021000 	.word	0x40021000
 8003b08:	04c4b400 	.word	0x04c4b400
 8003b0c:	08009a8c 	.word	0x08009a8c
 8003b10:	20000000 	.word	0x20000000
 8003b14:	20000004 	.word	0x20000004

08003b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b1e:	4b2c      	ldr	r3, [pc, #176]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d102      	bne.n	8003b30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b2a:	4b2a      	ldr	r3, [pc, #168]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	e047      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b30:	4b27      	ldr	r3, [pc, #156]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 030c 	and.w	r3, r3, #12
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d102      	bne.n	8003b42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b3c:	4b26      	ldr	r3, [pc, #152]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	e03e      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b42:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b0c      	cmp	r3, #12
 8003b4c:	d136      	bne.n	8003bbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	3301      	adds	r3, #1
 8003b64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d10c      	bne.n	8003b86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b6c:	4a1a      	ldr	r2, [pc, #104]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	4a16      	ldr	r2, [pc, #88]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b76:	68d2      	ldr	r2, [r2, #12]
 8003b78:	0a12      	lsrs	r2, r2, #8
 8003b7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b7e:	fb02 f303 	mul.w	r3, r2, r3
 8003b82:	617b      	str	r3, [r7, #20]
      break;
 8003b84:	e00c      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b86:	4a13      	ldr	r2, [pc, #76]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	4a10      	ldr	r2, [pc, #64]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b90:	68d2      	ldr	r2, [r2, #12]
 8003b92:	0a12      	lsrs	r2, r2, #8
 8003b94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b98:	fb02 f303 	mul.w	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]
      break;
 8003b9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	0e5b      	lsrs	r3, r3, #25
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	3301      	adds	r3, #1
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	e001      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bc0:	693b      	ldr	r3, [r7, #16]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	371c      	adds	r7, #28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	00f42400 	.word	0x00f42400
 8003bd8:	007a1200 	.word	0x007a1200

08003bdc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003be2:	4b1e      	ldr	r3, [pc, #120]	; (8003c5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bec:	4b1b      	ldr	r3, [pc, #108]	; (8003c5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	091b      	lsrs	r3, r3, #4
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d10c      	bne.n	8003c1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c00:	4a17      	ldr	r2, [pc, #92]	; (8003c60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c0a:	68d2      	ldr	r2, [r2, #12]
 8003c0c:	0a12      	lsrs	r2, r2, #8
 8003c0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	617b      	str	r3, [r7, #20]
    break;
 8003c18:	e00c      	b.n	8003c34 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c1a:	4a12      	ldr	r2, [pc, #72]	; (8003c64 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c22:	4a0e      	ldr	r2, [pc, #56]	; (8003c5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c24:	68d2      	ldr	r2, [r2, #12]
 8003c26:	0a12      	lsrs	r2, r2, #8
 8003c28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c2c:	fb02 f303 	mul.w	r3, r2, r3
 8003c30:	617b      	str	r3, [r7, #20]
    break;
 8003c32:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c34:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	0e5b      	lsrs	r3, r3, #25
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	3301      	adds	r3, #1
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003c4e:	687b      	ldr	r3, [r7, #4]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	007a1200 	.word	0x007a1200
 8003c64:	00f42400 	.word	0x00f42400

08003c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c70:	2300      	movs	r3, #0
 8003c72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c74:	2300      	movs	r3, #0
 8003c76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8098 	beq.w	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c86:	2300      	movs	r3, #0
 8003c88:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c8a:	4b43      	ldr	r3, [pc, #268]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10d      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c96:	4b40      	ldr	r3, [pc, #256]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9a:	4a3f      	ldr	r2, [pc, #252]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ca2:	4b3d      	ldr	r3, [pc, #244]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003caa:	60bb      	str	r3, [r7, #8]
 8003cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cb2:	4b3a      	ldr	r3, [pc, #232]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a39      	ldr	r2, [pc, #228]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cbe:	f7fd fbeb 	bl	8001498 <HAL_GetTick>
 8003cc2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cc4:	e009      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc6:	f7fd fbe7 	bl	8001498 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d902      	bls.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	74fb      	strb	r3, [r7, #19]
        break;
 8003cd8:	e005      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cda:	4b30      	ldr	r3, [pc, #192]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0ef      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003ce6:	7cfb      	ldrb	r3, [r7, #19]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d159      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cec:	4b2a      	ldr	r3, [pc, #168]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d01e      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d019      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d08:	4b23      	ldr	r3, [pc, #140]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d14:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	4a1f      	ldr	r2, [pc, #124]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d24:	4b1c      	ldr	r3, [pc, #112]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2a:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d34:	4a18      	ldr	r2, [pc, #96]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d016      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fd fba7 	bl	8001498 <HAL_GetTick>
 8003d4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d4c:	e00b      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4e:	f7fd fba3 	bl	8001498 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d902      	bls.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	74fb      	strb	r3, [r7, #19]
            break;
 8003d64:	e006      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d66:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0ec      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003d74:	7cfb      	ldrb	r3, [r7, #19]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10b      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d7a:	4b07      	ldr	r3, [pc, #28]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	4903      	ldr	r1, [pc, #12]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d90:	e008      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d92:	7cfb      	ldrb	r3, [r7, #19]
 8003d94:	74bb      	strb	r3, [r7, #18]
 8003d96:	e005      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da0:	7cfb      	ldrb	r3, [r7, #19]
 8003da2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003da4:	7c7b      	ldrb	r3, [r7, #17]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d105      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003daa:	4ba6      	ldr	r3, [pc, #664]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dae:	4aa5      	ldr	r2, [pc, #660]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dc2:	4ba0      	ldr	r3, [pc, #640]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc8:	f023 0203 	bic.w	r2, r3, #3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	499c      	ldr	r1, [pc, #624]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003de4:	4b97      	ldr	r3, [pc, #604]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dea:	f023 020c 	bic.w	r2, r3, #12
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	4994      	ldr	r1, [pc, #592]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e06:	4b8f      	ldr	r3, [pc, #572]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	498b      	ldr	r1, [pc, #556]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e28:	4b86      	ldr	r3, [pc, #536]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	4983      	ldr	r1, [pc, #524]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e4a:	4b7e      	ldr	r3, [pc, #504]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e50:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	497a      	ldr	r1, [pc, #488]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e6c:	4b75      	ldr	r3, [pc, #468]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	4972      	ldr	r1, [pc, #456]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e8e:	4b6d      	ldr	r3, [pc, #436]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	4969      	ldr	r1, [pc, #420]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eb0:	4b64      	ldr	r3, [pc, #400]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4961      	ldr	r1, [pc, #388]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ed2:	4b5c      	ldr	r3, [pc, #368]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	4958      	ldr	r1, [pc, #352]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d015      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ef4:	4b53      	ldr	r3, [pc, #332]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	4950      	ldr	r1, [pc, #320]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f12:	d105      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f14:	4b4b      	ldr	r3, [pc, #300]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4a4a      	ldr	r2, [pc, #296]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d015      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f2c:	4b45      	ldr	r3, [pc, #276]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	4942      	ldr	r1, [pc, #264]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f4a:	d105      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f4c:	4b3d      	ldr	r3, [pc, #244]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	4a3c      	ldr	r2, [pc, #240]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f56:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d015      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f64:	4b37      	ldr	r3, [pc, #220]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	4934      	ldr	r1, [pc, #208]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f82:	d105      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f84:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4a2e      	ldr	r2, [pc, #184]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f8e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d015      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f9c:	4b29      	ldr	r3, [pc, #164]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003faa:	4926      	ldr	r1, [pc, #152]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fba:	d105      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fbc:	4b21      	ldr	r3, [pc, #132]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4a20      	ldr	r2, [pc, #128]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fc6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d015      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fd4:	4b1b      	ldr	r3, [pc, #108]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	4918      	ldr	r1, [pc, #96]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ff2:	d105      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ff4:	4b13      	ldr	r3, [pc, #76]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4a12      	ldr	r2, [pc, #72]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ffe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d015      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800400c:	4b0d      	ldr	r3, [pc, #52]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401a:	490a      	ldr	r1, [pc, #40]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800402a:	d105      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800402c:	4b05      	ldr	r3, [pc, #20]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4a04      	ldr	r2, [pc, #16]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004036:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004038:	7cbb      	ldrb	r3, [r7, #18]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40021000 	.word	0x40021000

08004048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e049      	b.n	80040ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fd f826 	bl	80010c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f000 fde2 	bl	8004c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d001      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e04a      	b.n	80041a6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a21      	ldr	r2, [pc, #132]	; (80041b4 <HAL_TIM_Base_Start_IT+0xbc>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d018      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x6c>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413a:	d013      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x6c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00e      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x6c>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1c      	ldr	r2, [pc, #112]	; (80041bc <HAL_TIM_Base_Start_IT+0xc4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d009      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x6c>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1a      	ldr	r2, [pc, #104]	; (80041c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x6c>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a19      	ldr	r2, [pc, #100]	; (80041c4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d115      	bne.n	8004190 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800416c:	4013      	ands	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b06      	cmp	r3, #6
 8004174:	d015      	beq.n	80041a2 <HAL_TIM_Base_Start_IT+0xaa>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417c:	d011      	beq.n	80041a2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0201 	orr.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418e:	e008      	b.n	80041a2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	e000      	b.n	80041a4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40012c00 	.word	0x40012c00
 80041b8:	40000400 	.word	0x40000400
 80041bc:	40000800 	.word	0x40000800
 80041c0:	40013400 	.word	0x40013400
 80041c4:	40014000 	.word	0x40014000
 80041c8:	00010007 	.word	0x00010007

080041cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e049      	b.n	8004272 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fc ff32 	bl	800105c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f000 fd20 	bl	8004c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <HAL_TIM_PWM_Start+0x24>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	e03c      	b.n	800431a <HAL_TIM_PWM_Start+0x9e>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d109      	bne.n	80042ba <HAL_TIM_PWM_Start+0x3e>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	bf14      	ite	ne
 80042b2:	2301      	movne	r3, #1
 80042b4:	2300      	moveq	r3, #0
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	e02f      	b.n	800431a <HAL_TIM_PWM_Start+0x9e>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d109      	bne.n	80042d4 <HAL_TIM_PWM_Start+0x58>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	e022      	b.n	800431a <HAL_TIM_PWM_Start+0x9e>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b0c      	cmp	r3, #12
 80042d8:	d109      	bne.n	80042ee <HAL_TIM_PWM_Start+0x72>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	bf14      	ite	ne
 80042e6:	2301      	movne	r3, #1
 80042e8:	2300      	moveq	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	e015      	b.n	800431a <HAL_TIM_PWM_Start+0x9e>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d109      	bne.n	8004308 <HAL_TIM_PWM_Start+0x8c>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	bf14      	ite	ne
 8004300:	2301      	movne	r3, #1
 8004302:	2300      	moveq	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	e008      	b.n	800431a <HAL_TIM_PWM_Start+0x9e>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	bf14      	ite	ne
 8004314:	2301      	movne	r3, #1
 8004316:	2300      	moveq	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e097      	b.n	8004452 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d104      	bne.n	8004332 <HAL_TIM_PWM_Start+0xb6>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004330:	e023      	b.n	800437a <HAL_TIM_PWM_Start+0xfe>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b04      	cmp	r3, #4
 8004336:	d104      	bne.n	8004342 <HAL_TIM_PWM_Start+0xc6>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004340:	e01b      	b.n	800437a <HAL_TIM_PWM_Start+0xfe>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b08      	cmp	r3, #8
 8004346:	d104      	bne.n	8004352 <HAL_TIM_PWM_Start+0xd6>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004350:	e013      	b.n	800437a <HAL_TIM_PWM_Start+0xfe>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d104      	bne.n	8004362 <HAL_TIM_PWM_Start+0xe6>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004360:	e00b      	b.n	800437a <HAL_TIM_PWM_Start+0xfe>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b10      	cmp	r3, #16
 8004366:	d104      	bne.n	8004372 <HAL_TIM_PWM_Start+0xf6>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004370:	e003      	b.n	800437a <HAL_TIM_PWM_Start+0xfe>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2201      	movs	r2, #1
 8004380:	6839      	ldr	r1, [r7, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f000 ffea 	bl	800535c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a33      	ldr	r2, [pc, #204]	; (800445c <HAL_TIM_PWM_Start+0x1e0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_TIM_PWM_Start+0x13e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a32      	ldr	r2, [pc, #200]	; (8004460 <HAL_TIM_PWM_Start+0x1e4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00e      	beq.n	80043ba <HAL_TIM_PWM_Start+0x13e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a30      	ldr	r2, [pc, #192]	; (8004464 <HAL_TIM_PWM_Start+0x1e8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_TIM_PWM_Start+0x13e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a2f      	ldr	r2, [pc, #188]	; (8004468 <HAL_TIM_PWM_Start+0x1ec>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_TIM_PWM_Start+0x13e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a2d      	ldr	r2, [pc, #180]	; (800446c <HAL_TIM_PWM_Start+0x1f0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d101      	bne.n	80043be <HAL_TIM_PWM_Start+0x142>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <HAL_TIM_PWM_Start+0x144>
 80043be:	2300      	movs	r3, #0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a20      	ldr	r2, [pc, #128]	; (800445c <HAL_TIM_PWM_Start+0x1e0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d018      	beq.n	8004410 <HAL_TIM_PWM_Start+0x194>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e6:	d013      	beq.n	8004410 <HAL_TIM_PWM_Start+0x194>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a20      	ldr	r2, [pc, #128]	; (8004470 <HAL_TIM_PWM_Start+0x1f4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00e      	beq.n	8004410 <HAL_TIM_PWM_Start+0x194>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1f      	ldr	r2, [pc, #124]	; (8004474 <HAL_TIM_PWM_Start+0x1f8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d009      	beq.n	8004410 <HAL_TIM_PWM_Start+0x194>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a17      	ldr	r2, [pc, #92]	; (8004460 <HAL_TIM_PWM_Start+0x1e4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d004      	beq.n	8004410 <HAL_TIM_PWM_Start+0x194>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a16      	ldr	r2, [pc, #88]	; (8004464 <HAL_TIM_PWM_Start+0x1e8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d115      	bne.n	800443c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	4b18      	ldr	r3, [pc, #96]	; (8004478 <HAL_TIM_PWM_Start+0x1fc>)
 8004418:	4013      	ands	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b06      	cmp	r3, #6
 8004420:	d015      	beq.n	800444e <HAL_TIM_PWM_Start+0x1d2>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004428:	d011      	beq.n	800444e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0201 	orr.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443a:	e008      	b.n	800444e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	e000      	b.n	8004450 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40013400 	.word	0x40013400
 8004464:	40014000 	.word	0x40014000
 8004468:	40014400 	.word	0x40014400
 800446c:	40014800 	.word	0x40014800
 8004470:	40000400 	.word	0x40000400
 8004474:	40000800 	.word	0x40000800
 8004478:	00010007 	.word	0x00010007

0800447c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e097      	b.n	80045c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d106      	bne.n	80044aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7fc fd33 	bl	8000f10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2202      	movs	r2, #2
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80044c0:	f023 0307 	bic.w	r3, r3, #7
 80044c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3304      	adds	r3, #4
 80044ce:	4619      	mov	r1, r3
 80044d0:	4610      	mov	r0, r2
 80044d2:	f000 fbbd 	bl	8004c50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fe:	f023 0303 	bic.w	r3, r3, #3
 8004502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	4313      	orrs	r3, r2
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800451c:	f023 030c 	bic.w	r3, r3, #12
 8004520:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004528:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800452c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	021b      	lsls	r3, r3, #8
 8004538:	4313      	orrs	r3, r2
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	011a      	lsls	r2, r3, #4
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	031b      	lsls	r3, r3, #12
 800454c:	4313      	orrs	r3, r2
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800455a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004562:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	4313      	orrs	r3, r2
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d110      	bne.n	800461a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d102      	bne.n	8004604 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80045fe:	7b7b      	ldrb	r3, [r7, #13]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d001      	beq.n	8004608 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e068      	b.n	80046da <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004618:	e031      	b.n	800467e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b04      	cmp	r3, #4
 800461e:	d110      	bne.n	8004642 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004620:	7bbb      	ldrb	r3, [r7, #14]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d102      	bne.n	800462c <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004626:	7b3b      	ldrb	r3, [r7, #12]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d001      	beq.n	8004630 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e054      	b.n	80046da <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004640:	e01d      	b.n	800467e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d108      	bne.n	800465a <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004648:	7bbb      	ldrb	r3, [r7, #14]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d105      	bne.n	800465a <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800464e:	7b7b      	ldrb	r3, [r7, #13]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d102      	bne.n	800465a <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004654:	7b3b      	ldrb	r3, [r7, #12]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d001      	beq.n	800465e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e03d      	b.n	80046da <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2202      	movs	r2, #2
 8004662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2202      	movs	r2, #2
 800466a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2202      	movs	r2, #2
 800467a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <HAL_TIM_Encoder_Start+0xc2>
 8004684:	2b04      	cmp	r3, #4
 8004686:	d008      	beq.n	800469a <HAL_TIM_Encoder_Start+0xd2>
 8004688:	e00f      	b.n	80046aa <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2201      	movs	r2, #1
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fe62 	bl	800535c <TIM_CCxChannelCmd>
      break;
 8004698:	e016      	b.n	80046c8 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2201      	movs	r2, #1
 80046a0:	2104      	movs	r1, #4
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fe5a 	bl	800535c <TIM_CCxChannelCmd>
      break;
 80046a8:	e00e      	b.n	80046c8 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2201      	movs	r2, #1
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fe52 	bl	800535c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2201      	movs	r2, #1
 80046be:	2104      	movs	r1, #4
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fe4b 	bl	800535c <TIM_CCxChannelCmd>
      break;
 80046c6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d122      	bne.n	800473e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b02      	cmp	r3, #2
 8004704:	d11b      	bne.n	800473e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f06f 0202 	mvn.w	r2, #2
 800470e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fa75 	bl	8004c14 <HAL_TIM_IC_CaptureCallback>
 800472a:	e005      	b.n	8004738 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fa67 	bl	8004c00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fa78 	bl	8004c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b04      	cmp	r3, #4
 800474a:	d122      	bne.n	8004792 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b04      	cmp	r3, #4
 8004758:	d11b      	bne.n	8004792 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f06f 0204 	mvn.w	r2, #4
 8004762:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fa4b 	bl	8004c14 <HAL_TIM_IC_CaptureCallback>
 800477e:	e005      	b.n	800478c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fa3d 	bl	8004c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fa4e 	bl	8004c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b08      	cmp	r3, #8
 800479e:	d122      	bne.n	80047e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d11b      	bne.n	80047e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f06f 0208 	mvn.w	r2, #8
 80047b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2204      	movs	r2, #4
 80047bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 fa21 	bl	8004c14 <HAL_TIM_IC_CaptureCallback>
 80047d2:	e005      	b.n	80047e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fa13 	bl	8004c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fa24 	bl	8004c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d122      	bne.n	800483a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0310 	and.w	r3, r3, #16
 80047fe:	2b10      	cmp	r3, #16
 8004800:	d11b      	bne.n	800483a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f06f 0210 	mvn.w	r2, #16
 800480a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2208      	movs	r2, #8
 8004810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f9f7 	bl	8004c14 <HAL_TIM_IC_CaptureCallback>
 8004826:	e005      	b.n	8004834 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f9e9 	bl	8004c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f9fa 	bl	8004c28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b01      	cmp	r3, #1
 8004846:	d10e      	bne.n	8004866 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b01      	cmp	r3, #1
 8004854:	d107      	bne.n	8004866 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f06f 0201 	mvn.w	r2, #1
 800485e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7fb fe33 	bl	80004cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004870:	2b80      	cmp	r3, #128	; 0x80
 8004872:	d10e      	bne.n	8004892 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487e:	2b80      	cmp	r3, #128	; 0x80
 8004880:	d107      	bne.n	8004892 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800488a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 feb7 	bl	8005600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a0:	d10e      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ac:	2b80      	cmp	r3, #128	; 0x80
 80048ae:	d107      	bne.n	80048c0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 feaa 	bl	8005614 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b40      	cmp	r3, #64	; 0x40
 80048cc:	d10e      	bne.n	80048ec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d107      	bne.n	80048ec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f9a8 	bl	8004c3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d10e      	bne.n	8004918 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b20      	cmp	r3, #32
 8004906:	d107      	bne.n	8004918 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0220 	mvn.w	r2, #32
 8004910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fe6a 	bl	80055ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004926:	d10f      	bne.n	8004948 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004936:	d107      	bne.n	8004948 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fe70 	bl	8005628 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004956:	d10f      	bne.n	8004978 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004962:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004966:	d107      	bne.n	8004978 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fe62 	bl	800563c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004986:	d10f      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004996:	d107      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80049a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fe54 	bl	8005650 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049b6:	d10f      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049c6:	d107      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80049d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fe46 	bl	8005664 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049d8:	bf00      	nop
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e0fd      	b.n	8004bf6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b14      	cmp	r3, #20
 8004a06:	f200 80f0 	bhi.w	8004bea <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004a0a:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a10:	08004a65 	.word	0x08004a65
 8004a14:	08004beb 	.word	0x08004beb
 8004a18:	08004beb 	.word	0x08004beb
 8004a1c:	08004beb 	.word	0x08004beb
 8004a20:	08004aa5 	.word	0x08004aa5
 8004a24:	08004beb 	.word	0x08004beb
 8004a28:	08004beb 	.word	0x08004beb
 8004a2c:	08004beb 	.word	0x08004beb
 8004a30:	08004ae7 	.word	0x08004ae7
 8004a34:	08004beb 	.word	0x08004beb
 8004a38:	08004beb 	.word	0x08004beb
 8004a3c:	08004beb 	.word	0x08004beb
 8004a40:	08004b27 	.word	0x08004b27
 8004a44:	08004beb 	.word	0x08004beb
 8004a48:	08004beb 	.word	0x08004beb
 8004a4c:	08004beb 	.word	0x08004beb
 8004a50:	08004b69 	.word	0x08004b69
 8004a54:	08004beb 	.word	0x08004beb
 8004a58:	08004beb 	.word	0x08004beb
 8004a5c:	08004beb 	.word	0x08004beb
 8004a60:	08004ba9 	.word	0x08004ba9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 f980 	bl	8004d70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0208 	orr.w	r2, r2, #8
 8004a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0204 	bic.w	r2, r2, #4
 8004a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6999      	ldr	r1, [r3, #24]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	619a      	str	r2, [r3, #24]
      break;
 8004aa2:	e0a3      	b.n	8004bec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 f9f0 	bl	8004e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6999      	ldr	r1, [r3, #24]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	021a      	lsls	r2, r3, #8
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	619a      	str	r2, [r3, #24]
      break;
 8004ae4:	e082      	b.n	8004bec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fa59 	bl	8004fa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0208 	orr.w	r2, r2, #8
 8004b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0204 	bic.w	r2, r2, #4
 8004b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69d9      	ldr	r1, [r3, #28]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	61da      	str	r2, [r3, #28]
      break;
 8004b24:	e062      	b.n	8004bec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 fac1 	bl	80050b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69da      	ldr	r2, [r3, #28]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69d9      	ldr	r1, [r3, #28]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	021a      	lsls	r2, r3, #8
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	61da      	str	r2, [r3, #28]
      break;
 8004b66:	e041      	b.n	8004bec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fb2a 	bl	80051c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0208 	orr.w	r2, r2, #8
 8004b82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0204 	bic.w	r2, r2, #4
 8004b92:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004ba6:	e021      	b.n	8004bec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68b9      	ldr	r1, [r7, #8]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fb6e 	bl	8005290 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bc2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	021a      	lsls	r2, r3, #8
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004be8:	e000      	b.n	8004bec <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004bea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop

08004c00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a3c      	ldr	r2, [pc, #240]	; (8004d54 <TIM_Base_SetConfig+0x104>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00f      	beq.n	8004c88 <TIM_Base_SetConfig+0x38>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6e:	d00b      	beq.n	8004c88 <TIM_Base_SetConfig+0x38>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a39      	ldr	r2, [pc, #228]	; (8004d58 <TIM_Base_SetConfig+0x108>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d007      	beq.n	8004c88 <TIM_Base_SetConfig+0x38>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a38      	ldr	r2, [pc, #224]	; (8004d5c <TIM_Base_SetConfig+0x10c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_Base_SetConfig+0x38>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a37      	ldr	r2, [pc, #220]	; (8004d60 <TIM_Base_SetConfig+0x110>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d108      	bne.n	8004c9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a2d      	ldr	r2, [pc, #180]	; (8004d54 <TIM_Base_SetConfig+0x104>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01b      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca8:	d017      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a2a      	ldr	r2, [pc, #168]	; (8004d58 <TIM_Base_SetConfig+0x108>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a29      	ldr	r2, [pc, #164]	; (8004d5c <TIM_Base_SetConfig+0x10c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00f      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a28      	ldr	r2, [pc, #160]	; (8004d60 <TIM_Base_SetConfig+0x110>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a27      	ldr	r2, [pc, #156]	; (8004d64 <TIM_Base_SetConfig+0x114>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a26      	ldr	r2, [pc, #152]	; (8004d68 <TIM_Base_SetConfig+0x118>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_Base_SetConfig+0x8a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a25      	ldr	r2, [pc, #148]	; (8004d6c <TIM_Base_SetConfig+0x11c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d108      	bne.n	8004cec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a10      	ldr	r2, [pc, #64]	; (8004d54 <TIM_Base_SetConfig+0x104>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00f      	beq.n	8004d38 <TIM_Base_SetConfig+0xe8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a11      	ldr	r2, [pc, #68]	; (8004d60 <TIM_Base_SetConfig+0x110>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00b      	beq.n	8004d38 <TIM_Base_SetConfig+0xe8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a10      	ldr	r2, [pc, #64]	; (8004d64 <TIM_Base_SetConfig+0x114>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d007      	beq.n	8004d38 <TIM_Base_SetConfig+0xe8>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a0f      	ldr	r2, [pc, #60]	; (8004d68 <TIM_Base_SetConfig+0x118>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_Base_SetConfig+0xe8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a0e      	ldr	r2, [pc, #56]	; (8004d6c <TIM_Base_SetConfig+0x11c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d103      	bne.n	8004d40 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	615a      	str	r2, [r3, #20]
}
 8004d46:	bf00      	nop
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40012c00 	.word	0x40012c00
 8004d58:	40000400 	.word	0x40000400
 8004d5c:	40000800 	.word	0x40000800
 8004d60:	40013400 	.word	0x40013400
 8004d64:	40014000 	.word	0x40014000
 8004d68:	40014400 	.word	0x40014400
 8004d6c:	40014800 	.word	0x40014800

08004d70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f023 0201 	bic.w	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0303 	bic.w	r3, r3, #3
 8004daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f023 0302 	bic.w	r3, r3, #2
 8004dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a2c      	ldr	r2, [pc, #176]	; (8004e7c <TIM_OC1_SetConfig+0x10c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d00f      	beq.n	8004df0 <TIM_OC1_SetConfig+0x80>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a2b      	ldr	r2, [pc, #172]	; (8004e80 <TIM_OC1_SetConfig+0x110>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00b      	beq.n	8004df0 <TIM_OC1_SetConfig+0x80>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a2a      	ldr	r2, [pc, #168]	; (8004e84 <TIM_OC1_SetConfig+0x114>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d007      	beq.n	8004df0 <TIM_OC1_SetConfig+0x80>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a29      	ldr	r2, [pc, #164]	; (8004e88 <TIM_OC1_SetConfig+0x118>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d003      	beq.n	8004df0 <TIM_OC1_SetConfig+0x80>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a28      	ldr	r2, [pc, #160]	; (8004e8c <TIM_OC1_SetConfig+0x11c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10c      	bne.n	8004e0a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f023 0308 	bic.w	r3, r3, #8
 8004df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f023 0304 	bic.w	r3, r3, #4
 8004e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <TIM_OC1_SetConfig+0x10c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00f      	beq.n	8004e32 <TIM_OC1_SetConfig+0xc2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a1a      	ldr	r2, [pc, #104]	; (8004e80 <TIM_OC1_SetConfig+0x110>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00b      	beq.n	8004e32 <TIM_OC1_SetConfig+0xc2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a19      	ldr	r2, [pc, #100]	; (8004e84 <TIM_OC1_SetConfig+0x114>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d007      	beq.n	8004e32 <TIM_OC1_SetConfig+0xc2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a18      	ldr	r2, [pc, #96]	; (8004e88 <TIM_OC1_SetConfig+0x118>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d003      	beq.n	8004e32 <TIM_OC1_SetConfig+0xc2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a17      	ldr	r2, [pc, #92]	; (8004e8c <TIM_OC1_SetConfig+0x11c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d111      	bne.n	8004e56 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	621a      	str	r2, [r3, #32]
}
 8004e70:	bf00      	nop
 8004e72:	371c      	adds	r7, #28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	40012c00 	.word	0x40012c00
 8004e80:	40013400 	.word	0x40013400
 8004e84:	40014000 	.word	0x40014000
 8004e88:	40014400 	.word	0x40014400
 8004e8c:	40014800 	.word	0x40014800

08004e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	f023 0210 	bic.w	r2, r3, #16
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f023 0320 	bic.w	r3, r3, #32
 8004ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a28      	ldr	r2, [pc, #160]	; (8004f90 <TIM_OC2_SetConfig+0x100>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d003      	beq.n	8004efc <TIM_OC2_SetConfig+0x6c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a27      	ldr	r2, [pc, #156]	; (8004f94 <TIM_OC2_SetConfig+0x104>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d10d      	bne.n	8004f18 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a1d      	ldr	r2, [pc, #116]	; (8004f90 <TIM_OC2_SetConfig+0x100>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00f      	beq.n	8004f40 <TIM_OC2_SetConfig+0xb0>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a1c      	ldr	r2, [pc, #112]	; (8004f94 <TIM_OC2_SetConfig+0x104>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00b      	beq.n	8004f40 <TIM_OC2_SetConfig+0xb0>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a1b      	ldr	r2, [pc, #108]	; (8004f98 <TIM_OC2_SetConfig+0x108>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d007      	beq.n	8004f40 <TIM_OC2_SetConfig+0xb0>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a1a      	ldr	r2, [pc, #104]	; (8004f9c <TIM_OC2_SetConfig+0x10c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_OC2_SetConfig+0xb0>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a19      	ldr	r2, [pc, #100]	; (8004fa0 <TIM_OC2_SetConfig+0x110>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d113      	bne.n	8004f68 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40013400 	.word	0x40013400
 8004f98:	40014000 	.word	0x40014000
 8004f9c:	40014400 	.word	0x40014400
 8004fa0:	40014800 	.word	0x40014800

08004fa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a27      	ldr	r2, [pc, #156]	; (80050a0 <TIM_OC3_SetConfig+0xfc>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d003      	beq.n	800500e <TIM_OC3_SetConfig+0x6a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a26      	ldr	r2, [pc, #152]	; (80050a4 <TIM_OC3_SetConfig+0x100>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d10d      	bne.n	800502a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a1c      	ldr	r2, [pc, #112]	; (80050a0 <TIM_OC3_SetConfig+0xfc>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00f      	beq.n	8005052 <TIM_OC3_SetConfig+0xae>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <TIM_OC3_SetConfig+0x100>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00b      	beq.n	8005052 <TIM_OC3_SetConfig+0xae>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a1a      	ldr	r2, [pc, #104]	; (80050a8 <TIM_OC3_SetConfig+0x104>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d007      	beq.n	8005052 <TIM_OC3_SetConfig+0xae>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a19      	ldr	r2, [pc, #100]	; (80050ac <TIM_OC3_SetConfig+0x108>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d003      	beq.n	8005052 <TIM_OC3_SetConfig+0xae>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <TIM_OC3_SetConfig+0x10c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d113      	bne.n	800507a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	621a      	str	r2, [r3, #32]
}
 8005094:	bf00      	nop
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40013400 	.word	0x40013400
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800

080050b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	021b      	lsls	r3, r3, #8
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	031b      	lsls	r3, r3, #12
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a28      	ldr	r2, [pc, #160]	; (80051b4 <TIM_OC4_SetConfig+0x100>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_OC4_SetConfig+0x6c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a27      	ldr	r2, [pc, #156]	; (80051b8 <TIM_OC4_SetConfig+0x104>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d10d      	bne.n	800513c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	031b      	lsls	r3, r3, #12
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800513a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a1d      	ldr	r2, [pc, #116]	; (80051b4 <TIM_OC4_SetConfig+0x100>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00f      	beq.n	8005164 <TIM_OC4_SetConfig+0xb0>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a1c      	ldr	r2, [pc, #112]	; (80051b8 <TIM_OC4_SetConfig+0x104>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00b      	beq.n	8005164 <TIM_OC4_SetConfig+0xb0>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a1b      	ldr	r2, [pc, #108]	; (80051bc <TIM_OC4_SetConfig+0x108>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d007      	beq.n	8005164 <TIM_OC4_SetConfig+0xb0>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a1a      	ldr	r2, [pc, #104]	; (80051c0 <TIM_OC4_SetConfig+0x10c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d003      	beq.n	8005164 <TIM_OC4_SetConfig+0xb0>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a19      	ldr	r2, [pc, #100]	; (80051c4 <TIM_OC4_SetConfig+0x110>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d113      	bne.n	800518c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800516a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005172:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	019b      	lsls	r3, r3, #6
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	019b      	lsls	r3, r3, #6
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40012c00 	.word	0x40012c00
 80051b8:	40013400 	.word	0x40013400
 80051bc:	40014000 	.word	0x40014000
 80051c0:	40014400 	.word	0x40014400
 80051c4:	40014800 	.word	0x40014800

080051c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800520c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	041b      	lsls	r3, r3, #16
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a17      	ldr	r2, [pc, #92]	; (800527c <TIM_OC5_SetConfig+0xb4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00f      	beq.n	8005242 <TIM_OC5_SetConfig+0x7a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a16      	ldr	r2, [pc, #88]	; (8005280 <TIM_OC5_SetConfig+0xb8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00b      	beq.n	8005242 <TIM_OC5_SetConfig+0x7a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a15      	ldr	r2, [pc, #84]	; (8005284 <TIM_OC5_SetConfig+0xbc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d007      	beq.n	8005242 <TIM_OC5_SetConfig+0x7a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a14      	ldr	r2, [pc, #80]	; (8005288 <TIM_OC5_SetConfig+0xc0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_OC5_SetConfig+0x7a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a13      	ldr	r2, [pc, #76]	; (800528c <TIM_OC5_SetConfig+0xc4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d109      	bne.n	8005256 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005248:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	621a      	str	r2, [r3, #32]
}
 8005270:	bf00      	nop
 8005272:	371c      	adds	r7, #28
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	40012c00 	.word	0x40012c00
 8005280:	40013400 	.word	0x40013400
 8005284:	40014000 	.word	0x40014000
 8005288:	40014400 	.word	0x40014400
 800528c:	40014800 	.word	0x40014800

08005290 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	021b      	lsls	r3, r3, #8
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	051b      	lsls	r3, r3, #20
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a18      	ldr	r2, [pc, #96]	; (8005348 <TIM_OC6_SetConfig+0xb8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00f      	beq.n	800530c <TIM_OC6_SetConfig+0x7c>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a17      	ldr	r2, [pc, #92]	; (800534c <TIM_OC6_SetConfig+0xbc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00b      	beq.n	800530c <TIM_OC6_SetConfig+0x7c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a16      	ldr	r2, [pc, #88]	; (8005350 <TIM_OC6_SetConfig+0xc0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d007      	beq.n	800530c <TIM_OC6_SetConfig+0x7c>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a15      	ldr	r2, [pc, #84]	; (8005354 <TIM_OC6_SetConfig+0xc4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d003      	beq.n	800530c <TIM_OC6_SetConfig+0x7c>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a14      	ldr	r2, [pc, #80]	; (8005358 <TIM_OC6_SetConfig+0xc8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d109      	bne.n	8005320 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005312:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	029b      	lsls	r3, r3, #10
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	621a      	str	r2, [r3, #32]
}
 800533a:	bf00      	nop
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40012c00 	.word	0x40012c00
 800534c:	40013400 	.word	0x40013400
 8005350:	40014000 	.word	0x40014000
 8005354:	40014400 	.word	0x40014400
 8005358:	40014800 	.word	0x40014800

0800535c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f003 031f 	and.w	r3, r3, #31
 800536e:	2201      	movs	r2, #1
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a1a      	ldr	r2, [r3, #32]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	43db      	mvns	r3, r3
 800537e:	401a      	ands	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a1a      	ldr	r2, [r3, #32]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	fa01 f303 	lsl.w	r3, r1, r3
 8005394:	431a      	orrs	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	621a      	str	r2, [r3, #32]
}
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053bc:	2302      	movs	r3, #2
 80053be:	e065      	b.n	800548c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a2c      	ldr	r2, [pc, #176]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d004      	beq.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2b      	ldr	r2, [pc, #172]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d108      	bne.n	8005406 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800540c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005410:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1b      	ldr	r2, [pc, #108]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d018      	beq.n	8005460 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005436:	d013      	beq.n	8005460 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a18      	ldr	r2, [pc, #96]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00e      	beq.n	8005460 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a17      	ldr	r2, [pc, #92]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d009      	beq.n	8005460 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a12      	ldr	r2, [pc, #72]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d004      	beq.n	8005460 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a13      	ldr	r2, [pc, #76]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10c      	bne.n	800547a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005466:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	4313      	orrs	r3, r2
 8005470:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	40012c00 	.word	0x40012c00
 800549c:	40013400 	.word	0x40013400
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40000800 	.word	0x40000800
 80054a8:	40014000 	.word	0x40014000

080054ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e087      	b.n	80055d8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	041b      	lsls	r3, r3, #16
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a27      	ldr	r2, [pc, #156]	; (80055e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d004      	beq.n	8005556 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a25      	ldr	r2, [pc, #148]	; (80055e8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d106      	bne.n	8005564 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1e      	ldr	r2, [pc, #120]	; (80055e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d004      	beq.n	8005578 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1d      	ldr	r2, [pc, #116]	; (80055e8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d126      	bne.n	80055c6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	051b      	lsls	r3, r3, #20
 8005584:	4313      	orrs	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a0e      	ldr	r2, [pc, #56]	; (80055e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d004      	beq.n	80055b8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a0d      	ldr	r2, [pc, #52]	; (80055e8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d106      	bne.n	80055c6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	40013400 	.word	0x40013400

080055ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005688:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800568c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	b29a      	uxth	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b085      	sub	sp, #20
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056ae:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80056b2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	43db      	mvns	r3, r3
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	4013      	ands	r3, r2
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80056dc:	b084      	sub	sp, #16
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	f107 0014 	add.w	r0, r7, #20
 80056ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	b004      	add	sp, #16
 800571c:	4770      	bx	lr
	...

08005720 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005720:	b480      	push	{r7}
 8005722:	b09b      	sub	sp, #108	; 0x6c
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005746:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	78db      	ldrb	r3, [r3, #3]
 800574e:	2b03      	cmp	r3, #3
 8005750:	d81f      	bhi.n	8005792 <USB_ActivateEndpoint+0x72>
 8005752:	a201      	add	r2, pc, #4	; (adr r2, 8005758 <USB_ActivateEndpoint+0x38>)
 8005754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005758:	08005769 	.word	0x08005769
 800575c:	08005785 	.word	0x08005785
 8005760:	0800579b 	.word	0x0800579b
 8005764:	08005777 	.word	0x08005777
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005768:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800576c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005770:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005774:	e012      	b.n	800579c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005776:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800577a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800577e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005782:	e00b      	b.n	800579c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005784:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005788:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800578c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005790:	e004      	b.n	800579c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005798:	e000      	b.n	800579c <USB_ActivateEndpoint+0x7c>
      break;
 800579a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	441a      	add	r2, r3
 80057a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80057aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	b21b      	sxth	r3, r3
 80057ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d6:	b21a      	sxth	r2, r3
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	b21b      	sxth	r3, r3
 80057de:	4313      	orrs	r3, r2
 80057e0:	b21b      	sxth	r3, r3
 80057e2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	441a      	add	r2, r3
 80057f0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80057f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005804:	b29b      	uxth	r3, r3
 8005806:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	7b1b      	ldrb	r3, [r3, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	f040 8149 	bne.w	8005aa4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	785b      	ldrb	r3, [r3, #1]
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 8084 	beq.w	8005924 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005826:	b29b      	uxth	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	4413      	add	r3, r2
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	00da      	lsls	r2, r3, #3
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	88db      	ldrh	r3, [r3, #6]
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	b29b      	uxth	r3, r3
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	81fb      	strh	r3, [r7, #14]
 800585e:	89fb      	ldrh	r3, [r7, #14]
 8005860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01b      	beq.n	80058a0 <USB_ActivateEndpoint+0x180>
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	b29b      	uxth	r3, r3
 8005876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800587a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587e:	81bb      	strh	r3, [r7, #12]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	441a      	add	r2, r3
 800588a:	89bb      	ldrh	r3, [r7, #12]
 800588c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005898:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800589c:	b29b      	uxth	r3, r3
 800589e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	78db      	ldrb	r3, [r3, #3]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d020      	beq.n	80058ea <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058be:	813b      	strh	r3, [r7, #8]
 80058c0:	893b      	ldrh	r3, [r7, #8]
 80058c2:	f083 0320 	eor.w	r3, r3, #32
 80058c6:	813b      	strh	r3, [r7, #8]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	441a      	add	r2, r3
 80058d2:	893b      	ldrh	r3, [r7, #8]
 80058d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	8013      	strh	r3, [r2, #0]
 80058e8:	e27f      	b.n	8005dea <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005900:	817b      	strh	r3, [r7, #10]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	441a      	add	r2, r3
 800590c:	897b      	ldrh	r3, [r7, #10]
 800590e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800591a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591e:	b29b      	uxth	r3, r3
 8005920:	8013      	strh	r3, [r2, #0]
 8005922:	e262      	b.n	8005dea <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800592e:	b29b      	uxth	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	4413      	add	r3, r2
 8005936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	00da      	lsls	r2, r3, #3
 800593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005940:	4413      	add	r3, r2
 8005942:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005946:	62bb      	str	r3, [r7, #40]	; 0x28
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	88db      	ldrh	r3, [r3, #6]
 800594c:	085b      	lsrs	r3, r3, #1
 800594e:	b29b      	uxth	r3, r3
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005962:	b29b      	uxth	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	4413      	add	r3, r2
 800596a:	627b      	str	r3, [r7, #36]	; 0x24
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	00da      	lsls	r2, r3, #3
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	4413      	add	r3, r2
 8005976:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800597a:	623b      	str	r3, [r7, #32]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d112      	bne.n	80059aa <USB_ActivateEndpoint+0x28a>
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29b      	uxth	r3, r3
 800598a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800598e:	b29a      	uxth	r2, r3
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800599e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	801a      	strh	r2, [r3, #0]
 80059a8:	e02f      	b.n	8005a0a <USB_ActivateEndpoint+0x2ea>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	2b3e      	cmp	r3, #62	; 0x3e
 80059b0:	d813      	bhi.n	80059da <USB_ActivateEndpoint+0x2ba>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	663b      	str	r3, [r7, #96]	; 0x60
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <USB_ActivateEndpoint+0x2ac>
 80059c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059c8:	3301      	adds	r3, #1
 80059ca:	663b      	str	r3, [r7, #96]	; 0x60
 80059cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	029b      	lsls	r3, r3, #10
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	801a      	strh	r2, [r3, #0]
 80059d8:	e017      	b.n	8005a0a <USB_ActivateEndpoint+0x2ea>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	663b      	str	r3, [r7, #96]	; 0x60
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d102      	bne.n	80059f4 <USB_ActivateEndpoint+0x2d4>
 80059ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059f0:	3b01      	subs	r3, #1
 80059f2:	663b      	str	r3, [r7, #96]	; 0x60
 80059f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	029b      	lsls	r3, r3, #10
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	83fb      	strh	r3, [r7, #30]
 8005a18:	8bfb      	ldrh	r3, [r7, #30]
 8005a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d01b      	beq.n	8005a5a <USB_ActivateEndpoint+0x33a>
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a38:	83bb      	strh	r3, [r7, #28]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	441a      	add	r2, r3
 8005a44:	8bbb      	ldrh	r3, [r7, #28]
 8005a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a70:	837b      	strh	r3, [r7, #26]
 8005a72:	8b7b      	ldrh	r3, [r7, #26]
 8005a74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a78:	837b      	strh	r3, [r7, #26]
 8005a7a:	8b7b      	ldrh	r3, [r7, #26]
 8005a7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a80:	837b      	strh	r3, [r7, #26]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	441a      	add	r2, r3
 8005a8c:	8b7b      	ldrh	r3, [r7, #26]
 8005a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	8013      	strh	r3, [r2, #0]
 8005aa2:	e1a2      	b.n	8005dea <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aba:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	441a      	add	r2, r3
 8005ac8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005af0:	4413      	add	r3, r2
 8005af2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	00da      	lsls	r2, r3, #3
 8005afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b02:	657b      	str	r3, [r7, #84]	; 0x54
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	891b      	ldrh	r3, [r3, #8]
 8005b08:	085b      	lsrs	r3, r3, #1
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b12:	801a      	strh	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	653b      	str	r3, [r7, #80]	; 0x50
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	461a      	mov	r2, r3
 8005b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b24:	4413      	add	r3, r2
 8005b26:	653b      	str	r3, [r7, #80]	; 0x50
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	00da      	lsls	r2, r3, #3
 8005b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b30:	4413      	add	r3, r2
 8005b32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	895b      	ldrh	r3, [r3, #10]
 8005b3c:	085b      	lsrs	r3, r3, #1
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b46:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	785b      	ldrb	r3, [r3, #1]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f040 8091 	bne.w	8005c74 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005b60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d01b      	beq.n	8005ba2 <USB_ActivateEndpoint+0x482>
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b80:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	441a      	add	r2, r3
 8005b8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	873b      	strh	r3, [r7, #56]	; 0x38
 8005bb0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01b      	beq.n	8005bf2 <USB_ActivateEndpoint+0x4d2>
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	441a      	add	r2, r3
 8005bdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c08:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005c0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c10:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005c12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c18:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	441a      	add	r2, r3
 8005c24:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c50:	867b      	strh	r3, [r7, #50]	; 0x32
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	441a      	add	r2, r3
 8005c5c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	8013      	strh	r3, [r2, #0]
 8005c72:	e0ba      	b.n	8005dea <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005c84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01d      	beq.n	8005ccc <USB_ActivateEndpoint+0x5ac>
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	441a      	add	r2, r3
 8005cb4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005cdc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01d      	beq.n	8005d24 <USB_ActivateEndpoint+0x604>
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	441a      	add	r2, r3
 8005d0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	78db      	ldrb	r3, [r3, #3]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d024      	beq.n	8005d76 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d4a:	f083 0320 	eor.w	r3, r3, #32
 8005d4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	441a      	add	r2, r3
 8005d5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	8013      	strh	r3, [r2, #0]
 8005d74:	e01d      	b.n	8005db2 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d8c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	441a      	add	r2, r3
 8005d9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	441a      	add	r2, r3
 8005dd4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005dea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	376c      	adds	r7, #108	; 0x6c
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop

08005dfc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b08d      	sub	sp, #52	; 0x34
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	7b1b      	ldrb	r3, [r3, #12]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f040 808e 	bne.w	8005f2c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d044      	beq.n	8005ea2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	81bb      	strh	r3, [r7, #12]
 8005e26:	89bb      	ldrh	r3, [r7, #12]
 8005e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01b      	beq.n	8005e68 <USB_DeactivateEndpoint+0x6c>
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e46:	817b      	strh	r3, [r7, #10]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	441a      	add	r2, r3
 8005e52:	897b      	ldrh	r3, [r7, #10]
 8005e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7e:	813b      	strh	r3, [r7, #8]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	441a      	add	r2, r3
 8005e8a:	893b      	ldrh	r3, [r7, #8]
 8005e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	8013      	strh	r3, [r2, #0]
 8005ea0:	e192      	b.n	80061c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	827b      	strh	r3, [r7, #18]
 8005eb0:	8a7b      	ldrh	r3, [r7, #18]
 8005eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d01b      	beq.n	8005ef2 <USB_DeactivateEndpoint+0xf6>
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed0:	823b      	strh	r3, [r7, #16]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	441a      	add	r2, r3
 8005edc:	8a3b      	ldrh	r3, [r7, #16]
 8005ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f08:	81fb      	strh	r3, [r7, #14]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	441a      	add	r2, r3
 8005f14:	89fb      	ldrh	r3, [r7, #14]
 8005f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	8013      	strh	r3, [r2, #0]
 8005f2a:	e14d      	b.n	80061c8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	785b      	ldrb	r3, [r3, #1]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f040 80a5 	bne.w	8006080 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	843b      	strh	r3, [r7, #32]
 8005f44:	8c3b      	ldrh	r3, [r7, #32]
 8005f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d01b      	beq.n	8005f86 <USB_DeactivateEndpoint+0x18a>
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f64:	83fb      	strh	r3, [r7, #30]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	441a      	add	r2, r3
 8005f70:	8bfb      	ldrh	r3, [r7, #30]
 8005f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	83bb      	strh	r3, [r7, #28]
 8005f94:	8bbb      	ldrh	r3, [r7, #28]
 8005f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d01b      	beq.n	8005fd6 <USB_DeactivateEndpoint+0x1da>
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb4:	837b      	strh	r3, [r7, #26]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	441a      	add	r2, r3
 8005fc0:	8b7b      	ldrh	r3, [r7, #26]
 8005fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fec:	833b      	strh	r3, [r7, #24]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	441a      	add	r2, r3
 8005ff8:	8b3b      	ldrh	r3, [r7, #24]
 8005ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006006:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800600a:	b29b      	uxth	r3, r3
 800600c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006024:	82fb      	strh	r3, [r7, #22]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	441a      	add	r2, r3
 8006030:	8afb      	ldrh	r3, [r7, #22]
 8006032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800603a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800603e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006042:	b29b      	uxth	r3, r3
 8006044:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800605c:	82bb      	strh	r3, [r7, #20]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	441a      	add	r2, r3
 8006068:	8abb      	ldrh	r3, [r7, #20]
 800606a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800606e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800607a:	b29b      	uxth	r3, r3
 800607c:	8013      	strh	r3, [r2, #0]
 800607e:	e0a3      	b.n	80061c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800608e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d01b      	beq.n	80060d0 <USB_DeactivateEndpoint+0x2d4>
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	441a      	add	r2, r3
 80060ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80060bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80060de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80060e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01b      	beq.n	8006120 <USB_DeactivateEndpoint+0x324>
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060fe:	853b      	strh	r3, [r7, #40]	; 0x28
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	441a      	add	r2, r3
 800610a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800610c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006118:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800611c:	b29b      	uxth	r3, r3
 800611e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006136:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	441a      	add	r2, r3
 8006142:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800614c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006154:	b29b      	uxth	r3, r3
 8006156:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	b29b      	uxth	r3, r3
 8006166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800616a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800616e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	441a      	add	r2, r3
 800617a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800617c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618c:	b29b      	uxth	r3, r3
 800618e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	441a      	add	r2, r3
 80061b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3734      	adds	r7, #52	; 0x34
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b0c4      	sub	sp, #272	; 0x110
 80061da:	af00      	add	r7, sp, #0
 80061dc:	1d3b      	adds	r3, r7, #4
 80061de:	6018      	str	r0, [r3, #0]
 80061e0:	463b      	mov	r3, r7
 80061e2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061e4:	463b      	mov	r3, r7
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	f040 8566 	bne.w	8006cbc <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80061f0:	463b      	mov	r3, r7
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	463b      	mov	r3, r7
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d905      	bls.n	800620c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006200:	463b      	mov	r3, r7
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800620a:	e004      	b.n	8006216 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800620c:	463b      	mov	r3, r7
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006216:	463b      	mov	r3, r7
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	7b1b      	ldrb	r3, [r3, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d12c      	bne.n	800627a <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006220:	463b      	mov	r3, r7
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6959      	ldr	r1, [r3, #20]
 8006226:	463b      	mov	r3, r7
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	88da      	ldrh	r2, [r3, #6]
 800622c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006230:	b29b      	uxth	r3, r3
 8006232:	1d38      	adds	r0, r7, #4
 8006234:	6800      	ldr	r0, [r0, #0]
 8006236:	f001 fa43 	bl	80076c0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800623a:	1d3b      	adds	r3, r7, #4
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	1d3b      	adds	r3, r7, #4
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006248:	b29b      	uxth	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	4413      	add	r3, r2
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	463b      	mov	r3, r7
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	00da      	lsls	r2, r3, #3
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	4413      	add	r3, r2
 800625e:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006262:	f107 0310 	add.w	r3, r7, #16
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800626c:	b29a      	uxth	r2, r3
 800626e:	f107 0310 	add.w	r3, r7, #16
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	801a      	strh	r2, [r3, #0]
 8006276:	f000 bcec 	b.w	8006c52 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800627a:	463b      	mov	r3, r7
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	78db      	ldrb	r3, [r3, #3]
 8006280:	2b02      	cmp	r3, #2
 8006282:	f040 8356 	bne.w	8006932 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006286:	463b      	mov	r3, r7
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6a1a      	ldr	r2, [r3, #32]
 800628c:	463b      	mov	r3, r7
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	429a      	cmp	r2, r3
 8006294:	f240 82fa 	bls.w	800688c <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006298:	1d3b      	adds	r3, r7, #4
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	463b      	mov	r3, r7
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80062b6:	1d3b      	adds	r3, r7, #4
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	463b      	mov	r3, r7
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	441a      	add	r2, r3
 80062c4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80062c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d8:	b29b      	uxth	r3, r3
 80062da:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80062dc:	463b      	mov	r3, r7
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80062e6:	463b      	mov	r3, r7
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6a1a      	ldr	r2, [r3, #32]
 80062ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062f0:	1ad2      	subs	r2, r2, r3
 80062f2:	463b      	mov	r3, r7
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062f8:	1d3b      	adds	r3, r7, #4
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	463b      	mov	r3, r7
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 815e 	beq.w	80065d0 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006314:	1d3b      	adds	r3, r7, #4
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	637b      	str	r3, [r7, #52]	; 0x34
 800631a:	463b      	mov	r3, r7
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	785b      	ldrb	r3, [r3, #1]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d164      	bne.n	80063ee <USB_EPStartXfer+0x218>
 8006324:	1d3b      	adds	r3, r7, #4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800632a:	1d3b      	adds	r3, r7, #4
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006332:	b29b      	uxth	r3, r3
 8006334:	461a      	mov	r2, r3
 8006336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006338:	4413      	add	r3, r2
 800633a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800633c:	463b      	mov	r3, r7
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	00da      	lsls	r2, r3, #3
 8006344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006346:	4413      	add	r3, r2
 8006348:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800634c:	62bb      	str	r3, [r7, #40]	; 0x28
 800634e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006352:	2b00      	cmp	r3, #0
 8006354:	d112      	bne.n	800637c <USB_EPStartXfer+0x1a6>
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006360:	b29a      	uxth	r2, r3
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006374:	b29a      	uxth	r2, r3
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	801a      	strh	r2, [r3, #0]
 800637a:	e054      	b.n	8006426 <USB_EPStartXfer+0x250>
 800637c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006380:	2b3e      	cmp	r3, #62	; 0x3e
 8006382:	d817      	bhi.n	80063b4 <USB_EPStartXfer+0x1de>
 8006384:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006388:	085b      	lsrs	r3, r3, #1
 800638a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800638e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d004      	beq.n	80063a4 <USB_EPStartXfer+0x1ce>
 800639a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800639e:	3301      	adds	r3, #1
 80063a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	029b      	lsls	r3, r3, #10
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b0:	801a      	strh	r2, [r3, #0]
 80063b2:	e038      	b.n	8006426 <USB_EPStartXfer+0x250>
 80063b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063b8:	095b      	lsrs	r3, r3, #5
 80063ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063c2:	f003 031f 	and.w	r3, r3, #31
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d104      	bne.n	80063d4 <USB_EPStartXfer+0x1fe>
 80063ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ce:	3b01      	subs	r3, #1
 80063d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d8:	b29b      	uxth	r3, r3
 80063da:	029b      	lsls	r3, r3, #10
 80063dc:	b29b      	uxth	r3, r3
 80063de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	801a      	strh	r2, [r3, #0]
 80063ec:	e01b      	b.n	8006426 <USB_EPStartXfer+0x250>
 80063ee:	463b      	mov	r3, r7
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	785b      	ldrb	r3, [r3, #1]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d116      	bne.n	8006426 <USB_EPStartXfer+0x250>
 80063f8:	1d3b      	adds	r3, r7, #4
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006400:	b29b      	uxth	r3, r3
 8006402:	461a      	mov	r2, r3
 8006404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006406:	4413      	add	r3, r2
 8006408:	637b      	str	r3, [r7, #52]	; 0x34
 800640a:	463b      	mov	r3, r7
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	00da      	lsls	r2, r3, #3
 8006412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006414:	4413      	add	r3, r2
 8006416:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800641a:	633b      	str	r3, [r7, #48]	; 0x30
 800641c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006420:	b29a      	uxth	r2, r3
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006426:	463b      	mov	r3, r7
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	895b      	ldrh	r3, [r3, #10]
 800642c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006430:	463b      	mov	r3, r7
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6959      	ldr	r1, [r3, #20]
 8006436:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800643a:	b29b      	uxth	r3, r3
 800643c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006440:	1d38      	adds	r0, r7, #4
 8006442:	6800      	ldr	r0, [r0, #0]
 8006444:	f001 f93c 	bl	80076c0 <USB_WritePMA>
            ep->xfer_buff += len;
 8006448:	463b      	mov	r3, r7
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	695a      	ldr	r2, [r3, #20]
 800644e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006452:	441a      	add	r2, r3
 8006454:	463b      	mov	r3, r7
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800645a:	463b      	mov	r3, r7
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6a1a      	ldr	r2, [r3, #32]
 8006460:	463b      	mov	r3, r7
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	429a      	cmp	r2, r3
 8006468:	d90e      	bls.n	8006488 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800646a:	463b      	mov	r3, r7
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006474:	463b      	mov	r3, r7
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6a1a      	ldr	r2, [r3, #32]
 800647a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800647e:	1ad2      	subs	r2, r2, r3
 8006480:	463b      	mov	r3, r7
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	621a      	str	r2, [r3, #32]
 8006486:	e008      	b.n	800649a <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006488:	463b      	mov	r3, r7
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006492:	463b      	mov	r3, r7
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2200      	movs	r2, #0
 8006498:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800649a:	463b      	mov	r3, r7
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	785b      	ldrb	r3, [r3, #1]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d164      	bne.n	800656e <USB_EPStartXfer+0x398>
 80064a4:	1d3b      	adds	r3, r7, #4
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	61fb      	str	r3, [r7, #28]
 80064aa:	1d3b      	adds	r3, r7, #4
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	461a      	mov	r2, r3
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	4413      	add	r3, r2
 80064ba:	61fb      	str	r3, [r7, #28]
 80064bc:	463b      	mov	r3, r7
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	00da      	lsls	r2, r3, #3
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064cc:	61bb      	str	r3, [r7, #24]
 80064ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d112      	bne.n	80064fc <USB_EPStartXfer+0x326>
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	801a      	strh	r2, [r3, #0]
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	801a      	strh	r2, [r3, #0]
 80064fa:	e057      	b.n	80065ac <USB_EPStartXfer+0x3d6>
 80064fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006500:	2b3e      	cmp	r3, #62	; 0x3e
 8006502:	d817      	bhi.n	8006534 <USB_EPStartXfer+0x35e>
 8006504:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006508:	085b      	lsrs	r3, r3, #1
 800650a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800650e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d004      	beq.n	8006524 <USB_EPStartXfer+0x34e>
 800651a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800651e:	3301      	adds	r3, #1
 8006520:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006524:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006528:	b29b      	uxth	r3, r3
 800652a:	029b      	lsls	r3, r3, #10
 800652c:	b29a      	uxth	r2, r3
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	801a      	strh	r2, [r3, #0]
 8006532:	e03b      	b.n	80065ac <USB_EPStartXfer+0x3d6>
 8006534:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800653e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006542:	f003 031f 	and.w	r3, r3, #31
 8006546:	2b00      	cmp	r3, #0
 8006548:	d104      	bne.n	8006554 <USB_EPStartXfer+0x37e>
 800654a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800654e:	3b01      	subs	r3, #1
 8006550:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006554:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006558:	b29b      	uxth	r3, r3
 800655a:	029b      	lsls	r3, r3, #10
 800655c:	b29b      	uxth	r3, r3
 800655e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006566:	b29a      	uxth	r2, r3
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	801a      	strh	r2, [r3, #0]
 800656c:	e01e      	b.n	80065ac <USB_EPStartXfer+0x3d6>
 800656e:	463b      	mov	r3, r7
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	785b      	ldrb	r3, [r3, #1]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d119      	bne.n	80065ac <USB_EPStartXfer+0x3d6>
 8006578:	1d3b      	adds	r3, r7, #4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
 800657e:	1d3b      	adds	r3, r7, #4
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006586:	b29b      	uxth	r3, r3
 8006588:	461a      	mov	r2, r3
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	4413      	add	r3, r2
 800658e:	627b      	str	r3, [r7, #36]	; 0x24
 8006590:	463b      	mov	r3, r7
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	00da      	lsls	r2, r3, #3
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	4413      	add	r3, r2
 800659c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065a0:	623b      	str	r3, [r7, #32]
 80065a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80065ac:	463b      	mov	r3, r7
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	891b      	ldrh	r3, [r3, #8]
 80065b2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065b6:	463b      	mov	r3, r7
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6959      	ldr	r1, [r3, #20]
 80065bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80065c6:	1d38      	adds	r0, r7, #4
 80065c8:	6800      	ldr	r0, [r0, #0]
 80065ca:	f001 f879 	bl	80076c0 <USB_WritePMA>
 80065ce:	e340      	b.n	8006c52 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065d0:	463b      	mov	r3, r7
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	785b      	ldrb	r3, [r3, #1]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d164      	bne.n	80066a4 <USB_EPStartXfer+0x4ce>
 80065da:	1d3b      	adds	r3, r7, #4
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065e0:	1d3b      	adds	r3, r7, #4
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	461a      	mov	r2, r3
 80065ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ee:	4413      	add	r3, r2
 80065f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065f2:	463b      	mov	r3, r7
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	00da      	lsls	r2, r3, #3
 80065fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fc:	4413      	add	r3, r2
 80065fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006602:	64bb      	str	r3, [r7, #72]	; 0x48
 8006604:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006608:	2b00      	cmp	r3, #0
 800660a:	d112      	bne.n	8006632 <USB_EPStartXfer+0x45c>
 800660c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	b29b      	uxth	r3, r3
 8006612:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006616:	b29a      	uxth	r2, r3
 8006618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800661a:	801a      	strh	r2, [r3, #0]
 800661c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	b29b      	uxth	r3, r3
 8006622:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006626:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800662a:	b29a      	uxth	r2, r3
 800662c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800662e:	801a      	strh	r2, [r3, #0]
 8006630:	e057      	b.n	80066e2 <USB_EPStartXfer+0x50c>
 8006632:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006636:	2b3e      	cmp	r3, #62	; 0x3e
 8006638:	d817      	bhi.n	800666a <USB_EPStartXfer+0x494>
 800663a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006644:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	d004      	beq.n	800665a <USB_EPStartXfer+0x484>
 8006650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006654:	3301      	adds	r3, #1
 8006656:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800665a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800665e:	b29b      	uxth	r3, r3
 8006660:	029b      	lsls	r3, r3, #10
 8006662:	b29a      	uxth	r2, r3
 8006664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006666:	801a      	strh	r2, [r3, #0]
 8006668:	e03b      	b.n	80066e2 <USB_EPStartXfer+0x50c>
 800666a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800666e:	095b      	lsrs	r3, r3, #5
 8006670:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006674:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006678:	f003 031f 	and.w	r3, r3, #31
 800667c:	2b00      	cmp	r3, #0
 800667e:	d104      	bne.n	800668a <USB_EPStartXfer+0x4b4>
 8006680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006684:	3b01      	subs	r3, #1
 8006686:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800668a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800668e:	b29b      	uxth	r3, r3
 8006690:	029b      	lsls	r3, r3, #10
 8006692:	b29b      	uxth	r3, r3
 8006694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800669c:	b29a      	uxth	r2, r3
 800669e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a0:	801a      	strh	r2, [r3, #0]
 80066a2:	e01e      	b.n	80066e2 <USB_EPStartXfer+0x50c>
 80066a4:	463b      	mov	r3, r7
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	785b      	ldrb	r3, [r3, #1]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d119      	bne.n	80066e2 <USB_EPStartXfer+0x50c>
 80066ae:	1d3b      	adds	r3, r7, #4
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	657b      	str	r3, [r7, #84]	; 0x54
 80066b4:	1d3b      	adds	r3, r7, #4
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066bc:	b29b      	uxth	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066c2:	4413      	add	r3, r2
 80066c4:	657b      	str	r3, [r7, #84]	; 0x54
 80066c6:	463b      	mov	r3, r7
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	00da      	lsls	r2, r3, #3
 80066ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066d0:	4413      	add	r3, r2
 80066d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066d6:	653b      	str	r3, [r7, #80]	; 0x50
 80066d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066dc:	b29a      	uxth	r2, r3
 80066de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066e2:	463b      	mov	r3, r7
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	891b      	ldrh	r3, [r3, #8]
 80066e8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066ec:	463b      	mov	r3, r7
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6959      	ldr	r1, [r3, #20]
 80066f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80066fc:	1d38      	adds	r0, r7, #4
 80066fe:	6800      	ldr	r0, [r0, #0]
 8006700:	f000 ffde 	bl	80076c0 <USB_WritePMA>
            ep->xfer_buff += len;
 8006704:	463b      	mov	r3, r7
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695a      	ldr	r2, [r3, #20]
 800670a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800670e:	441a      	add	r2, r3
 8006710:	463b      	mov	r3, r7
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006716:	463b      	mov	r3, r7
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6a1a      	ldr	r2, [r3, #32]
 800671c:	463b      	mov	r3, r7
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	429a      	cmp	r2, r3
 8006724:	d90e      	bls.n	8006744 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8006726:	463b      	mov	r3, r7
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006730:	463b      	mov	r3, r7
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6a1a      	ldr	r2, [r3, #32]
 8006736:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800673a:	1ad2      	subs	r2, r2, r3
 800673c:	463b      	mov	r3, r7
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	621a      	str	r2, [r3, #32]
 8006742:	e008      	b.n	8006756 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006744:	463b      	mov	r3, r7
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800674e:	463b      	mov	r3, r7
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2200      	movs	r2, #0
 8006754:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006756:	1d3b      	adds	r3, r7, #4
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	647b      	str	r3, [r7, #68]	; 0x44
 800675c:	463b      	mov	r3, r7
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	785b      	ldrb	r3, [r3, #1]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d164      	bne.n	8006830 <USB_EPStartXfer+0x65a>
 8006766:	1d3b      	adds	r3, r7, #4
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800676c:	1d3b      	adds	r3, r7, #4
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006774:	b29b      	uxth	r3, r3
 8006776:	461a      	mov	r2, r3
 8006778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677a:	4413      	add	r3, r2
 800677c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800677e:	463b      	mov	r3, r7
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	00da      	lsls	r2, r3, #3
 8006786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006788:	4413      	add	r3, r2
 800678a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800678e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006790:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006794:	2b00      	cmp	r3, #0
 8006796:	d112      	bne.n	80067be <USB_EPStartXfer+0x5e8>
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	b29b      	uxth	r3, r3
 800679e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ba:	801a      	strh	r2, [r3, #0]
 80067bc:	e054      	b.n	8006868 <USB_EPStartXfer+0x692>
 80067be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067c2:	2b3e      	cmp	r3, #62	; 0x3e
 80067c4:	d817      	bhi.n	80067f6 <USB_EPStartXfer+0x620>
 80067c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067ca:	085b      	lsrs	r3, r3, #1
 80067cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d004      	beq.n	80067e6 <USB_EPStartXfer+0x610>
 80067dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067e0:	3301      	adds	r3, #1
 80067e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	029b      	lsls	r3, r3, #10
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f2:	801a      	strh	r2, [r3, #0]
 80067f4:	e038      	b.n	8006868 <USB_EPStartXfer+0x692>
 80067f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067fa:	095b      	lsrs	r3, r3, #5
 80067fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006800:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006804:	f003 031f 	and.w	r3, r3, #31
 8006808:	2b00      	cmp	r3, #0
 800680a:	d104      	bne.n	8006816 <USB_EPStartXfer+0x640>
 800680c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006810:	3b01      	subs	r3, #1
 8006812:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006816:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800681a:	b29b      	uxth	r3, r3
 800681c:	029b      	lsls	r3, r3, #10
 800681e:	b29b      	uxth	r3, r3
 8006820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006828:	b29a      	uxth	r2, r3
 800682a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682c:	801a      	strh	r2, [r3, #0]
 800682e:	e01b      	b.n	8006868 <USB_EPStartXfer+0x692>
 8006830:	463b      	mov	r3, r7
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	785b      	ldrb	r3, [r3, #1]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d116      	bne.n	8006868 <USB_EPStartXfer+0x692>
 800683a:	1d3b      	adds	r3, r7, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006842:	b29b      	uxth	r3, r3
 8006844:	461a      	mov	r2, r3
 8006846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006848:	4413      	add	r3, r2
 800684a:	647b      	str	r3, [r7, #68]	; 0x44
 800684c:	463b      	mov	r3, r7
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	00da      	lsls	r2, r3, #3
 8006854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006856:	4413      	add	r3, r2
 8006858:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800685c:	643b      	str	r3, [r7, #64]	; 0x40
 800685e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006862:	b29a      	uxth	r2, r3
 8006864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006866:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006868:	463b      	mov	r3, r7
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	895b      	ldrh	r3, [r3, #10]
 800686e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006872:	463b      	mov	r3, r7
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6959      	ldr	r1, [r3, #20]
 8006878:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800687c:	b29b      	uxth	r3, r3
 800687e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006882:	1d38      	adds	r0, r7, #4
 8006884:	6800      	ldr	r0, [r0, #0]
 8006886:	f000 ff1b 	bl	80076c0 <USB_WritePMA>
 800688a:	e1e2      	b.n	8006c52 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 800688c:	463b      	mov	r3, r7
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006896:	1d3b      	adds	r3, r7, #4
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	463b      	mov	r3, r7
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80068ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80068b4:	1d3b      	adds	r3, r7, #4
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	463b      	mov	r3, r7
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	441a      	add	r2, r3
 80068c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80068c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068da:	1d3b      	adds	r3, r7, #4
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	663b      	str	r3, [r7, #96]	; 0x60
 80068e0:	1d3b      	adds	r3, r7, #4
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	461a      	mov	r2, r3
 80068ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068ee:	4413      	add	r3, r2
 80068f0:	663b      	str	r3, [r7, #96]	; 0x60
 80068f2:	463b      	mov	r3, r7
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	00da      	lsls	r2, r3, #3
 80068fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068fc:	4413      	add	r3, r2
 80068fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006902:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006904:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006908:	b29a      	uxth	r2, r3
 800690a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800690c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800690e:	463b      	mov	r3, r7
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	891b      	ldrh	r3, [r3, #8]
 8006914:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006918:	463b      	mov	r3, r7
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6959      	ldr	r1, [r3, #20]
 800691e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006922:	b29b      	uxth	r3, r3
 8006924:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006928:	1d38      	adds	r0, r7, #4
 800692a:	6800      	ldr	r0, [r0, #0]
 800692c:	f000 fec8 	bl	80076c0 <USB_WritePMA>
 8006930:	e18f      	b.n	8006c52 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006932:	1d3b      	adds	r3, r7, #4
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	463b      	mov	r3, r7
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	b29b      	uxth	r3, r3
 8006944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 808f 	beq.w	8006a6c <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800694e:	1d3b      	adds	r3, r7, #4
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	67bb      	str	r3, [r7, #120]	; 0x78
 8006954:	463b      	mov	r3, r7
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	785b      	ldrb	r3, [r3, #1]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d164      	bne.n	8006a28 <USB_EPStartXfer+0x852>
 800695e:	1d3b      	adds	r3, r7, #4
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	673b      	str	r3, [r7, #112]	; 0x70
 8006964:	1d3b      	adds	r3, r7, #4
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800696c:	b29b      	uxth	r3, r3
 800696e:	461a      	mov	r2, r3
 8006970:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006972:	4413      	add	r3, r2
 8006974:	673b      	str	r3, [r7, #112]	; 0x70
 8006976:	463b      	mov	r3, r7
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	00da      	lsls	r2, r3, #3
 800697e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006980:	4413      	add	r3, r2
 8006982:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006986:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006988:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800698c:	2b00      	cmp	r3, #0
 800698e:	d112      	bne.n	80069b6 <USB_EPStartXfer+0x7e0>
 8006990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	b29b      	uxth	r3, r3
 8006996:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800699a:	b29a      	uxth	r2, r3
 800699c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699e:	801a      	strh	r2, [r3, #0]
 80069a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b2:	801a      	strh	r2, [r3, #0]
 80069b4:	e054      	b.n	8006a60 <USB_EPStartXfer+0x88a>
 80069b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069ba:	2b3e      	cmp	r3, #62	; 0x3e
 80069bc:	d817      	bhi.n	80069ee <USB_EPStartXfer+0x818>
 80069be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <USB_EPStartXfer+0x808>
 80069d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d8:	3301      	adds	r3, #1
 80069da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	029b      	lsls	r3, r3, #10
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ea:	801a      	strh	r2, [r3, #0]
 80069ec:	e038      	b.n	8006a60 <USB_EPStartXfer+0x88a>
 80069ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069f2:	095b      	lsrs	r3, r3, #5
 80069f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069fc:	f003 031f 	and.w	r3, r3, #31
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <USB_EPStartXfer+0x838>
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	029b      	lsls	r3, r3, #10
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a24:	801a      	strh	r2, [r3, #0]
 8006a26:	e01b      	b.n	8006a60 <USB_EPStartXfer+0x88a>
 8006a28:	463b      	mov	r3, r7
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	785b      	ldrb	r3, [r3, #1]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d116      	bne.n	8006a60 <USB_EPStartXfer+0x88a>
 8006a32:	1d3b      	adds	r3, r7, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a40:	4413      	add	r3, r2
 8006a42:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a44:	463b      	mov	r3, r7
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	00da      	lsls	r2, r3, #3
 8006a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a4e:	4413      	add	r3, r2
 8006a50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a54:	677b      	str	r3, [r7, #116]	; 0x74
 8006a56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a5e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006a60:	463b      	mov	r3, r7
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	895b      	ldrh	r3, [r3, #10]
 8006a66:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006a6a:	e097      	b.n	8006b9c <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	785b      	ldrb	r3, [r3, #1]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d168      	bne.n	8006b48 <USB_EPStartXfer+0x972>
 8006a76:	1d3b      	adds	r3, r7, #4
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a7e:	1d3b      	adds	r3, r7, #4
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a8e:	4413      	add	r3, r2
 8006a90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a94:	463b      	mov	r3, r7
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	00da      	lsls	r2, r3, #3
 8006a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006aa6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006aa8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d112      	bne.n	8006ad6 <USB_EPStartXfer+0x900>
 8006ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006abe:	801a      	strh	r2, [r3, #0]
 8006ac0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ad2:	801a      	strh	r2, [r3, #0]
 8006ad4:	e05d      	b.n	8006b92 <USB_EPStartXfer+0x9bc>
 8006ad6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ada:	2b3e      	cmp	r3, #62	; 0x3e
 8006adc:	d817      	bhi.n	8006b0e <USB_EPStartXfer+0x938>
 8006ade:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ae2:	085b      	lsrs	r3, r3, #1
 8006ae4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ae8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d004      	beq.n	8006afe <USB_EPStartXfer+0x928>
 8006af4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006af8:	3301      	adds	r3, #1
 8006afa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006afe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	029b      	lsls	r3, r3, #10
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b0a:	801a      	strh	r2, [r3, #0]
 8006b0c:	e041      	b.n	8006b92 <USB_EPStartXfer+0x9bc>
 8006b0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b1c:	f003 031f 	and.w	r3, r3, #31
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d104      	bne.n	8006b2e <USB_EPStartXfer+0x958>
 8006b24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	029b      	lsls	r3, r3, #10
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b44:	801a      	strh	r2, [r3, #0]
 8006b46:	e024      	b.n	8006b92 <USB_EPStartXfer+0x9bc>
 8006b48:	463b      	mov	r3, r7
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	785b      	ldrb	r3, [r3, #1]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d11f      	bne.n	8006b92 <USB_EPStartXfer+0x9bc>
 8006b52:	1d3b      	adds	r3, r7, #4
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b5a:	1d3b      	adds	r3, r7, #4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	461a      	mov	r2, r3
 8006b66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b70:	463b      	mov	r3, r7
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	00da      	lsls	r2, r3, #3
 8006b78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b90:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b92:	463b      	mov	r3, r7
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	891b      	ldrh	r3, [r3, #8]
 8006b98:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b9c:	463b      	mov	r3, r7
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6959      	ldr	r1, [r3, #20]
 8006ba2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006bac:	1d38      	adds	r0, r7, #4
 8006bae:	6800      	ldr	r0, [r0, #0]
 8006bb0:	f000 fd86 	bl	80076c0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006bb4:	463b      	mov	r3, r7
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	785b      	ldrb	r3, [r3, #1]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d122      	bne.n	8006c04 <USB_EPStartXfer+0xa2e>
 8006bbe:	1d3b      	adds	r3, r7, #4
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	463b      	mov	r3, r7
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006bdc:	1d3b      	adds	r3, r7, #4
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	463b      	mov	r3, r7
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	441a      	add	r2, r3
 8006bea:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	8013      	strh	r3, [r2, #0]
 8006c02:	e026      	b.n	8006c52 <USB_EPStartXfer+0xa7c>
 8006c04:	463b      	mov	r3, r7
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	785b      	ldrb	r3, [r3, #1]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d121      	bne.n	8006c52 <USB_EPStartXfer+0xa7c>
 8006c0e:	1d3b      	adds	r3, r7, #4
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	463b      	mov	r3, r7
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4413      	add	r3, r2
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c28:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006c2c:	1d3b      	adds	r3, r7, #4
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	463b      	mov	r3, r7
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	441a      	add	r2, r3
 8006c3a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006c52:	1d3b      	adds	r3, r7, #4
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	463b      	mov	r3, r7
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	f107 020e 	add.w	r2, r7, #14
 8006c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c70:	8013      	strh	r3, [r2, #0]
 8006c72:	f107 030e 	add.w	r3, r7, #14
 8006c76:	f107 020e 	add.w	r2, r7, #14
 8006c7a:	8812      	ldrh	r2, [r2, #0]
 8006c7c:	f082 0210 	eor.w	r2, r2, #16
 8006c80:	801a      	strh	r2, [r3, #0]
 8006c82:	f107 030e 	add.w	r3, r7, #14
 8006c86:	f107 020e 	add.w	r2, r7, #14
 8006c8a:	8812      	ldrh	r2, [r2, #0]
 8006c8c:	f082 0220 	eor.w	r2, r2, #32
 8006c90:	801a      	strh	r2, [r3, #0]
 8006c92:	1d3b      	adds	r3, r7, #4
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	463b      	mov	r3, r7
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	441a      	add	r2, r3
 8006ca0:	f107 030e 	add.w	r3, r7, #14
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	8013      	strh	r3, [r2, #0]
 8006cba:	e3b5      	b.n	8007428 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006cbc:	463b      	mov	r3, r7
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	7b1b      	ldrb	r3, [r3, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f040 8090 	bne.w	8006de8 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006cc8:	463b      	mov	r3, r7
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699a      	ldr	r2, [r3, #24]
 8006cce:	463b      	mov	r3, r7
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d90e      	bls.n	8006cf6 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006cd8:	463b      	mov	r3, r7
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006ce2:	463b      	mov	r3, r7
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	699a      	ldr	r2, [r3, #24]
 8006ce8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cec:	1ad2      	subs	r2, r2, r3
 8006cee:	463b      	mov	r3, r7
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	619a      	str	r2, [r3, #24]
 8006cf4:	e008      	b.n	8006d08 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006cf6:	463b      	mov	r3, r7
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006d00:	463b      	mov	r3, r7
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2200      	movs	r2, #0
 8006d06:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006d08:	1d3b      	adds	r3, r7, #4
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d10:	1d3b      	adds	r3, r7, #4
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d20:	4413      	add	r3, r2
 8006d22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d26:	463b      	mov	r3, r7
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	00da      	lsls	r2, r3, #3
 8006d2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d32:	4413      	add	r3, r2
 8006d34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d116      	bne.n	8006d72 <USB_EPStartXfer+0xb9c>
 8006d44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d56:	801a      	strh	r2, [r3, #0]
 8006d58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d6e:	801a      	strh	r2, [r3, #0]
 8006d70:	e32c      	b.n	80073cc <USB_EPStartXfer+0x11f6>
 8006d72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d76:	2b3e      	cmp	r3, #62	; 0x3e
 8006d78:	d818      	bhi.n	8006dac <USB_EPStartXfer+0xbd6>
 8006d7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d7e:	085b      	lsrs	r3, r3, #1
 8006d80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d004      	beq.n	8006d9a <USB_EPStartXfer+0xbc4>
 8006d90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d94:	3301      	adds	r3, #1
 8006d96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	029b      	lsls	r3, r3, #10
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006da8:	801a      	strh	r2, [r3, #0]
 8006daa:	e30f      	b.n	80073cc <USB_EPStartXfer+0x11f6>
 8006dac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006db0:	095b      	lsrs	r3, r3, #5
 8006db2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006db6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dba:	f003 031f 	and.w	r3, r3, #31
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d104      	bne.n	8006dcc <USB_EPStartXfer+0xbf6>
 8006dc2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006dcc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	029b      	lsls	r3, r3, #10
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006de4:	801a      	strh	r2, [r3, #0]
 8006de6:	e2f1      	b.n	80073cc <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006de8:	463b      	mov	r3, r7
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	78db      	ldrb	r3, [r3, #3]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	f040 818f 	bne.w	8007112 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006df4:	463b      	mov	r3, r7
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	785b      	ldrb	r3, [r3, #1]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d175      	bne.n	8006eea <USB_EPStartXfer+0xd14>
 8006dfe:	1d3b      	adds	r3, r7, #4
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e06:	1d3b      	adds	r3, r7, #4
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e16:	4413      	add	r3, r2
 8006e18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e1c:	463b      	mov	r3, r7
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	00da      	lsls	r2, r3, #3
 8006e24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e28:	4413      	add	r3, r2
 8006e2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e32:	463b      	mov	r3, r7
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d116      	bne.n	8006e6a <USB_EPStartXfer+0xc94>
 8006e3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e66:	801a      	strh	r2, [r3, #0]
 8006e68:	e065      	b.n	8006f36 <USB_EPStartXfer+0xd60>
 8006e6a:	463b      	mov	r3, r7
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	2b3e      	cmp	r3, #62	; 0x3e
 8006e72:	d81a      	bhi.n	8006eaa <USB_EPStartXfer+0xcd4>
 8006e74:	463b      	mov	r3, r7
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	085b      	lsrs	r3, r3, #1
 8006e7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e80:	463b      	mov	r3, r7
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d004      	beq.n	8006e98 <USB_EPStartXfer+0xcc2>
 8006e8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e92:	3301      	adds	r3, #1
 8006e94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	029b      	lsls	r3, r3, #10
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ea6:	801a      	strh	r2, [r3, #0]
 8006ea8:	e045      	b.n	8006f36 <USB_EPStartXfer+0xd60>
 8006eaa:	463b      	mov	r3, r7
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	095b      	lsrs	r3, r3, #5
 8006eb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006eb6:	463b      	mov	r3, r7
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	f003 031f 	and.w	r3, r3, #31
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d104      	bne.n	8006ece <USB_EPStartXfer+0xcf8>
 8006ec4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ece:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	029b      	lsls	r3, r3, #10
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ee6:	801a      	strh	r2, [r3, #0]
 8006ee8:	e025      	b.n	8006f36 <USB_EPStartXfer+0xd60>
 8006eea:	463b      	mov	r3, r7
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	785b      	ldrb	r3, [r3, #1]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d120      	bne.n	8006f36 <USB_EPStartXfer+0xd60>
 8006ef4:	1d3b      	adds	r3, r7, #4
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006efc:	1d3b      	adds	r3, r7, #4
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	461a      	mov	r2, r3
 8006f08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f12:	463b      	mov	r3, r7
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	00da      	lsls	r2, r3, #3
 8006f1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f1e:	4413      	add	r3, r2
 8006f20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f28:	463b      	mov	r3, r7
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006f34:	801a      	strh	r2, [r3, #0]
 8006f36:	1d3b      	adds	r3, r7, #4
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f3e:	463b      	mov	r3, r7
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	785b      	ldrb	r3, [r3, #1]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d175      	bne.n	8007034 <USB_EPStartXfer+0xe5e>
 8006f48:	1d3b      	adds	r3, r7, #4
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f50:	1d3b      	adds	r3, r7, #4
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f60:	4413      	add	r3, r2
 8006f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f66:	463b      	mov	r3, r7
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	00da      	lsls	r2, r3, #3
 8006f6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f72:	4413      	add	r3, r2
 8006f74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f7c:	463b      	mov	r3, r7
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d116      	bne.n	8006fb4 <USB_EPStartXfer+0xdde>
 8006f86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f98:	801a      	strh	r2, [r3, #0]
 8006f9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fb0:	801a      	strh	r2, [r3, #0]
 8006fb2:	e061      	b.n	8007078 <USB_EPStartXfer+0xea2>
 8006fb4:	463b      	mov	r3, r7
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b3e      	cmp	r3, #62	; 0x3e
 8006fbc:	d81a      	bhi.n	8006ff4 <USB_EPStartXfer+0xe1e>
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	085b      	lsrs	r3, r3, #1
 8006fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fca:	463b      	mov	r3, r7
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d004      	beq.n	8006fe2 <USB_EPStartXfer+0xe0c>
 8006fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fdc:	3301      	adds	r3, #1
 8006fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	029b      	lsls	r3, r3, #10
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	e041      	b.n	8007078 <USB_EPStartXfer+0xea2>
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	095b      	lsrs	r3, r3, #5
 8006ffc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007000:	463b      	mov	r3, r7
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f003 031f 	and.w	r3, r3, #31
 800700a:	2b00      	cmp	r3, #0
 800700c:	d104      	bne.n	8007018 <USB_EPStartXfer+0xe42>
 800700e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007012:	3b01      	subs	r3, #1
 8007014:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800701c:	b29b      	uxth	r3, r3
 800701e:	029b      	lsls	r3, r3, #10
 8007020:	b29b      	uxth	r3, r3
 8007022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800702a:	b29a      	uxth	r2, r3
 800702c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007030:	801a      	strh	r2, [r3, #0]
 8007032:	e021      	b.n	8007078 <USB_EPStartXfer+0xea2>
 8007034:	463b      	mov	r3, r7
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	785b      	ldrb	r3, [r3, #1]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d11c      	bne.n	8007078 <USB_EPStartXfer+0xea2>
 800703e:	1d3b      	adds	r3, r7, #4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007046:	b29b      	uxth	r3, r3
 8007048:	461a      	mov	r2, r3
 800704a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800704e:	4413      	add	r3, r2
 8007050:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007054:	463b      	mov	r3, r7
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	00da      	lsls	r2, r3, #3
 800705c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007060:	4413      	add	r3, r2
 8007062:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800706a:	463b      	mov	r3, r7
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	b29a      	uxth	r2, r3
 8007072:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007076:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8007078:	463b      	mov	r3, r7
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 81a4 	beq.w	80073cc <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007084:	1d3b      	adds	r3, r7, #4
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	463b      	mov	r3, r7
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007098:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800709c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d005      	beq.n	80070b0 <USB_EPStartXfer+0xeda>
 80070a4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80070a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10d      	bne.n	80070cc <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070b0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80070b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f040 8187 	bne.w	80073cc <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80070be:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80070c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f040 8180 	bne.w	80073cc <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80070cc:	1d3b      	adds	r3, r7, #4
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	463b      	mov	r3, r7
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80070ea:	1d3b      	adds	r3, r7, #4
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	463b      	mov	r3, r7
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	441a      	add	r2, r3
 80070f8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80070fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007108:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800710c:	b29b      	uxth	r3, r3
 800710e:	8013      	strh	r3, [r2, #0]
 8007110:	e15c      	b.n	80073cc <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007112:	463b      	mov	r3, r7
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	78db      	ldrb	r3, [r3, #3]
 8007118:	2b01      	cmp	r3, #1
 800711a:	f040 8155 	bne.w	80073c8 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800711e:	463b      	mov	r3, r7
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	699a      	ldr	r2, [r3, #24]
 8007124:	463b      	mov	r3, r7
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	429a      	cmp	r2, r3
 800712c:	d90e      	bls.n	800714c <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800712e:	463b      	mov	r3, r7
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8007138:	463b      	mov	r3, r7
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699a      	ldr	r2, [r3, #24]
 800713e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007142:	1ad2      	subs	r2, r2, r3
 8007144:	463b      	mov	r3, r7
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	619a      	str	r2, [r3, #24]
 800714a:	e008      	b.n	800715e <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800714c:	463b      	mov	r3, r7
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8007156:	463b      	mov	r3, r7
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2200      	movs	r2, #0
 800715c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800715e:	463b      	mov	r3, r7
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	785b      	ldrb	r3, [r3, #1]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d16f      	bne.n	8007248 <USB_EPStartXfer+0x1072>
 8007168:	1d3b      	adds	r3, r7, #4
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007170:	1d3b      	adds	r3, r7, #4
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007178:	b29b      	uxth	r3, r3
 800717a:	461a      	mov	r2, r3
 800717c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007180:	4413      	add	r3, r2
 8007182:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007186:	463b      	mov	r3, r7
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	00da      	lsls	r2, r3, #3
 800718e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007192:	4413      	add	r3, r2
 8007194:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800719c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d116      	bne.n	80071d2 <USB_EPStartXfer+0xffc>
 80071a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071b6:	801a      	strh	r2, [r3, #0]
 80071b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80071ce:	801a      	strh	r2, [r3, #0]
 80071d0:	e05f      	b.n	8007292 <USB_EPStartXfer+0x10bc>
 80071d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071d6:	2b3e      	cmp	r3, #62	; 0x3e
 80071d8:	d818      	bhi.n	800720c <USB_EPStartXfer+0x1036>
 80071da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071de:	085b      	lsrs	r3, r3, #1
 80071e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d004      	beq.n	80071fa <USB_EPStartXfer+0x1024>
 80071f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f4:	3301      	adds	r3, #1
 80071f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071fe:	b29b      	uxth	r3, r3
 8007200:	029b      	lsls	r3, r3, #10
 8007202:	b29a      	uxth	r2, r3
 8007204:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	e042      	b.n	8007292 <USB_EPStartXfer+0x10bc>
 800720c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007210:	095b      	lsrs	r3, r3, #5
 8007212:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007216:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800721a:	f003 031f 	and.w	r3, r3, #31
 800721e:	2b00      	cmp	r3, #0
 8007220:	d104      	bne.n	800722c <USB_EPStartXfer+0x1056>
 8007222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007226:	3b01      	subs	r3, #1
 8007228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800722c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007230:	b29b      	uxth	r3, r3
 8007232:	029b      	lsls	r3, r3, #10
 8007234:	b29b      	uxth	r3, r3
 8007236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800723e:	b29a      	uxth	r2, r3
 8007240:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007244:	801a      	strh	r2, [r3, #0]
 8007246:	e024      	b.n	8007292 <USB_EPStartXfer+0x10bc>
 8007248:	463b      	mov	r3, r7
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	785b      	ldrb	r3, [r3, #1]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d11f      	bne.n	8007292 <USB_EPStartXfer+0x10bc>
 8007252:	1d3b      	adds	r3, r7, #4
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800725a:	1d3b      	adds	r3, r7, #4
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007262:	b29b      	uxth	r3, r3
 8007264:	461a      	mov	r2, r3
 8007266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800726a:	4413      	add	r3, r2
 800726c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007270:	463b      	mov	r3, r7
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	00da      	lsls	r2, r3, #3
 8007278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800727c:	4413      	add	r3, r2
 800727e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007286:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800728a:	b29a      	uxth	r2, r3
 800728c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007290:	801a      	strh	r2, [r3, #0]
 8007292:	1d3b      	adds	r3, r7, #4
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800729a:	463b      	mov	r3, r7
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d16f      	bne.n	8007384 <USB_EPStartXfer+0x11ae>
 80072a4:	1d3b      	adds	r3, r7, #4
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072ac:	1d3b      	adds	r3, r7, #4
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	461a      	mov	r2, r3
 80072b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072bc:	4413      	add	r3, r2
 80072be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072c2:	463b      	mov	r3, r7
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	00da      	lsls	r2, r3, #3
 80072ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072ce:	4413      	add	r3, r2
 80072d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80072d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80072d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d116      	bne.n	800730e <USB_EPStartXfer+0x1138>
 80072e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072f2:	801a      	strh	r2, [r3, #0]
 80072f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007304:	b29a      	uxth	r2, r3
 8007306:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800730a:	801a      	strh	r2, [r3, #0]
 800730c:	e05e      	b.n	80073cc <USB_EPStartXfer+0x11f6>
 800730e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007312:	2b3e      	cmp	r3, #62	; 0x3e
 8007314:	d818      	bhi.n	8007348 <USB_EPStartXfer+0x1172>
 8007316:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800731a:	085b      	lsrs	r3, r3, #1
 800731c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007320:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <USB_EPStartXfer+0x1160>
 800732c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007330:	3301      	adds	r3, #1
 8007332:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800733a:	b29b      	uxth	r3, r3
 800733c:	029b      	lsls	r3, r3, #10
 800733e:	b29a      	uxth	r2, r3
 8007340:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007344:	801a      	strh	r2, [r3, #0]
 8007346:	e041      	b.n	80073cc <USB_EPStartXfer+0x11f6>
 8007348:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800734c:	095b      	lsrs	r3, r3, #5
 800734e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007352:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007356:	f003 031f 	and.w	r3, r3, #31
 800735a:	2b00      	cmp	r3, #0
 800735c:	d104      	bne.n	8007368 <USB_EPStartXfer+0x1192>
 800735e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007362:	3b01      	subs	r3, #1
 8007364:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800736c:	b29b      	uxth	r3, r3
 800736e:	029b      	lsls	r3, r3, #10
 8007370:	b29b      	uxth	r3, r3
 8007372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800737a:	b29a      	uxth	r2, r3
 800737c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007380:	801a      	strh	r2, [r3, #0]
 8007382:	e023      	b.n	80073cc <USB_EPStartXfer+0x11f6>
 8007384:	463b      	mov	r3, r7
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	785b      	ldrb	r3, [r3, #1]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d11e      	bne.n	80073cc <USB_EPStartXfer+0x11f6>
 800738e:	1d3b      	adds	r3, r7, #4
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007396:	b29b      	uxth	r3, r3
 8007398:	461a      	mov	r2, r3
 800739a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800739e:	4413      	add	r3, r2
 80073a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073a4:	463b      	mov	r3, r7
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	00da      	lsls	r2, r3, #3
 80073ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073b0:	4413      	add	r3, r2
 80073b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073be:	b29a      	uxth	r2, r3
 80073c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073c4:	801a      	strh	r2, [r3, #0]
 80073c6:	e001      	b.n	80073cc <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e02e      	b.n	800742a <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073cc:	1d3b      	adds	r3, r7, #4
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	463b      	mov	r3, r7
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80073ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80073ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80073f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80073fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073fe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007402:	1d3b      	adds	r3, r7, #4
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	463b      	mov	r3, r7
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	441a      	add	r2, r3
 8007410:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800741c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007424:	b29b      	uxth	r3, r3
 8007426:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	785b      	ldrb	r3, [r3, #1]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d020      	beq.n	8007488 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	b29b      	uxth	r3, r3
 8007454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800745c:	81bb      	strh	r3, [r7, #12]
 800745e:	89bb      	ldrh	r3, [r7, #12]
 8007460:	f083 0310 	eor.w	r3, r3, #16
 8007464:	81bb      	strh	r3, [r7, #12]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	441a      	add	r2, r3
 8007470:	89bb      	ldrh	r3, [r7, #12]
 8007472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800747a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800747e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007482:	b29b      	uxth	r3, r3
 8007484:	8013      	strh	r3, [r2, #0]
 8007486:	e01f      	b.n	80074c8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800749a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749e:	81fb      	strh	r3, [r7, #14]
 80074a0:	89fb      	ldrh	r3, [r7, #14]
 80074a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074a6:	81fb      	strh	r3, [r7, #14]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	441a      	add	r2, r3
 80074b2:	89fb      	ldrh	r3, [r7, #14]
 80074b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b087      	sub	sp, #28
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	7b1b      	ldrb	r3, [r3, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f040 809d 	bne.w	8007624 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	785b      	ldrb	r3, [r3, #1]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d04c      	beq.n	800758c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	823b      	strh	r3, [r7, #16]
 8007500:	8a3b      	ldrh	r3, [r7, #16]
 8007502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007506:	2b00      	cmp	r3, #0
 8007508:	d01b      	beq.n	8007542 <USB_EPClearStall+0x6c>
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	b29b      	uxth	r3, r3
 8007518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800751c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007520:	81fb      	strh	r3, [r7, #14]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	441a      	add	r2, r3
 800752c:	89fb      	ldrh	r3, [r7, #14]
 800752e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800753a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800753e:	b29b      	uxth	r3, r3
 8007540:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	78db      	ldrb	r3, [r3, #3]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d06c      	beq.n	8007624 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	b29b      	uxth	r3, r3
 8007558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800755c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007560:	81bb      	strh	r3, [r7, #12]
 8007562:	89bb      	ldrh	r3, [r7, #12]
 8007564:	f083 0320 	eor.w	r3, r3, #32
 8007568:	81bb      	strh	r3, [r7, #12]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	441a      	add	r2, r3
 8007574:	89bb      	ldrh	r3, [r7, #12]
 8007576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800757e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007586:	b29b      	uxth	r3, r3
 8007588:	8013      	strh	r3, [r2, #0]
 800758a:	e04b      	b.n	8007624 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	82fb      	strh	r3, [r7, #22]
 800759a:	8afb      	ldrh	r3, [r7, #22]
 800759c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d01b      	beq.n	80075dc <USB_EPClearStall+0x106>
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	881b      	ldrh	r3, [r3, #0]
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ba:	82bb      	strh	r3, [r7, #20]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	441a      	add	r2, r3
 80075c6:	8abb      	ldrh	r3, [r7, #20]
 80075c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d8:	b29b      	uxth	r3, r3
 80075da:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f2:	827b      	strh	r3, [r7, #18]
 80075f4:	8a7b      	ldrh	r3, [r7, #18]
 80075f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075fa:	827b      	strh	r3, [r7, #18]
 80075fc:	8a7b      	ldrh	r3, [r7, #18]
 80075fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007602:	827b      	strh	r3, [r7, #18]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	441a      	add	r2, r3
 800760e:	8a7b      	ldrh	r3, [r7, #18]
 8007610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800761c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007620:	b29b      	uxth	r3, r3
 8007622:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	371c      	adds	r7, #28
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	460b      	mov	r3, r1
 800763c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800763e:	78fb      	ldrb	r3, [r7, #3]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2280      	movs	r2, #128	; 0x80
 8007648:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007668:	b29b      	uxth	r3, r3
 800766a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800766e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007672:	b29a      	uxth	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007696:	b29b      	uxth	r3, r3
 8007698:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800769a:	68fb      	ldr	r3, [r7, #12]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b08d      	sub	sp, #52	; 0x34
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	4611      	mov	r1, r2
 80076cc:	461a      	mov	r2, r3
 80076ce:	460b      	mov	r3, r1
 80076d0:	80fb      	strh	r3, [r7, #6]
 80076d2:	4613      	mov	r3, r2
 80076d4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80076d6:	88bb      	ldrh	r3, [r7, #4]
 80076d8:	3301      	adds	r3, #1
 80076da:	085b      	lsrs	r3, r3, #1
 80076dc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076e6:	88fa      	ldrh	r2, [r7, #6]
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076f0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076f6:	e01b      	b.n	8007730 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	3301      	adds	r3, #1
 8007702:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	021b      	lsls	r3, r3, #8
 800770c:	b29b      	uxth	r3, r3
 800770e:	461a      	mov	r2, r3
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	4313      	orrs	r3, r2
 8007714:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	b29a      	uxth	r2, r3
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	3302      	adds	r3, #2
 8007722:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	3301      	adds	r3, #1
 8007728:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	3b01      	subs	r3, #1
 800772e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1e0      	bne.n	80076f8 <USB_WritePMA+0x38>
  }
}
 8007736:	bf00      	nop
 8007738:	3734      	adds	r7, #52	; 0x34
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007742:	b480      	push	{r7}
 8007744:	b08b      	sub	sp, #44	; 0x2c
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	4611      	mov	r1, r2
 800774e:	461a      	mov	r2, r3
 8007750:	460b      	mov	r3, r1
 8007752:	80fb      	strh	r3, [r7, #6]
 8007754:	4613      	mov	r3, r2
 8007756:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007758:	88bb      	ldrh	r3, [r7, #4]
 800775a:	085b      	lsrs	r3, r3, #1
 800775c:	b29b      	uxth	r3, r3
 800775e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007768:	88fa      	ldrh	r2, [r7, #6]
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	4413      	add	r3, r2
 800776e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007772:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	627b      	str	r3, [r7, #36]	; 0x24
 8007778:	e018      	b.n	80077ac <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	b29b      	uxth	r3, r3
 8007780:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	3302      	adds	r3, #2
 8007786:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	b2da      	uxtb	r2, r3
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	3301      	adds	r3, #1
 8007794:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	0a1b      	lsrs	r3, r3, #8
 800779a:	b2da      	uxtb	r2, r3
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	3301      	adds	r3, #1
 80077a4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	3b01      	subs	r3, #1
 80077aa:	627b      	str	r3, [r7, #36]	; 0x24
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1e3      	bne.n	800777a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80077b2:	88bb      	ldrh	r3, [r7, #4]
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d007      	beq.n	80077ce <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	701a      	strb	r2, [r3, #0]
  }
}
 80077ce:	bf00      	nop
 80077d0:	372c      	adds	r7, #44	; 0x2c
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	460b      	mov	r3, r1
 80077e4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077e6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80077ea:	f002 f89d 	bl	8009928 <USBD_static_malloc>
 80077ee:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d105      	bne.n	8007802 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80077fe:	2302      	movs	r3, #2
 8007800:	e066      	b.n	80078d0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7c1b      	ldrb	r3, [r3, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d119      	bne.n	8007846 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007816:	2202      	movs	r2, #2
 8007818:	2181      	movs	r1, #129	; 0x81
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 ff29 	bl	8009672 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800782a:	2202      	movs	r2, #2
 800782c:	2101      	movs	r1, #1
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 ff1f 	bl	8009672 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2210      	movs	r2, #16
 8007840:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007844:	e016      	b.n	8007874 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007846:	2340      	movs	r3, #64	; 0x40
 8007848:	2202      	movs	r2, #2
 800784a:	2181      	movs	r1, #129	; 0x81
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 ff10 	bl	8009672 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007858:	2340      	movs	r3, #64	; 0x40
 800785a:	2202      	movs	r2, #2
 800785c:	2101      	movs	r1, #1
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f001 ff07 	bl	8009672 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2210      	movs	r2, #16
 8007870:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007874:	2308      	movs	r3, #8
 8007876:	2203      	movs	r2, #3
 8007878:	2182      	movs	r1, #130	; 0x82
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f001 fef9 	bl	8009672 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	7c1b      	ldrb	r3, [r3, #16]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d109      	bne.n	80078be <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078b4:	2101      	movs	r1, #1
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 ffcb 	bl	8009852 <USBD_LL_PrepareReceive>
 80078bc:	e007      	b.n	80078ce <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078c4:	2340      	movs	r3, #64	; 0x40
 80078c6:	2101      	movs	r1, #1
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 ffc2 	bl	8009852 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80078e4:	2181      	movs	r1, #129	; 0x81
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f001 fee9 	bl	80096be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80078f2:	2101      	movs	r1, #1
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f001 fee2 	bl	80096be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007902:	2182      	movs	r1, #130	; 0x82
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f001 feda 	bl	80096be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00e      	beq.n	8007942 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007934:	4618      	mov	r0, r3
 8007936:	f002 f805 	bl	8009944 <USBD_static_free>
    pdev->pClassData = NULL;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800795c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007972:	2b00      	cmp	r3, #0
 8007974:	d03a      	beq.n	80079ec <USBD_CDC_Setup+0xa0>
 8007976:	2b20      	cmp	r3, #32
 8007978:	f040 8097 	bne.w	8007aaa <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	88db      	ldrh	r3, [r3, #6]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d029      	beq.n	80079d8 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	b25b      	sxtb	r3, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	da11      	bge.n	80079b2 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800799a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	88d2      	ldrh	r2, [r2, #6]
 80079a0:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80079a2:	6939      	ldr	r1, [r7, #16]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	88db      	ldrh	r3, [r3, #6]
 80079a8:	461a      	mov	r2, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 fa8d 	bl	8008eca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80079b0:	e082      	b.n	8007ab8 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	785a      	ldrb	r2, [r3, #1]
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	88db      	ldrh	r3, [r3, #6]
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80079c8:	6939      	ldr	r1, [r7, #16]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	88db      	ldrh	r3, [r3, #6]
 80079ce:	461a      	mov	r2, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f001 faa6 	bl	8008f22 <USBD_CtlPrepareRx>
      break;
 80079d6:	e06f      	b.n	8007ab8 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	7850      	ldrb	r0, [r2, #1]
 80079e4:	2200      	movs	r2, #0
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	4798      	blx	r3
      break;
 80079ea:	e065      	b.n	8007ab8 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	785b      	ldrb	r3, [r3, #1]
 80079f0:	2b0b      	cmp	r3, #11
 80079f2:	d84f      	bhi.n	8007a94 <USBD_CDC_Setup+0x148>
 80079f4:	a201      	add	r2, pc, #4	; (adr r2, 80079fc <USBD_CDC_Setup+0xb0>)
 80079f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fa:	bf00      	nop
 80079fc:	08007a2d 	.word	0x08007a2d
 8007a00:	08007aa3 	.word	0x08007aa3
 8007a04:	08007a95 	.word	0x08007a95
 8007a08:	08007a95 	.word	0x08007a95
 8007a0c:	08007a95 	.word	0x08007a95
 8007a10:	08007a95 	.word	0x08007a95
 8007a14:	08007a95 	.word	0x08007a95
 8007a18:	08007a95 	.word	0x08007a95
 8007a1c:	08007a95 	.word	0x08007a95
 8007a20:	08007a95 	.word	0x08007a95
 8007a24:	08007a55 	.word	0x08007a55
 8007a28:	08007a7d 	.word	0x08007a7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d107      	bne.n	8007a46 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a36:	f107 030c 	add.w	r3, r7, #12
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f001 fa43 	bl	8008eca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a44:	e030      	b.n	8007aa8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 f9cd 	bl	8008de8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	75fb      	strb	r3, [r7, #23]
          break;
 8007a52:	e029      	b.n	8007aa8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d107      	bne.n	8007a6e <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a5e:	f107 030f 	add.w	r3, r7, #15
 8007a62:	2201      	movs	r2, #1
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 fa2f 	bl	8008eca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a6c:	e01c      	b.n	8007aa8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 f9b9 	bl	8008de8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a76:	2303      	movs	r3, #3
 8007a78:	75fb      	strb	r3, [r7, #23]
          break;
 8007a7a:	e015      	b.n	8007aa8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d00f      	beq.n	8007aa6 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 f9ad 	bl	8008de8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a92:	e008      	b.n	8007aa6 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 f9a6 	bl	8008de8 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	75fb      	strb	r3, [r7, #23]
          break;
 8007aa0:	e002      	b.n	8007aa8 <USBD_CDC_Setup+0x15c>
          break;
 8007aa2:	bf00      	nop
 8007aa4:	e008      	b.n	8007ab8 <USBD_CDC_Setup+0x16c>
          break;
 8007aa6:	bf00      	nop
      }
      break;
 8007aa8:	e006      	b.n	8007ab8 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 f99b 	bl	8008de8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab6:	bf00      	nop
  }

  return (uint8_t)ret;
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop

08007ac4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ad6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e04f      	b.n	8007b86 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007aee:	78fa      	ldrb	r2, [r7, #3]
 8007af0:	6879      	ldr	r1, [r7, #4]
 8007af2:	4613      	mov	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	440b      	add	r3, r1
 8007afc:	3318      	adds	r3, #24
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d029      	beq.n	8007b58 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b04:	78fa      	ldrb	r2, [r7, #3]
 8007b06:	6879      	ldr	r1, [r7, #4]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	440b      	add	r3, r1
 8007b12:	3318      	adds	r3, #24
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	78f9      	ldrb	r1, [r7, #3]
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	440b      	add	r3, r1
 8007b20:	00db      	lsls	r3, r3, #3
 8007b22:	4403      	add	r3, r0
 8007b24:	3338      	adds	r3, #56	; 0x38
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b2c:	fb03 f301 	mul.w	r3, r3, r1
 8007b30:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d110      	bne.n	8007b58 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007b36:	78fa      	ldrb	r2, [r7, #3]
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	3318      	adds	r3, #24
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b4a:	78f9      	ldrb	r1, [r7, #3]
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	2200      	movs	r2, #0
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 fe5d 	bl	8009810 <USBD_LL_Transmit>
 8007b56:	e015      	b.n	8007b84 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00b      	beq.n	8007b84 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007b80:	78fa      	ldrb	r2, [r7, #3]
 8007b82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	460b      	mov	r3, r1
 8007b98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ba0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e015      	b.n	8007bdc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f001 fe6d 	bl	8009894 <USBD_LL_GetRxDataSize>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bf2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d015      	beq.n	8007c2a <USBD_CDC_EP0_RxReady+0x46>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c04:	2bff      	cmp	r3, #255	; 0xff
 8007c06:	d010      	beq.n	8007c2a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007c16:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c1e:	b292      	uxth	r2, r2
 8007c20:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	22ff      	movs	r2, #255	; 0xff
 8007c26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2243      	movs	r2, #67	; 0x43
 8007c40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007c42:	4b03      	ldr	r3, [pc, #12]	; (8007c50 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	20000094 	.word	0x20000094

08007c54 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2243      	movs	r2, #67	; 0x43
 8007c60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007c62:	4b03      	ldr	r3, [pc, #12]	; (8007c70 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	20000050 	.word	0x20000050

08007c74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2243      	movs	r2, #67	; 0x43
 8007c80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007c82:	4b03      	ldr	r3, [pc, #12]	; (8007c90 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	200000d8 	.word	0x200000d8

08007c94 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	220a      	movs	r2, #10
 8007ca0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007ca2:	4b03      	ldr	r3, [pc, #12]	; (8007cb0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	2000000c 	.word	0x2000000c

08007cb4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e004      	b.n	8007cd2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b087      	sub	sp, #28
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cf0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	371c      	adds	r7, #28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d20:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d46:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e01a      	b.n	8007d90 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d114      	bne.n	8007d8e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d82:	2181      	movs	r1, #129	; 0x81
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 fd43 	bl	8009810 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007da6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e016      	b.n	8007de4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	7c1b      	ldrb	r3, [r3, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d109      	bne.n	8007dd2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dc8:	2101      	movs	r1, #1
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f001 fd41 	bl	8009852 <USBD_LL_PrepareReceive>
 8007dd0:	e007      	b.n	8007de2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dd8:	2340      	movs	r3, #64	; 0x40
 8007dda:	2101      	movs	r1, #1
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f001 fd38 	bl	8009852 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	4613      	mov	r3, r2
 8007df8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e01f      	b.n	8007e44 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	79fa      	ldrb	r2, [r7, #7]
 8007e36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f001 fb9f 	bl	800957c <USBD_LL_Init>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e016      	b.n	8007e92 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00b      	beq.n	8007e90 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e80:	f107 020e 	add.w	r2, r7, #14
 8007e84:	4610      	mov	r0, r2
 8007e86:	4798      	blx	r3
 8007e88:	4602      	mov	r2, r0
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f001 fbca 	bl	800963c <USBD_LL_Start>
 8007ea8:	4603      	mov	r3, r0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d009      	beq.n	8007ef6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	78fa      	ldrb	r2, [r7, #3]
 8007eec:	4611      	mov	r1, r2
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	4798      	blx	r3
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d007      	beq.n	8007f26 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	78fa      	ldrb	r2, [r7, #3]
 8007f20:	4611      	mov	r1, r2
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	4798      	blx	r3
  }

  return USBD_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 ff16 	bl	8008d74 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007f56:	461a      	mov	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f64:	f003 031f 	and.w	r3, r3, #31
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d00e      	beq.n	8007f8a <USBD_LL_SetupStage+0x5a>
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d302      	bcc.n	8007f76 <USBD_LL_SetupStage+0x46>
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d014      	beq.n	8007f9e <USBD_LL_SetupStage+0x6e>
 8007f74:	e01d      	b.n	8007fb2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f9d6 	bl	8008330 <USBD_StdDevReq>
 8007f84:	4603      	mov	r3, r0
 8007f86:	73fb      	strb	r3, [r7, #15]
      break;
 8007f88:	e020      	b.n	8007fcc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fa3a 	bl	800840c <USBD_StdItfReq>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f9c:	e016      	b.n	8007fcc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fa76 	bl	8008498 <USBD_StdEPReq>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb0:	e00c      	b.n	8007fcc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 fb9b 	bl	80096fc <USBD_LL_StallEP>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8007fca:	bf00      	nop
  }

  return ret;
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b086      	sub	sp, #24
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	60f8      	str	r0, [r7, #12]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	607a      	str	r2, [r7, #4]
 8007fe2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007fe4:	7afb      	ldrb	r3, [r7, #11]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d137      	bne.n	800805a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ff0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ff8:	2b03      	cmp	r3, #3
 8007ffa:	d14a      	bne.n	8008092 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	429a      	cmp	r2, r3
 8008006:	d913      	bls.n	8008030 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	689a      	ldr	r2, [r3, #8]
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	1ad2      	subs	r2, r2, r3
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	68da      	ldr	r2, [r3, #12]
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	4293      	cmp	r3, r2
 8008020:	bf28      	it	cs
 8008022:	4613      	movcs	r3, r2
 8008024:	461a      	mov	r2, r3
 8008026:	6879      	ldr	r1, [r7, #4]
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 ff97 	bl	8008f5c <USBD_CtlContinueRx>
 800802e:	e030      	b.n	8008092 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00a      	beq.n	8008052 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008042:	2b03      	cmp	r3, #3
 8008044:	d105      	bne.n	8008052 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f000 ff93 	bl	8008f7e <USBD_CtlSendStatus>
 8008058:	e01b      	b.n	8008092 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d013      	beq.n	800808e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800806c:	2b03      	cmp	r3, #3
 800806e:	d10e      	bne.n	800808e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	7afa      	ldrb	r2, [r7, #11]
 800807a:	4611      	mov	r1, r2
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	4798      	blx	r3
 8008080:	4603      	mov	r3, r0
 8008082:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008084:	7dfb      	ldrb	r3, [r7, #23]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800808a:	7dfb      	ldrb	r3, [r7, #23]
 800808c:	e002      	b.n	8008094 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800808e:	2303      	movs	r3, #3
 8008090:	e000      	b.n	8008094 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3718      	adds	r7, #24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	460b      	mov	r3, r1
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080aa:	7afb      	ldrb	r3, [r7, #11]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d16a      	bne.n	8008186 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	3314      	adds	r3, #20
 80080b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d155      	bne.n	800816c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d914      	bls.n	80080f6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	1ad2      	subs	r2, r2, r3
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	461a      	mov	r2, r3
 80080e0:	6879      	ldr	r1, [r7, #4]
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 ff0c 	bl	8008f00 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080e8:	2300      	movs	r3, #0
 80080ea:	2200      	movs	r2, #0
 80080ec:	2100      	movs	r1, #0
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f001 fbaf 	bl	8009852 <USBD_LL_PrepareReceive>
 80080f4:	e03a      	b.n	800816c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d11c      	bne.n	800813c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800810a:	429a      	cmp	r2, r3
 800810c:	d316      	bcc.n	800813c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	685a      	ldr	r2, [r3, #4]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008118:	429a      	cmp	r2, r3
 800811a:	d20f      	bcs.n	800813c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800811c:	2200      	movs	r2, #0
 800811e:	2100      	movs	r1, #0
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 feed 	bl	8008f00 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800812e:	2300      	movs	r3, #0
 8008130:	2200      	movs	r2, #0
 8008132:	2100      	movs	r1, #0
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f001 fb8c 	bl	8009852 <USBD_LL_PrepareReceive>
 800813a:	e017      	b.n	800816c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00a      	beq.n	800815e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800814e:	2b03      	cmp	r3, #3
 8008150:	d105      	bne.n	800815e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800815e:	2180      	movs	r1, #128	; 0x80
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f001 facb 	bl	80096fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f000 ff1c 	bl	8008fa4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008172:	2b01      	cmp	r3, #1
 8008174:	d123      	bne.n	80081be <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f7ff fe9b 	bl	8007eb2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008184:	e01b      	b.n	80081be <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d013      	beq.n	80081ba <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008198:	2b03      	cmp	r3, #3
 800819a:	d10e      	bne.n	80081ba <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	7afa      	ldrb	r2, [r7, #11]
 80081a6:	4611      	mov	r1, r2
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	4798      	blx	r3
 80081ac:	4603      	mov	r3, r0
 80081ae:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80081b0:	7dfb      	ldrb	r3, [r7, #23]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	e002      	b.n	80081c0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e000      	b.n	80081c0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d009      	beq.n	800820c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	6852      	ldr	r2, [r2, #4]
 8008204:	b2d2      	uxtb	r2, r2
 8008206:	4611      	mov	r1, r2
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800820c:	2340      	movs	r3, #64	; 0x40
 800820e:	2200      	movs	r2, #0
 8008210:	2100      	movs	r1, #0
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f001 fa2d 	bl	8009672 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2240      	movs	r2, #64	; 0x40
 8008224:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008228:	2340      	movs	r3, #64	; 0x40
 800822a:	2200      	movs	r2, #0
 800822c:	2180      	movs	r1, #128	; 0x80
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f001 fa1f 	bl	8009672 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2240      	movs	r2, #64	; 0x40
 800823e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	460b      	mov	r3, r1
 8008254:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	78fa      	ldrb	r2, [r7, #3]
 800825a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800826a:	b480      	push	{r7}
 800826c:	b083      	sub	sp, #12
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2204      	movs	r2, #4
 8008282:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a2:	2b04      	cmp	r3, #4
 80082a4:	d105      	bne.n	80082b2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d10b      	bne.n	80082ea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d005      	beq.n	80082ea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b087      	sub	sp, #28
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	3301      	adds	r3, #1
 800830a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008312:	8a3b      	ldrh	r3, [r7, #16]
 8008314:	021b      	lsls	r3, r3, #8
 8008316:	b21a      	sxth	r2, r3
 8008318:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800831c:	4313      	orrs	r3, r2
 800831e:	b21b      	sxth	r3, r3
 8008320:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008322:	89fb      	ldrh	r3, [r7, #14]
}
 8008324:	4618      	mov	r0, r3
 8008326:	371c      	adds	r7, #28
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800833a:	2300      	movs	r3, #0
 800833c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008346:	2b20      	cmp	r3, #32
 8008348:	d004      	beq.n	8008354 <USBD_StdDevReq+0x24>
 800834a:	2b40      	cmp	r3, #64	; 0x40
 800834c:	d002      	beq.n	8008354 <USBD_StdDevReq+0x24>
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00a      	beq.n	8008368 <USBD_StdDevReq+0x38>
 8008352:	e050      	b.n	80083f6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	4798      	blx	r3
 8008362:	4603      	mov	r3, r0
 8008364:	73fb      	strb	r3, [r7, #15]
    break;
 8008366:	e04b      	b.n	8008400 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	785b      	ldrb	r3, [r3, #1]
 800836c:	2b09      	cmp	r3, #9
 800836e:	d83c      	bhi.n	80083ea <USBD_StdDevReq+0xba>
 8008370:	a201      	add	r2, pc, #4	; (adr r2, 8008378 <USBD_StdDevReq+0x48>)
 8008372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008376:	bf00      	nop
 8008378:	080083cd 	.word	0x080083cd
 800837c:	080083e1 	.word	0x080083e1
 8008380:	080083eb 	.word	0x080083eb
 8008384:	080083d7 	.word	0x080083d7
 8008388:	080083eb 	.word	0x080083eb
 800838c:	080083ab 	.word	0x080083ab
 8008390:	080083a1 	.word	0x080083a1
 8008394:	080083eb 	.word	0x080083eb
 8008398:	080083c3 	.word	0x080083c3
 800839c:	080083b5 	.word	0x080083b5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f9d0 	bl	8008748 <USBD_GetDescriptor>
      break;
 80083a8:	e024      	b.n	80083f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fb5f 	bl	8008a70 <USBD_SetAddress>
      break;
 80083b2:	e01f      	b.n	80083f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fb9c 	bl	8008af4 <USBD_SetConfig>
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]
      break;
 80083c0:	e018      	b.n	80083f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fc39 	bl	8008c3c <USBD_GetConfig>
      break;
 80083ca:	e013      	b.n	80083f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fc68 	bl	8008ca4 <USBD_GetStatus>
      break;
 80083d4:	e00e      	b.n	80083f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fc96 	bl	8008d0a <USBD_SetFeature>
      break;
 80083de:	e009      	b.n	80083f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fca5 	bl	8008d32 <USBD_ClrFeature>
      break;
 80083e8:	e004      	b.n	80083f4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fcfb 	bl	8008de8 <USBD_CtlError>
      break;
 80083f2:	bf00      	nop
    }
    break;
 80083f4:	e004      	b.n	8008400 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fcf5 	bl	8008de8 <USBD_CtlError>
    break;
 80083fe:	bf00      	nop
  }

  return ret;
 8008400:	7bfb      	ldrb	r3, [r7, #15]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop

0800840c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008422:	2b20      	cmp	r3, #32
 8008424:	d003      	beq.n	800842e <USBD_StdItfReq+0x22>
 8008426:	2b40      	cmp	r3, #64	; 0x40
 8008428:	d001      	beq.n	800842e <USBD_StdItfReq+0x22>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d12a      	bne.n	8008484 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008434:	3b01      	subs	r3, #1
 8008436:	2b02      	cmp	r3, #2
 8008438:	d81d      	bhi.n	8008476 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	889b      	ldrh	r3, [r3, #4]
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b01      	cmp	r3, #1
 8008442:	d813      	bhi.n	800846c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	4798      	blx	r3
 8008452:	4603      	mov	r3, r0
 8008454:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	88db      	ldrh	r3, [r3, #6]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d110      	bne.n	8008480 <USBD_StdItfReq+0x74>
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10d      	bne.n	8008480 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fd8a 	bl	8008f7e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800846a:	e009      	b.n	8008480 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fcba 	bl	8008de8 <USBD_CtlError>
      break;
 8008474:	e004      	b.n	8008480 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fcb5 	bl	8008de8 <USBD_CtlError>
      break;
 800847e:	e000      	b.n	8008482 <USBD_StdItfReq+0x76>
      break;
 8008480:	bf00      	nop
    }
    break;
 8008482:	e004      	b.n	800848e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fcae 	bl	8008de8 <USBD_CtlError>
    break;
 800848c:	bf00      	nop
  }

  return ret;
 800848e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	889b      	ldrh	r3, [r3, #4]
 80084aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084b4:	2b20      	cmp	r3, #32
 80084b6:	d004      	beq.n	80084c2 <USBD_StdEPReq+0x2a>
 80084b8:	2b40      	cmp	r3, #64	; 0x40
 80084ba:	d002      	beq.n	80084c2 <USBD_StdEPReq+0x2a>
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00a      	beq.n	80084d6 <USBD_StdEPReq+0x3e>
 80084c0:	e137      	b.n	8008732 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	4798      	blx	r3
 80084d0:	4603      	mov	r3, r0
 80084d2:	73fb      	strb	r3, [r7, #15]
    break;
 80084d4:	e132      	b.n	800873c <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	785b      	ldrb	r3, [r3, #1]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d03e      	beq.n	800855c <USBD_StdEPReq+0xc4>
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d002      	beq.n	80084e8 <USBD_StdEPReq+0x50>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d079      	beq.n	80085da <USBD_StdEPReq+0x142>
 80084e6:	e11e      	b.n	8008726 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d002      	beq.n	80084f8 <USBD_StdEPReq+0x60>
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d015      	beq.n	8008522 <USBD_StdEPReq+0x8a>
 80084f6:	e02b      	b.n	8008550 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00c      	beq.n	8008518 <USBD_StdEPReq+0x80>
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
 8008500:	2b80      	cmp	r3, #128	; 0x80
 8008502:	d009      	beq.n	8008518 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008504:	7bbb      	ldrb	r3, [r7, #14]
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f001 f8f7 	bl	80096fc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800850e:	2180      	movs	r1, #128	; 0x80
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f001 f8f3 	bl	80096fc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008516:	e020      	b.n	800855a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fc64 	bl	8008de8 <USBD_CtlError>
        break;
 8008520:	e01b      	b.n	800855a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	885b      	ldrh	r3, [r3, #2]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10e      	bne.n	8008548 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800852a:	7bbb      	ldrb	r3, [r7, #14]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00b      	beq.n	8008548 <USBD_StdEPReq+0xb0>
 8008530:	7bbb      	ldrb	r3, [r7, #14]
 8008532:	2b80      	cmp	r3, #128	; 0x80
 8008534:	d008      	beq.n	8008548 <USBD_StdEPReq+0xb0>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	88db      	ldrh	r3, [r3, #6]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d104      	bne.n	8008548 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800853e:	7bbb      	ldrb	r3, [r7, #14]
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f001 f8da 	bl	80096fc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fd18 	bl	8008f7e <USBD_CtlSendStatus>

        break;
 800854e:	e004      	b.n	800855a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fc48 	bl	8008de8 <USBD_CtlError>
        break;
 8008558:	bf00      	nop
      }
      break;
 800855a:	e0e9      	b.n	8008730 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008562:	2b02      	cmp	r3, #2
 8008564:	d002      	beq.n	800856c <USBD_StdEPReq+0xd4>
 8008566:	2b03      	cmp	r3, #3
 8008568:	d015      	beq.n	8008596 <USBD_StdEPReq+0xfe>
 800856a:	e02f      	b.n	80085cc <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800856c:	7bbb      	ldrb	r3, [r7, #14]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00c      	beq.n	800858c <USBD_StdEPReq+0xf4>
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	2b80      	cmp	r3, #128	; 0x80
 8008576:	d009      	beq.n	800858c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008578:	7bbb      	ldrb	r3, [r7, #14]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f001 f8bd 	bl	80096fc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008582:	2180      	movs	r1, #128	; 0x80
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f001 f8b9 	bl	80096fc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800858a:	e025      	b.n	80085d8 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fc2a 	bl	8008de8 <USBD_CtlError>
        break;
 8008594:	e020      	b.n	80085d8 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	885b      	ldrh	r3, [r3, #2]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d11b      	bne.n	80085d6 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800859e:	7bbb      	ldrb	r3, [r7, #14]
 80085a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d004      	beq.n	80085b2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f001 f8c4 	bl	800973a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fce3 	bl	8008f7e <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	4798      	blx	r3
 80085c6:	4603      	mov	r3, r0
 80085c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80085ca:	e004      	b.n	80085d6 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fc0a 	bl	8008de8 <USBD_CtlError>
        break;
 80085d4:	e000      	b.n	80085d8 <USBD_StdEPReq+0x140>
        break;
 80085d6:	bf00      	nop
      }
      break;
 80085d8:	e0aa      	b.n	8008730 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d002      	beq.n	80085ea <USBD_StdEPReq+0x152>
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d032      	beq.n	800864e <USBD_StdEPReq+0x1b6>
 80085e8:	e097      	b.n	800871a <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d007      	beq.n	8008600 <USBD_StdEPReq+0x168>
 80085f0:	7bbb      	ldrb	r3, [r7, #14]
 80085f2:	2b80      	cmp	r3, #128	; 0x80
 80085f4:	d004      	beq.n	8008600 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fbf5 	bl	8008de8 <USBD_CtlError>
          break;
 80085fe:	e091      	b.n	8008724 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008604:	2b00      	cmp	r3, #0
 8008606:	da0b      	bge.n	8008620 <USBD_StdEPReq+0x188>
 8008608:	7bbb      	ldrb	r3, [r7, #14]
 800860a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	3310      	adds	r3, #16
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	4413      	add	r3, r2
 800861c:	3304      	adds	r3, #4
 800861e:	e00b      	b.n	8008638 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008626:	4613      	mov	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	4413      	add	r3, r2
 8008636:	3304      	adds	r3, #4
 8008638:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	2200      	movs	r2, #0
 800863e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	2202      	movs	r2, #2
 8008644:	4619      	mov	r1, r3
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fc3f 	bl	8008eca <USBD_CtlSendData>
        break;
 800864c:	e06a      	b.n	8008724 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800864e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008652:	2b00      	cmp	r3, #0
 8008654:	da11      	bge.n	800867a <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	f003 020f 	and.w	r2, r3, #15
 800865c:	6879      	ldr	r1, [r7, #4]
 800865e:	4613      	mov	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	440b      	add	r3, r1
 8008668:	3324      	adds	r3, #36	; 0x24
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d117      	bne.n	80086a0 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fbb8 	bl	8008de8 <USBD_CtlError>
            break;
 8008678:	e054      	b.n	8008724 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800867a:	7bbb      	ldrb	r3, [r7, #14]
 800867c:	f003 020f 	and.w	r2, r3, #15
 8008680:	6879      	ldr	r1, [r7, #4]
 8008682:	4613      	mov	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	440b      	add	r3, r1
 800868c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d104      	bne.n	80086a0 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fba5 	bl	8008de8 <USBD_CtlError>
            break;
 800869e:	e041      	b.n	8008724 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	da0b      	bge.n	80086c0 <USBD_StdEPReq+0x228>
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086ae:	4613      	mov	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	3310      	adds	r3, #16
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	4413      	add	r3, r2
 80086bc:	3304      	adds	r3, #4
 80086be:	e00b      	b.n	80086d8 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 80086c0:	7bbb      	ldrb	r3, [r7, #14]
 80086c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086c6:	4613      	mov	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	4413      	add	r3, r2
 80086d6:	3304      	adds	r3, #4
 80086d8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086da:	7bbb      	ldrb	r3, [r7, #14]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <USBD_StdEPReq+0x24e>
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
 80086e2:	2b80      	cmp	r3, #128	; 0x80
 80086e4:	d103      	bne.n	80086ee <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2200      	movs	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]
 80086ec:	e00e      	b.n	800870c <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f001 f840 	bl	8009778 <USBD_LL_IsStallEP>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2201      	movs	r2, #1
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	e002      	b.n	800870c <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2200      	movs	r2, #0
 800870a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2202      	movs	r2, #2
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fbd9 	bl	8008eca <USBD_CtlSendData>
          break;
 8008718:	e004      	b.n	8008724 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fb63 	bl	8008de8 <USBD_CtlError>
        break;
 8008722:	bf00      	nop
      }
      break;
 8008724:	e004      	b.n	8008730 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fb5d 	bl	8008de8 <USBD_CtlError>
      break;
 800872e:	bf00      	nop
    }
    break;
 8008730:	e004      	b.n	800873c <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fb57 	bl	8008de8 <USBD_CtlError>
    break;
 800873a:	bf00      	nop
  }

  return ret;
 800873c:	7bfb      	ldrb	r3, [r7, #15]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
	...

08008748 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008752:	2300      	movs	r3, #0
 8008754:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008756:	2300      	movs	r3, #0
 8008758:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800875a:	2300      	movs	r3, #0
 800875c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	885b      	ldrh	r3, [r3, #2]
 8008762:	0a1b      	lsrs	r3, r3, #8
 8008764:	b29b      	uxth	r3, r3
 8008766:	3b01      	subs	r3, #1
 8008768:	2b0e      	cmp	r3, #14
 800876a:	f200 8152 	bhi.w	8008a12 <USBD_GetDescriptor+0x2ca>
 800876e:	a201      	add	r2, pc, #4	; (adr r2, 8008774 <USBD_GetDescriptor+0x2c>)
 8008770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008774:	080087e5 	.word	0x080087e5
 8008778:	080087fd 	.word	0x080087fd
 800877c:	0800883d 	.word	0x0800883d
 8008780:	08008a13 	.word	0x08008a13
 8008784:	08008a13 	.word	0x08008a13
 8008788:	080089b3 	.word	0x080089b3
 800878c:	080089df 	.word	0x080089df
 8008790:	08008a13 	.word	0x08008a13
 8008794:	08008a13 	.word	0x08008a13
 8008798:	08008a13 	.word	0x08008a13
 800879c:	08008a13 	.word	0x08008a13
 80087a0:	08008a13 	.word	0x08008a13
 80087a4:	08008a13 	.word	0x08008a13
 80087a8:	08008a13 	.word	0x08008a13
 80087ac:	080087b1 	.word	0x080087b1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00b      	beq.n	80087d4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c2:	69db      	ldr	r3, [r3, #28]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	7c12      	ldrb	r2, [r2, #16]
 80087c8:	f107 0108 	add.w	r1, r7, #8
 80087cc:	4610      	mov	r0, r2
 80087ce:	4798      	blx	r3
 80087d0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80087d2:	e126      	b.n	8008a22 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fb06 	bl	8008de8 <USBD_CtlError>
      err++;
 80087dc:	7afb      	ldrb	r3, [r7, #11]
 80087de:	3301      	adds	r3, #1
 80087e0:	72fb      	strb	r3, [r7, #11]
    break;
 80087e2:	e11e      	b.n	8008a22 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	7c12      	ldrb	r2, [r2, #16]
 80087f0:	f107 0108 	add.w	r1, r7, #8
 80087f4:	4610      	mov	r0, r2
 80087f6:	4798      	blx	r3
 80087f8:	60f8      	str	r0, [r7, #12]
    break;
 80087fa:	e112      	b.n	8008a22 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	7c1b      	ldrb	r3, [r3, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10d      	bne.n	8008820 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800880a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880c:	f107 0208 	add.w	r2, r7, #8
 8008810:	4610      	mov	r0, r2
 8008812:	4798      	blx	r3
 8008814:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	3301      	adds	r3, #1
 800881a:	2202      	movs	r2, #2
 800881c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800881e:	e100      	b.n	8008a22 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008828:	f107 0208 	add.w	r2, r7, #8
 800882c:	4610      	mov	r0, r2
 800882e:	4798      	blx	r3
 8008830:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3301      	adds	r3, #1
 8008836:	2202      	movs	r2, #2
 8008838:	701a      	strb	r2, [r3, #0]
    break;
 800883a:	e0f2      	b.n	8008a22 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	885b      	ldrh	r3, [r3, #2]
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b05      	cmp	r3, #5
 8008844:	f200 80ac 	bhi.w	80089a0 <USBD_GetDescriptor+0x258>
 8008848:	a201      	add	r2, pc, #4	; (adr r2, 8008850 <USBD_GetDescriptor+0x108>)
 800884a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884e:	bf00      	nop
 8008850:	08008869 	.word	0x08008869
 8008854:	0800889d 	.word	0x0800889d
 8008858:	080088d1 	.word	0x080088d1
 800885c:	08008905 	.word	0x08008905
 8008860:	08008939 	.word	0x08008939
 8008864:	0800896d 	.word	0x0800896d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00b      	beq.n	800888c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	7c12      	ldrb	r2, [r2, #16]
 8008880:	f107 0108 	add.w	r1, r7, #8
 8008884:	4610      	mov	r0, r2
 8008886:	4798      	blx	r3
 8008888:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800888a:	e091      	b.n	80089b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 faaa 	bl	8008de8 <USBD_CtlError>
        err++;
 8008894:	7afb      	ldrb	r3, [r7, #11]
 8008896:	3301      	adds	r3, #1
 8008898:	72fb      	strb	r3, [r7, #11]
      break;
 800889a:	e089      	b.n	80089b0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00b      	beq.n	80088c0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	7c12      	ldrb	r2, [r2, #16]
 80088b4:	f107 0108 	add.w	r1, r7, #8
 80088b8:	4610      	mov	r0, r2
 80088ba:	4798      	blx	r3
 80088bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088be:	e077      	b.n	80089b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fa90 	bl	8008de8 <USBD_CtlError>
        err++;
 80088c8:	7afb      	ldrb	r3, [r7, #11]
 80088ca:	3301      	adds	r3, #1
 80088cc:	72fb      	strb	r3, [r7, #11]
      break;
 80088ce:	e06f      	b.n	80089b0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00b      	beq.n	80088f4 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	7c12      	ldrb	r2, [r2, #16]
 80088e8:	f107 0108 	add.w	r1, r7, #8
 80088ec:	4610      	mov	r0, r2
 80088ee:	4798      	blx	r3
 80088f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088f2:	e05d      	b.n	80089b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fa76 	bl	8008de8 <USBD_CtlError>
        err++;
 80088fc:	7afb      	ldrb	r3, [r7, #11]
 80088fe:	3301      	adds	r3, #1
 8008900:	72fb      	strb	r3, [r7, #11]
      break;
 8008902:	e055      	b.n	80089b0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00b      	beq.n	8008928 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	7c12      	ldrb	r2, [r2, #16]
 800891c:	f107 0108 	add.w	r1, r7, #8
 8008920:	4610      	mov	r0, r2
 8008922:	4798      	blx	r3
 8008924:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008926:	e043      	b.n	80089b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fa5c 	bl	8008de8 <USBD_CtlError>
        err++;
 8008930:	7afb      	ldrb	r3, [r7, #11]
 8008932:	3301      	adds	r3, #1
 8008934:	72fb      	strb	r3, [r7, #11]
      break;
 8008936:	e03b      	b.n	80089b0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00b      	beq.n	800895c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	7c12      	ldrb	r2, [r2, #16]
 8008950:	f107 0108 	add.w	r1, r7, #8
 8008954:	4610      	mov	r0, r2
 8008956:	4798      	blx	r3
 8008958:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800895a:	e029      	b.n	80089b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fa42 	bl	8008de8 <USBD_CtlError>
        err++;
 8008964:	7afb      	ldrb	r3, [r7, #11]
 8008966:	3301      	adds	r3, #1
 8008968:	72fb      	strb	r3, [r7, #11]
      break;
 800896a:	e021      	b.n	80089b0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00b      	beq.n	8008990 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	7c12      	ldrb	r2, [r2, #16]
 8008984:	f107 0108 	add.w	r1, r7, #8
 8008988:	4610      	mov	r0, r2
 800898a:	4798      	blx	r3
 800898c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800898e:	e00f      	b.n	80089b0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fa28 	bl	8008de8 <USBD_CtlError>
        err++;
 8008998:	7afb      	ldrb	r3, [r7, #11]
 800899a:	3301      	adds	r3, #1
 800899c:	72fb      	strb	r3, [r7, #11]
      break;
 800899e:	e007      	b.n	80089b0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fa20 	bl	8008de8 <USBD_CtlError>
      err++;
 80089a8:	7afb      	ldrb	r3, [r7, #11]
 80089aa:	3301      	adds	r3, #1
 80089ac:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80089ae:	bf00      	nop
    }
    break;
 80089b0:	e037      	b.n	8008a22 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	7c1b      	ldrb	r3, [r3, #16]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d109      	bne.n	80089ce <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c2:	f107 0208 	add.w	r2, r7, #8
 80089c6:	4610      	mov	r0, r2
 80089c8:	4798      	blx	r3
 80089ca:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80089cc:	e029      	b.n	8008a22 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fa09 	bl	8008de8 <USBD_CtlError>
      err++;
 80089d6:	7afb      	ldrb	r3, [r7, #11]
 80089d8:	3301      	adds	r3, #1
 80089da:	72fb      	strb	r3, [r7, #11]
    break;
 80089dc:	e021      	b.n	8008a22 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	7c1b      	ldrb	r3, [r3, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10d      	bne.n	8008a02 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ee:	f107 0208 	add.w	r2, r7, #8
 80089f2:	4610      	mov	r0, r2
 80089f4:	4798      	blx	r3
 80089f6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	3301      	adds	r3, #1
 80089fc:	2207      	movs	r2, #7
 80089fe:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008a00:	e00f      	b.n	8008a22 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f9ef 	bl	8008de8 <USBD_CtlError>
      err++;
 8008a0a:	7afb      	ldrb	r3, [r7, #11]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	72fb      	strb	r3, [r7, #11]
    break;
 8008a10:	e007      	b.n	8008a22 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f9e7 	bl	8008de8 <USBD_CtlError>
    err++;
 8008a1a:	7afb      	ldrb	r3, [r7, #11]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	72fb      	strb	r3, [r7, #11]
    break;
 8008a20:	bf00      	nop
  }

  if (err != 0U)
 8008a22:	7afb      	ldrb	r3, [r7, #11]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d11e      	bne.n	8008a66 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	88db      	ldrh	r3, [r3, #6]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d016      	beq.n	8008a5e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008a30:	893b      	ldrh	r3, [r7, #8]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00e      	beq.n	8008a54 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	88da      	ldrh	r2, [r3, #6]
 8008a3a:	893b      	ldrh	r3, [r7, #8]
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	bf28      	it	cs
 8008a40:	4613      	movcs	r3, r2
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a46:	893b      	ldrh	r3, [r7, #8]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	68f9      	ldr	r1, [r7, #12]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fa3c 	bl	8008eca <USBD_CtlSendData>
 8008a52:	e009      	b.n	8008a68 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f9c6 	bl	8008de8 <USBD_CtlError>
 8008a5c:	e004      	b.n	8008a68 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa8d 	bl	8008f7e <USBD_CtlSendStatus>
 8008a64:	e000      	b.n	8008a68 <USBD_GetDescriptor+0x320>
    return;
 8008a66:	bf00      	nop
    }
  }
}
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop

08008a70 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	889b      	ldrh	r3, [r3, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d130      	bne.n	8008ae4 <USBD_SetAddress+0x74>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	88db      	ldrh	r3, [r3, #6]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d12c      	bne.n	8008ae4 <USBD_SetAddress+0x74>
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	885b      	ldrh	r3, [r3, #2]
 8008a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8008a90:	d828      	bhi.n	8008ae4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	885b      	ldrh	r3, [r3, #2]
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d104      	bne.n	8008ab2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f99c 	bl	8008de8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab0:	e01c      	b.n	8008aec <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	7bfa      	ldrb	r2, [r7, #15]
 8008ab6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
 8008abc:	4619      	mov	r1, r3
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fe87 	bl	80097d2 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fa5a 	bl	8008f7e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d004      	beq.n	8008ada <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad8:	e008      	b.n	8008aec <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae2:	e003      	b.n	8008aec <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f97e 	bl	8008de8 <USBD_CtlError>
  }
}
 8008aec:	bf00      	nop
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	885b      	ldrh	r3, [r3, #2]
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	4b4b      	ldr	r3, [pc, #300]	; (8008c38 <USBD_SetConfig+0x144>)
 8008b0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b0c:	4b4a      	ldr	r3, [pc, #296]	; (8008c38 <USBD_SetConfig+0x144>)
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d905      	bls.n	8008b20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f966 	bl	8008de8 <USBD_CtlError>
    return USBD_FAIL;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e087      	b.n	8008c30 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d002      	beq.n	8008b30 <USBD_SetConfig+0x3c>
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d025      	beq.n	8008b7a <USBD_SetConfig+0x86>
 8008b2e:	e071      	b.n	8008c14 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008b30:	4b41      	ldr	r3, [pc, #260]	; (8008c38 <USBD_SetConfig+0x144>)
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d01c      	beq.n	8008b72 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008b38:	4b3f      	ldr	r3, [pc, #252]	; (8008c38 <USBD_SetConfig+0x144>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b42:	4b3d      	ldr	r3, [pc, #244]	; (8008c38 <USBD_SetConfig+0x144>)
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff f9bd 	bl	8007ec8 <USBD_SetClassConfig>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d004      	beq.n	8008b62 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f944 	bl	8008de8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008b60:	e065      	b.n	8008c2e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fa0b 	bl	8008f7e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2203      	movs	r2, #3
 8008b6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008b70:	e05d      	b.n	8008c2e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fa03 	bl	8008f7e <USBD_CtlSendStatus>
    break;
 8008b78:	e059      	b.n	8008c2e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008b7a:	4b2f      	ldr	r3, [pc, #188]	; (8008c38 <USBD_SetConfig+0x144>)
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d112      	bne.n	8008ba8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2202      	movs	r2, #2
 8008b86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008b8a:	4b2b      	ldr	r3, [pc, #172]	; (8008c38 <USBD_SetConfig+0x144>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b94:	4b28      	ldr	r3, [pc, #160]	; (8008c38 <USBD_SetConfig+0x144>)
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7ff f9b0 	bl	8007f00 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f9ec 	bl	8008f7e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008ba6:	e042      	b.n	8008c2e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008ba8:	4b23      	ldr	r3, [pc, #140]	; (8008c38 <USBD_SetConfig+0x144>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	461a      	mov	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d02a      	beq.n	8008c0c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7ff f99e 	bl	8007f00 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008bc4:	4b1c      	ldr	r3, [pc, #112]	; (8008c38 <USBD_SetConfig+0x144>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bce:	4b1a      	ldr	r3, [pc, #104]	; (8008c38 <USBD_SetConfig+0x144>)
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7ff f977 	bl	8007ec8 <USBD_SetClassConfig>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00f      	beq.n	8008c04 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f8fe 	bl	8008de8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7ff f983 	bl	8007f00 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008c02:	e014      	b.n	8008c2e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f9ba 	bl	8008f7e <USBD_CtlSendStatus>
    break;
 8008c0a:	e010      	b.n	8008c2e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f9b6 	bl	8008f7e <USBD_CtlSendStatus>
    break;
 8008c12:	e00c      	b.n	8008c2e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f8e6 	bl	8008de8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c1c:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <USBD_SetConfig+0x144>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7ff f96c 	bl	8007f00 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c2c:	bf00      	nop
  }

  return ret;
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	20000258 	.word	0x20000258

08008c3c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	88db      	ldrh	r3, [r3, #6]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d004      	beq.n	8008c58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f8c9 	bl	8008de8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008c56:	e021      	b.n	8008c9c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	db17      	blt.n	8008c92 <USBD_GetConfig+0x56>
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	dd02      	ble.n	8008c6c <USBD_GetConfig+0x30>
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d00b      	beq.n	8008c82 <USBD_GetConfig+0x46>
 8008c6a:	e012      	b.n	8008c92 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3308      	adds	r3, #8
 8008c76:	2201      	movs	r2, #1
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f925 	bl	8008eca <USBD_CtlSendData>
      break;
 8008c80:	e00c      	b.n	8008c9c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	3304      	adds	r3, #4
 8008c86:	2201      	movs	r2, #1
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 f91d 	bl	8008eca <USBD_CtlSendData>
      break;
 8008c90:	e004      	b.n	8008c9c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f8a7 	bl	8008de8 <USBD_CtlError>
      break;
 8008c9a:	bf00      	nop
}
 8008c9c:	bf00      	nop
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d81e      	bhi.n	8008cf8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	88db      	ldrh	r3, [r3, #6]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d004      	beq.n	8008ccc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f88f 	bl	8008de8 <USBD_CtlError>
      break;
 8008cca:	e01a      	b.n	8008d02 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d005      	beq.n	8008ce8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	f043 0202 	orr.w	r2, r3, #2
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	330c      	adds	r3, #12
 8008cec:	2202      	movs	r2, #2
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f8ea 	bl	8008eca <USBD_CtlSendData>
    break;
 8008cf6:	e004      	b.n	8008d02 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f874 	bl	8008de8 <USBD_CtlError>
    break;
 8008d00:	bf00      	nop
  }
}
 8008d02:	bf00      	nop
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b082      	sub	sp, #8
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	885b      	ldrh	r3, [r3, #2]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d106      	bne.n	8008d2a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f92a 	bl	8008f7e <USBD_CtlSendStatus>
  }
}
 8008d2a:	bf00      	nop
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b082      	sub	sp, #8
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d42:	3b01      	subs	r3, #1
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d80b      	bhi.n	8008d60 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	885b      	ldrh	r3, [r3, #2]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d10c      	bne.n	8008d6a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f910 	bl	8008f7e <USBD_CtlSendStatus>
      }
      break;
 8008d5e:	e004      	b.n	8008d6a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f840 	bl	8008de8 <USBD_CtlError>
      break;
 8008d68:	e000      	b.n	8008d6c <USBD_ClrFeature+0x3a>
      break;
 8008d6a:	bf00      	nop
  }
}
 8008d6c:	bf00      	nop
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	781a      	ldrb	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	781a      	ldrb	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f7ff faa8 	bl	80082f4 <SWAPBYTE>
 8008da4:	4603      	mov	r3, r0
 8008da6:	461a      	mov	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	3301      	adds	r3, #1
 8008db0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3301      	adds	r3, #1
 8008db6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f7ff fa9b 	bl	80082f4 <SWAPBYTE>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f7ff fa8e 	bl	80082f4 <SWAPBYTE>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	461a      	mov	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	80da      	strh	r2, [r3, #6]
}
 8008de0:	bf00      	nop
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008df2:	2180      	movs	r1, #128	; 0x80
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fc81 	bl	80096fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fc7d 	bl	80096fc <USBD_LL_StallEP>
}
 8008e02:	bf00      	nop
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b086      	sub	sp, #24
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	60f8      	str	r0, [r7, #12]
 8008e12:	60b9      	str	r1, [r7, #8]
 8008e14:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e16:	2300      	movs	r3, #0
 8008e18:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d036      	beq.n	8008e8e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e24:	6938      	ldr	r0, [r7, #16]
 8008e26:	f000 f836 	bl	8008e96 <USBD_GetLen>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e38:	7dfb      	ldrb	r3, [r7, #23]
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	7812      	ldrb	r2, [r2, #0]
 8008e42:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	3301      	adds	r3, #1
 8008e48:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008e4a:	7dfb      	ldrb	r3, [r7, #23]
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	4413      	add	r3, r2
 8008e50:	2203      	movs	r2, #3
 8008e52:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e54:	7dfb      	ldrb	r3, [r7, #23]
 8008e56:	3301      	adds	r3, #1
 8008e58:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008e5a:	e013      	b.n	8008e84 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	4413      	add	r3, r2
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	7812      	ldrb	r2, [r2, #0]
 8008e66:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	613b      	str	r3, [r7, #16]
    idx++;
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	3301      	adds	r3, #1
 8008e72:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008e74:	7dfb      	ldrb	r3, [r7, #23]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	4413      	add	r3, r2
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	701a      	strb	r2, [r3, #0]
    idx++;
 8008e7e:	7dfb      	ldrb	r3, [r7, #23]
 8008e80:	3301      	adds	r3, #1
 8008e82:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1e7      	bne.n	8008e5c <USBD_GetString+0x52>
 8008e8c:	e000      	b.n	8008e90 <USBD_GetString+0x86>
    return;
 8008e8e:	bf00      	nop
  }
}
 8008e90:	3718      	adds	r7, #24
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b085      	sub	sp, #20
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ea6:	e005      	b.n	8008eb4 <USBD_GetLen+0x1e>
  {
    len++;
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1f5      	bne.n	8008ea8 <USBD_GetLen+0x12>
  }

  return len;
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2202      	movs	r2, #2
 8008eda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	2100      	movs	r1, #0
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f000 fc8d 	bl	8009810 <USBD_LL_Transmit>

  return USBD_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	2100      	movs	r1, #0
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 fc7c 	bl	8009810 <USBD_LL_Transmit>

  return USBD_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2203      	movs	r2, #3
 8008f32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f000 fc80 	bl	8009852 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f000 fc6f 	bl	8009852 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b082      	sub	sp, #8
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2204      	movs	r2, #4
 8008f8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f8e:	2300      	movs	r3, #0
 8008f90:	2200      	movs	r2, #0
 8008f92:	2100      	movs	r1, #0
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fc3b 	bl	8009810 <USBD_LL_Transmit>

  return USBD_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2205      	movs	r2, #5
 8008fb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	2100      	movs	r1, #0
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fc49 	bl	8009852 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
	...

08008fcc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	4912      	ldr	r1, [pc, #72]	; (800901c <MX_USB_Device_Init+0x50>)
 8008fd4:	4812      	ldr	r0, [pc, #72]	; (8009020 <MX_USB_Device_Init+0x54>)
 8008fd6:	f7fe ff09 	bl	8007dec <USBD_Init>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d001      	beq.n	8008fe4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8008fe0:	f7f7 ff6a 	bl	8000eb8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8008fe4:	490f      	ldr	r1, [pc, #60]	; (8009024 <MX_USB_Device_Init+0x58>)
 8008fe6:	480e      	ldr	r0, [pc, #56]	; (8009020 <MX_USB_Device_Init+0x54>)
 8008fe8:	f7fe ff30 	bl	8007e4c <USBD_RegisterClass>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8008ff2:	f7f7 ff61 	bl	8000eb8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8008ff6:	490c      	ldr	r1, [pc, #48]	; (8009028 <MX_USB_Device_Init+0x5c>)
 8008ff8:	4809      	ldr	r0, [pc, #36]	; (8009020 <MX_USB_Device_Init+0x54>)
 8008ffa:	f7fe fe5b 	bl	8007cb4 <USBD_CDC_RegisterInterface>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8009004:	f7f7 ff58 	bl	8000eb8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009008:	4805      	ldr	r0, [pc, #20]	; (8009020 <MX_USB_Device_Init+0x54>)
 800900a:	f7fe ff46 	bl	8007e9a <USBD_Start>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d001      	beq.n	8009018 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8009014:	f7f7 ff50 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009018:	bf00      	nop
 800901a:	bd80      	pop	{r7, pc}
 800901c:	20000130 	.word	0x20000130
 8009020:	2000072c 	.word	0x2000072c
 8009024:	20000018 	.word	0x20000018
 8009028:	2000011c 	.word	0x2000011c

0800902c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009030:	2200      	movs	r2, #0
 8009032:	4905      	ldr	r1, [pc, #20]	; (8009048 <CDC_Init_FS+0x1c>)
 8009034:	4805      	ldr	r0, [pc, #20]	; (800904c <CDC_Init_FS+0x20>)
 8009036:	f7fe fe52 	bl	8007cde <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800903a:	4905      	ldr	r1, [pc, #20]	; (8009050 <CDC_Init_FS+0x24>)
 800903c:	4803      	ldr	r0, [pc, #12]	; (800904c <CDC_Init_FS+0x20>)
 800903e:	f7fe fe67 	bl	8007d10 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009042:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009044:	4618      	mov	r0, r3
 8009046:	bd80      	pop	{r7, pc}
 8009048:	20000de4 	.word	0x20000de4
 800904c:	2000072c 	.word	0x2000072c
 8009050:	200009fc 	.word	0x200009fc

08009054 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009054:	b480      	push	{r7}
 8009056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009058:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800905a:	4618      	mov	r0, r3
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	4603      	mov	r3, r0
 800906c:	6039      	str	r1, [r7, #0]
 800906e:	71fb      	strb	r3, [r7, #7]
 8009070:	4613      	mov	r3, r2
 8009072:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	2b23      	cmp	r3, #35	; 0x23
 8009078:	d84a      	bhi.n	8009110 <CDC_Control_FS+0xac>
 800907a:	a201      	add	r2, pc, #4	; (adr r2, 8009080 <CDC_Control_FS+0x1c>)
 800907c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009080:	08009111 	.word	0x08009111
 8009084:	08009111 	.word	0x08009111
 8009088:	08009111 	.word	0x08009111
 800908c:	08009111 	.word	0x08009111
 8009090:	08009111 	.word	0x08009111
 8009094:	08009111 	.word	0x08009111
 8009098:	08009111 	.word	0x08009111
 800909c:	08009111 	.word	0x08009111
 80090a0:	08009111 	.word	0x08009111
 80090a4:	08009111 	.word	0x08009111
 80090a8:	08009111 	.word	0x08009111
 80090ac:	08009111 	.word	0x08009111
 80090b0:	08009111 	.word	0x08009111
 80090b4:	08009111 	.word	0x08009111
 80090b8:	08009111 	.word	0x08009111
 80090bc:	08009111 	.word	0x08009111
 80090c0:	08009111 	.word	0x08009111
 80090c4:	08009111 	.word	0x08009111
 80090c8:	08009111 	.word	0x08009111
 80090cc:	08009111 	.word	0x08009111
 80090d0:	08009111 	.word	0x08009111
 80090d4:	08009111 	.word	0x08009111
 80090d8:	08009111 	.word	0x08009111
 80090dc:	08009111 	.word	0x08009111
 80090e0:	08009111 	.word	0x08009111
 80090e4:	08009111 	.word	0x08009111
 80090e8:	08009111 	.word	0x08009111
 80090ec:	08009111 	.word	0x08009111
 80090f0:	08009111 	.word	0x08009111
 80090f4:	08009111 	.word	0x08009111
 80090f8:	08009111 	.word	0x08009111
 80090fc:	08009111 	.word	0x08009111
 8009100:	08009111 	.word	0x08009111
 8009104:	08009111 	.word	0x08009111
 8009108:	08009111 	.word	0x08009111
 800910c:	08009111 	.word	0x08009111
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009110:	bf00      	nop
  }

  return (USBD_OK);
 8009112:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009114:	4618      	mov	r0, r3
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7f7 f917 	bl	8000360 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009132:	6879      	ldr	r1, [r7, #4]
 8009134:	4805      	ldr	r0, [pc, #20]	; (800914c <CDC_Receive_FS+0x2c>)
 8009136:	f7fe fdeb 	bl	8007d10 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800913a:	4804      	ldr	r0, [pc, #16]	; (800914c <CDC_Receive_FS+0x2c>)
 800913c:	f7fe fe2c 	bl	8007d98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009140:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009142:	4618      	mov	r0, r3
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	2000072c 	.word	0x2000072c

08009150 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009160:	4b0d      	ldr	r3, [pc, #52]	; (8009198 <CDC_Transmit_FS+0x48>)
 8009162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009166:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009172:	2301      	movs	r3, #1
 8009174:	e00b      	b.n	800918e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009176:	887b      	ldrh	r3, [r7, #2]
 8009178:	461a      	mov	r2, r3
 800917a:	6879      	ldr	r1, [r7, #4]
 800917c:	4806      	ldr	r0, [pc, #24]	; (8009198 <CDC_Transmit_FS+0x48>)
 800917e:	f7fe fdae 	bl	8007cde <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009182:	4805      	ldr	r0, [pc, #20]	; (8009198 <CDC_Transmit_FS+0x48>)
 8009184:	f7fe fdd8 	bl	8007d38 <USBD_CDC_TransmitPacket>
 8009188:	4603      	mov	r3, r0
 800918a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800918c:	7bfb      	ldrb	r3, [r7, #15]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	2000072c 	.word	0x2000072c

0800919c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800919c:	b480      	push	{r7}
 800919e:	b087      	sub	sp, #28
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	4613      	mov	r3, r2
 80091a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80091ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	371c      	adds	r7, #28
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
	...

080091c0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	4603      	mov	r3, r0
 80091c8:	6039      	str	r1, [r7, #0]
 80091ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	2212      	movs	r2, #18
 80091d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80091d2:	4b03      	ldr	r3, [pc, #12]	; (80091e0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr
 80091e0:	20000150 	.word	0x20000150

080091e4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	4603      	mov	r3, r0
 80091ec:	6039      	str	r1, [r7, #0]
 80091ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	2204      	movs	r2, #4
 80091f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091f6:	4b03      	ldr	r3, [pc, #12]	; (8009204 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	20000164 	.word	0x20000164

08009208 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	4603      	mov	r3, r0
 8009210:	6039      	str	r1, [r7, #0]
 8009212:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009214:	79fb      	ldrb	r3, [r7, #7]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d105      	bne.n	8009226 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	4907      	ldr	r1, [pc, #28]	; (800923c <USBD_CDC_ProductStrDescriptor+0x34>)
 800921e:	4808      	ldr	r0, [pc, #32]	; (8009240 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009220:	f7ff fdf3 	bl	8008e0a <USBD_GetString>
 8009224:	e004      	b.n	8009230 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	4904      	ldr	r1, [pc, #16]	; (800923c <USBD_CDC_ProductStrDescriptor+0x34>)
 800922a:	4805      	ldr	r0, [pc, #20]	; (8009240 <USBD_CDC_ProductStrDescriptor+0x38>)
 800922c:	f7ff fded 	bl	8008e0a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009230:	4b02      	ldr	r3, [pc, #8]	; (800923c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	200011cc 	.word	0x200011cc
 8009240:	08009a44 	.word	0x08009a44

08009244 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	4603      	mov	r3, r0
 800924c:	6039      	str	r1, [r7, #0]
 800924e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	4904      	ldr	r1, [pc, #16]	; (8009264 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009254:	4804      	ldr	r0, [pc, #16]	; (8009268 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009256:	f7ff fdd8 	bl	8008e0a <USBD_GetString>
  return USBD_StrDesc;
 800925a:	4b02      	ldr	r3, [pc, #8]	; (8009264 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800925c:	4618      	mov	r0, r3
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	200011cc 	.word	0x200011cc
 8009268:	08009a5c 	.word	0x08009a5c

0800926c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	4603      	mov	r3, r0
 8009274:	6039      	str	r1, [r7, #0]
 8009276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	221a      	movs	r2, #26
 800927c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800927e:	f000 f843 	bl	8009308 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009282:	4b02      	ldr	r3, [pc, #8]	; (800928c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	20000168 	.word	0x20000168

08009290 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	4603      	mov	r3, r0
 8009298:	6039      	str	r1, [r7, #0]
 800929a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800929c:	79fb      	ldrb	r3, [r7, #7]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d105      	bne.n	80092ae <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	4907      	ldr	r1, [pc, #28]	; (80092c4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80092a6:	4808      	ldr	r0, [pc, #32]	; (80092c8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80092a8:	f7ff fdaf 	bl	8008e0a <USBD_GetString>
 80092ac:	e004      	b.n	80092b8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	4904      	ldr	r1, [pc, #16]	; (80092c4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80092b2:	4805      	ldr	r0, [pc, #20]	; (80092c8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80092b4:	f7ff fda9 	bl	8008e0a <USBD_GetString>
  }
  return USBD_StrDesc;
 80092b8:	4b02      	ldr	r3, [pc, #8]	; (80092c4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	200011cc 	.word	0x200011cc
 80092c8:	08009a70 	.word	0x08009a70

080092cc <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	4603      	mov	r3, r0
 80092d4:	6039      	str	r1, [r7, #0]
 80092d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092d8:	79fb      	ldrb	r3, [r7, #7]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d105      	bne.n	80092ea <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	4907      	ldr	r1, [pc, #28]	; (8009300 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80092e2:	4808      	ldr	r0, [pc, #32]	; (8009304 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80092e4:	f7ff fd91 	bl	8008e0a <USBD_GetString>
 80092e8:	e004      	b.n	80092f4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	4904      	ldr	r1, [pc, #16]	; (8009300 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80092ee:	4805      	ldr	r0, [pc, #20]	; (8009304 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80092f0:	f7ff fd8b 	bl	8008e0a <USBD_GetString>
  }
  return USBD_StrDesc;
 80092f4:	4b02      	ldr	r3, [pc, #8]	; (8009300 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	200011cc 	.word	0x200011cc
 8009304:	08009a7c 	.word	0x08009a7c

08009308 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800930e:	4b0f      	ldr	r3, [pc, #60]	; (800934c <Get_SerialNum+0x44>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009314:	4b0e      	ldr	r3, [pc, #56]	; (8009350 <Get_SerialNum+0x48>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800931a:	4b0e      	ldr	r3, [pc, #56]	; (8009354 <Get_SerialNum+0x4c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4413      	add	r3, r2
 8009326:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d009      	beq.n	8009342 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800932e:	2208      	movs	r2, #8
 8009330:	4909      	ldr	r1, [pc, #36]	; (8009358 <Get_SerialNum+0x50>)
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f000 f814 	bl	8009360 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009338:	2204      	movs	r2, #4
 800933a:	4908      	ldr	r1, [pc, #32]	; (800935c <Get_SerialNum+0x54>)
 800933c:	68b8      	ldr	r0, [r7, #8]
 800933e:	f000 f80f 	bl	8009360 <IntToUnicode>
  }
}
 8009342:	bf00      	nop
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	1fff7590 	.word	0x1fff7590
 8009350:	1fff7594 	.word	0x1fff7594
 8009354:	1fff7598 	.word	0x1fff7598
 8009358:	2000016a 	.word	0x2000016a
 800935c:	2000017a 	.word	0x2000017a

08009360 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009360:	b480      	push	{r7}
 8009362:	b087      	sub	sp, #28
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	4613      	mov	r3, r2
 800936c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009372:	2300      	movs	r3, #0
 8009374:	75fb      	strb	r3, [r7, #23]
 8009376:	e027      	b.n	80093c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	0f1b      	lsrs	r3, r3, #28
 800937c:	2b09      	cmp	r3, #9
 800937e:	d80b      	bhi.n	8009398 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	0f1b      	lsrs	r3, r3, #28
 8009384:	b2da      	uxtb	r2, r3
 8009386:	7dfb      	ldrb	r3, [r7, #23]
 8009388:	005b      	lsls	r3, r3, #1
 800938a:	4619      	mov	r1, r3
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	440b      	add	r3, r1
 8009390:	3230      	adds	r2, #48	; 0x30
 8009392:	b2d2      	uxtb	r2, r2
 8009394:	701a      	strb	r2, [r3, #0]
 8009396:	e00a      	b.n	80093ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	0f1b      	lsrs	r3, r3, #28
 800939c:	b2da      	uxtb	r2, r3
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	4619      	mov	r1, r3
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	440b      	add	r3, r1
 80093a8:	3237      	adds	r2, #55	; 0x37
 80093aa:	b2d2      	uxtb	r2, r2
 80093ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	011b      	lsls	r3, r3, #4
 80093b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093b4:	7dfb      	ldrb	r3, [r7, #23]
 80093b6:	005b      	lsls	r3, r3, #1
 80093b8:	3301      	adds	r3, #1
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	4413      	add	r3, r2
 80093be:	2200      	movs	r2, #0
 80093c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093c2:	7dfb      	ldrb	r3, [r7, #23]
 80093c4:	3301      	adds	r3, #1
 80093c6:	75fb      	strb	r3, [r7, #23]
 80093c8:	7dfa      	ldrb	r2, [r7, #23]
 80093ca:	79fb      	ldrb	r3, [r7, #7]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d3d3      	bcc.n	8009378 <IntToUnicode+0x18>
  }
}
 80093d0:	bf00      	nop
 80093d2:	371c      	adds	r7, #28
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a0d      	ldr	r2, [pc, #52]	; (8009420 <HAL_PCD_MspInit+0x44>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d113      	bne.n	8009416 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80093ee:	4b0d      	ldr	r3, [pc, #52]	; (8009424 <HAL_PCD_MspInit+0x48>)
 80093f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093f2:	4a0c      	ldr	r2, [pc, #48]	; (8009424 <HAL_PCD_MspInit+0x48>)
 80093f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80093f8:	6593      	str	r3, [r2, #88]	; 0x58
 80093fa:	4b0a      	ldr	r3, [pc, #40]	; (8009424 <HAL_PCD_MspInit+0x48>)
 80093fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009402:	60fb      	str	r3, [r7, #12]
 8009404:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009406:	2200      	movs	r2, #0
 8009408:	2100      	movs	r1, #0
 800940a:	2014      	movs	r0, #20
 800940c:	f7f8 f92b 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009410:	2014      	movs	r0, #20
 8009412:	f7f8 f942 	bl	800169a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009416:	bf00      	nop
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	40005c00 	.word	0x40005c00
 8009424:	40021000 	.word	0x40021000

08009428 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800943c:	4619      	mov	r1, r3
 800943e:	4610      	mov	r0, r2
 8009440:	f7fe fd76 	bl	8007f30 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009444:	bf00      	nop
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	460b      	mov	r3, r1
 8009456:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800945e:	78fa      	ldrb	r2, [r7, #3]
 8009460:	6879      	ldr	r1, [r7, #4]
 8009462:	4613      	mov	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	00db      	lsls	r3, r3, #3
 800946a:	440b      	add	r3, r1
 800946c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	78fb      	ldrb	r3, [r7, #3]
 8009474:	4619      	mov	r1, r3
 8009476:	f7fe fdae 	bl	8007fd6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b082      	sub	sp, #8
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	460b      	mov	r3, r1
 800948c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009494:	78fa      	ldrb	r2, [r7, #3]
 8009496:	6879      	ldr	r1, [r7, #4]
 8009498:	4613      	mov	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	00db      	lsls	r3, r3, #3
 80094a0:	440b      	add	r3, r1
 80094a2:	333c      	adds	r3, #60	; 0x3c
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	78fb      	ldrb	r3, [r7, #3]
 80094a8:	4619      	mov	r1, r3
 80094aa:	f7fe fdf7 	bl	800809c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80094ae:	bf00      	nop
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b082      	sub	sp, #8
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fe fefb 	bl	80082c0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80094ca:	bf00      	nop
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80094da:	2301      	movs	r3, #1
 80094dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d001      	beq.n	80094ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80094e6:	f7f7 fce7 	bl	8000eb8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80094f0:	7bfa      	ldrb	r2, [r7, #15]
 80094f2:	4611      	mov	r1, r2
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fe fea8 	bl	800824a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009500:	4618      	mov	r0, r3
 8009502:	f7fe fe61 	bl	80081c8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009506:	bf00      	nop
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
	...

08009510 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800951e:	4618      	mov	r0, r3
 8009520:	f7fe fea3 	bl	800826a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d005      	beq.n	8009538 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800952c:	4b04      	ldr	r3, [pc, #16]	; (8009540 <HAL_PCD_SuspendCallback+0x30>)
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	4a03      	ldr	r2, [pc, #12]	; (8009540 <HAL_PCD_SuspendCallback+0x30>)
 8009532:	f043 0306 	orr.w	r3, r3, #6
 8009536:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009538:	bf00      	nop
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	e000ed00 	.word	0xe000ed00

08009544 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d007      	beq.n	8009564 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009554:	4b08      	ldr	r3, [pc, #32]	; (8009578 <HAL_PCD_ResumeCallback+0x34>)
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	4a07      	ldr	r2, [pc, #28]	; (8009578 <HAL_PCD_ResumeCallback+0x34>)
 800955a:	f023 0306 	bic.w	r3, r3, #6
 800955e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009560:	f000 f9fa 	bl	8009958 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800956a:	4618      	mov	r0, r3
 800956c:	f7fe fe92 	bl	8008294 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009570:	bf00      	nop
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	e000ed00 	.word	0xe000ed00

0800957c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009584:	4a2b      	ldr	r2, [pc, #172]	; (8009634 <USBD_LL_Init+0xb8>)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a29      	ldr	r2, [pc, #164]	; (8009634 <USBD_LL_Init+0xb8>)
 8009590:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009594:	4b27      	ldr	r3, [pc, #156]	; (8009634 <USBD_LL_Init+0xb8>)
 8009596:	4a28      	ldr	r2, [pc, #160]	; (8009638 <USBD_LL_Init+0xbc>)
 8009598:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800959a:	4b26      	ldr	r3, [pc, #152]	; (8009634 <USBD_LL_Init+0xb8>)
 800959c:	2208      	movs	r2, #8
 800959e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80095a0:	4b24      	ldr	r3, [pc, #144]	; (8009634 <USBD_LL_Init+0xb8>)
 80095a2:	2202      	movs	r2, #2
 80095a4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80095a6:	4b23      	ldr	r3, [pc, #140]	; (8009634 <USBD_LL_Init+0xb8>)
 80095a8:	2202      	movs	r2, #2
 80095aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80095ac:	4b21      	ldr	r3, [pc, #132]	; (8009634 <USBD_LL_Init+0xb8>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80095b2:	4b20      	ldr	r3, [pc, #128]	; (8009634 <USBD_LL_Init+0xb8>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80095b8:	4b1e      	ldr	r3, [pc, #120]	; (8009634 <USBD_LL_Init+0xb8>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80095be:	4b1d      	ldr	r3, [pc, #116]	; (8009634 <USBD_LL_Init+0xb8>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80095c4:	481b      	ldr	r0, [pc, #108]	; (8009634 <USBD_LL_Init+0xb8>)
 80095c6:	f7f8 fa37 	bl	8001a38 <HAL_PCD_Init>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80095d0:	f7f7 fc72 	bl	8000eb8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095da:	2318      	movs	r3, #24
 80095dc:	2200      	movs	r2, #0
 80095de:	2100      	movs	r1, #0
 80095e0:	f7f9 fd25 	bl	800302e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095ea:	2358      	movs	r3, #88	; 0x58
 80095ec:	2200      	movs	r2, #0
 80095ee:	2180      	movs	r1, #128	; 0x80
 80095f0:	f7f9 fd1d 	bl	800302e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095fa:	23c0      	movs	r3, #192	; 0xc0
 80095fc:	2200      	movs	r2, #0
 80095fe:	2181      	movs	r1, #129	; 0x81
 8009600:	f7f9 fd15 	bl	800302e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800960a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800960e:	2200      	movs	r2, #0
 8009610:	2101      	movs	r1, #1
 8009612:	f7f9 fd0c 	bl	800302e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800961c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009620:	2200      	movs	r2, #0
 8009622:	2182      	movs	r1, #130	; 0x82
 8009624:	f7f9 fd03 	bl	800302e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	200013cc 	.word	0x200013cc
 8009638:	40005c00 	.word	0x40005c00

0800963c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009652:	4618      	mov	r0, r3
 8009654:	f7f8 fad5 	bl	8001c02 <HAL_PCD_Start>
 8009658:	4603      	mov	r3, r0
 800965a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800965c:	7bfb      	ldrb	r3, [r7, #15]
 800965e:	4618      	mov	r0, r3
 8009660:	f000 f980 	bl	8009964 <USBD_Get_USB_Status>
 8009664:	4603      	mov	r3, r0
 8009666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009668:	7bbb      	ldrb	r3, [r7, #14]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b084      	sub	sp, #16
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	4608      	mov	r0, r1
 800967c:	4611      	mov	r1, r2
 800967e:	461a      	mov	r2, r3
 8009680:	4603      	mov	r3, r0
 8009682:	70fb      	strb	r3, [r7, #3]
 8009684:	460b      	mov	r3, r1
 8009686:	70bb      	strb	r3, [r7, #2]
 8009688:	4613      	mov	r3, r2
 800968a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800969a:	78bb      	ldrb	r3, [r7, #2]
 800969c:	883a      	ldrh	r2, [r7, #0]
 800969e:	78f9      	ldrb	r1, [r7, #3]
 80096a0:	f7f8 fc44 	bl	8001f2c <HAL_PCD_EP_Open>
 80096a4:	4603      	mov	r3, r0
 80096a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 f95a 	bl	8009964 <USBD_Get_USB_Status>
 80096b0:	4603      	mov	r3, r0
 80096b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	460b      	mov	r3, r1
 80096c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ce:	2300      	movs	r3, #0
 80096d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096d8:	78fa      	ldrb	r2, [r7, #3]
 80096da:	4611      	mov	r1, r2
 80096dc:	4618      	mov	r0, r3
 80096de:	f7f8 fc8b 	bl	8001ff8 <HAL_PCD_EP_Close>
 80096e2:	4603      	mov	r3, r0
 80096e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f000 f93b 	bl	8009964 <USBD_Get_USB_Status>
 80096ee:	4603      	mov	r3, r0
 80096f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	460b      	mov	r3, r1
 8009706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009716:	78fa      	ldrb	r2, [r7, #3]
 8009718:	4611      	mov	r1, r2
 800971a:	4618      	mov	r0, r3
 800971c:	f7f8 fd4c 	bl	80021b8 <HAL_PCD_EP_SetStall>
 8009720:	4603      	mov	r3, r0
 8009722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 f91c 	bl	8009964 <USBD_Get_USB_Status>
 800972c:	4603      	mov	r3, r0
 800972e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009730:	7bbb      	ldrb	r3, [r7, #14]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009754:	78fa      	ldrb	r2, [r7, #3]
 8009756:	4611      	mov	r1, r2
 8009758:	4618      	mov	r0, r3
 800975a:	f7f8 fd8d 	bl	8002278 <HAL_PCD_EP_ClrStall>
 800975e:	4603      	mov	r3, r0
 8009760:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009762:	7bfb      	ldrb	r3, [r7, #15]
 8009764:	4618      	mov	r0, r3
 8009766:	f000 f8fd 	bl	8009964 <USBD_Get_USB_Status>
 800976a:	4603      	mov	r3, r0
 800976c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800976e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800978a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800978c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009790:	2b00      	cmp	r3, #0
 8009792:	da0c      	bge.n	80097ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009794:	78fb      	ldrb	r3, [r7, #3]
 8009796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800979a:	68f9      	ldr	r1, [r7, #12]
 800979c:	1c5a      	adds	r2, r3, #1
 800979e:	4613      	mov	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	00db      	lsls	r3, r3, #3
 80097a6:	440b      	add	r3, r1
 80097a8:	3302      	adds	r3, #2
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	e00b      	b.n	80097c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097ae:	78fb      	ldrb	r3, [r7, #3]
 80097b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097b4:	68f9      	ldr	r1, [r7, #12]
 80097b6:	4613      	mov	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	00db      	lsls	r3, r3, #3
 80097be:	440b      	add	r3, r1
 80097c0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80097c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	460b      	mov	r3, r1
 80097dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097ec:	78fa      	ldrb	r2, [r7, #3]
 80097ee:	4611      	mov	r1, r2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7f8 fb76 	bl	8001ee2 <HAL_PCD_SetAddress>
 80097f6:	4603      	mov	r3, r0
 80097f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 f8b1 	bl	8009964 <USBD_Get_USB_Status>
 8009802:	4603      	mov	r3, r0
 8009804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009806:	7bbb      	ldrb	r3, [r7, #14]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	607a      	str	r2, [r7, #4]
 800981a:	603b      	str	r3, [r7, #0]
 800981c:	460b      	mov	r3, r1
 800981e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800982e:	7af9      	ldrb	r1, [r7, #11]
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	f7f8 fc7d 	bl	8002132 <HAL_PCD_EP_Transmit>
 8009838:	4603      	mov	r3, r0
 800983a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800983c:	7dfb      	ldrb	r3, [r7, #23]
 800983e:	4618      	mov	r0, r3
 8009840:	f000 f890 	bl	8009964 <USBD_Get_USB_Status>
 8009844:	4603      	mov	r3, r0
 8009846:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009848:	7dbb      	ldrb	r3, [r7, #22]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3718      	adds	r7, #24
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b086      	sub	sp, #24
 8009856:	af00      	add	r7, sp, #0
 8009858:	60f8      	str	r0, [r7, #12]
 800985a:	607a      	str	r2, [r7, #4]
 800985c:	603b      	str	r3, [r7, #0]
 800985e:	460b      	mov	r3, r1
 8009860:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009870:	7af9      	ldrb	r1, [r7, #11]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	f7f8 fc07 	bl	8002088 <HAL_PCD_EP_Receive>
 800987a:	4603      	mov	r3, r0
 800987c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800987e:	7dfb      	ldrb	r3, [r7, #23]
 8009880:	4618      	mov	r0, r3
 8009882:	f000 f86f 	bl	8009964 <USBD_Get_USB_Status>
 8009886:	4603      	mov	r3, r0
 8009888:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800988a:	7dbb      	ldrb	r3, [r7, #22]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	460b      	mov	r3, r1
 800989e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098a6:	78fa      	ldrb	r2, [r7, #3]
 80098a8:	4611      	mov	r1, r2
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7f8 fc29 	bl	8002102 <HAL_PCD_EP_GetRxCount>
 80098b0:	4603      	mov	r3, r0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
	...

080098bc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80098c8:	78fb      	ldrb	r3, [r7, #3]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d002      	beq.n	80098d4 <HAL_PCDEx_LPM_Callback+0x18>
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d013      	beq.n	80098fa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80098d2:	e023      	b.n	800991c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d007      	beq.n	80098ec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80098dc:	f000 f83c 	bl	8009958 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098e0:	4b10      	ldr	r3, [pc, #64]	; (8009924 <HAL_PCDEx_LPM_Callback+0x68>)
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	4a0f      	ldr	r2, [pc, #60]	; (8009924 <HAL_PCDEx_LPM_Callback+0x68>)
 80098e6:	f023 0306 	bic.w	r3, r3, #6
 80098ea:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fe fcce 	bl	8008294 <USBD_LL_Resume>
    break;
 80098f8:	e010      	b.n	800991c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009900:	4618      	mov	r0, r3
 8009902:	f7fe fcb2 	bl	800826a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d005      	beq.n	800991a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800990e:	4b05      	ldr	r3, [pc, #20]	; (8009924 <HAL_PCDEx_LPM_Callback+0x68>)
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	4a04      	ldr	r2, [pc, #16]	; (8009924 <HAL_PCDEx_LPM_Callback+0x68>)
 8009914:	f043 0306 	orr.w	r3, r3, #6
 8009918:	6113      	str	r3, [r2, #16]
    break;
 800991a:	bf00      	nop
}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	e000ed00 	.word	0xe000ed00

08009928 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009930:	4b03      	ldr	r3, [pc, #12]	; (8009940 <USBD_static_malloc+0x18>)
}
 8009932:	4618      	mov	r0, r3
 8009934:	370c      	adds	r7, #12
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	2000025c 	.word	0x2000025c

08009944 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]

}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800995c:	f7f6 fe6a 	bl	8000634 <SystemClock_Config>
}
 8009960:	bf00      	nop
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	4603      	mov	r3, r0
 800996c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009972:	79fb      	ldrb	r3, [r7, #7]
 8009974:	2b03      	cmp	r3, #3
 8009976:	d817      	bhi.n	80099a8 <USBD_Get_USB_Status+0x44>
 8009978:	a201      	add	r2, pc, #4	; (adr r2, 8009980 <USBD_Get_USB_Status+0x1c>)
 800997a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997e:	bf00      	nop
 8009980:	08009991 	.word	0x08009991
 8009984:	08009997 	.word	0x08009997
 8009988:	0800999d 	.word	0x0800999d
 800998c:	080099a3 	.word	0x080099a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73fb      	strb	r3, [r7, #15]
    break;
 8009994:	e00b      	b.n	80099ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009996:	2303      	movs	r3, #3
 8009998:	73fb      	strb	r3, [r7, #15]
    break;
 800999a:	e008      	b.n	80099ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800999c:	2301      	movs	r3, #1
 800999e:	73fb      	strb	r3, [r7, #15]
    break;
 80099a0:	e005      	b.n	80099ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099a2:	2303      	movs	r3, #3
 80099a4:	73fb      	strb	r3, [r7, #15]
    break;
 80099a6:	e002      	b.n	80099ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80099a8:	2303      	movs	r3, #3
 80099aa:	73fb      	strb	r3, [r7, #15]
    break;
 80099ac:	bf00      	nop
  }
  return usb_status;
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <__libc_init_array>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	4e0d      	ldr	r6, [pc, #52]	; (80099f4 <__libc_init_array+0x38>)
 80099c0:	4c0d      	ldr	r4, [pc, #52]	; (80099f8 <__libc_init_array+0x3c>)
 80099c2:	1ba4      	subs	r4, r4, r6
 80099c4:	10a4      	asrs	r4, r4, #2
 80099c6:	2500      	movs	r5, #0
 80099c8:	42a5      	cmp	r5, r4
 80099ca:	d109      	bne.n	80099e0 <__libc_init_array+0x24>
 80099cc:	4e0b      	ldr	r6, [pc, #44]	; (80099fc <__libc_init_array+0x40>)
 80099ce:	4c0c      	ldr	r4, [pc, #48]	; (8009a00 <__libc_init_array+0x44>)
 80099d0:	f000 f82c 	bl	8009a2c <_init>
 80099d4:	1ba4      	subs	r4, r4, r6
 80099d6:	10a4      	asrs	r4, r4, #2
 80099d8:	2500      	movs	r5, #0
 80099da:	42a5      	cmp	r5, r4
 80099dc:	d105      	bne.n	80099ea <__libc_init_array+0x2e>
 80099de:	bd70      	pop	{r4, r5, r6, pc}
 80099e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099e4:	4798      	blx	r3
 80099e6:	3501      	adds	r5, #1
 80099e8:	e7ee      	b.n	80099c8 <__libc_init_array+0xc>
 80099ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099ee:	4798      	blx	r3
 80099f0:	3501      	adds	r5, #1
 80099f2:	e7f2      	b.n	80099da <__libc_init_array+0x1e>
 80099f4:	08009a9c 	.word	0x08009a9c
 80099f8:	08009a9c 	.word	0x08009a9c
 80099fc:	08009a9c 	.word	0x08009a9c
 8009a00:	08009aa0 	.word	0x08009aa0

08009a04 <memcpy>:
 8009a04:	b510      	push	{r4, lr}
 8009a06:	1e43      	subs	r3, r0, #1
 8009a08:	440a      	add	r2, r1
 8009a0a:	4291      	cmp	r1, r2
 8009a0c:	d100      	bne.n	8009a10 <memcpy+0xc>
 8009a0e:	bd10      	pop	{r4, pc}
 8009a10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a18:	e7f7      	b.n	8009a0a <memcpy+0x6>

08009a1a <memset>:
 8009a1a:	4402      	add	r2, r0
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d100      	bne.n	8009a24 <memset+0xa>
 8009a22:	4770      	bx	lr
 8009a24:	f803 1b01 	strb.w	r1, [r3], #1
 8009a28:	e7f9      	b.n	8009a1e <memset+0x4>
	...

08009a2c <_init>:
 8009a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2e:	bf00      	nop
 8009a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a32:	bc08      	pop	{r3}
 8009a34:	469e      	mov	lr, r3
 8009a36:	4770      	bx	lr

08009a38 <_fini>:
 8009a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3a:	bf00      	nop
 8009a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3e:	bc08      	pop	{r3}
 8009a40:	469e      	mov	lr, r3
 8009a42:	4770      	bx	lr
